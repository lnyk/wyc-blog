{"meta":{"title":"William Yao's Dream World","subtitle":"执着而不集成本，不为索取只为陶醉","description":"William Yao\\'s Dream World","author":"William Yao","url":"https://blog.williamyao.com"},"pages":[{"title":"标签","date":"2018-04-02T16:37:11.000Z","updated":"2018-04-02T16:41:40.740Z","comments":true,"path":"tags/index.html","permalink":"https://blog.williamyao.com/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2018-04-09T14:56:41.000Z","updated":"2018-04-09T14:57:40.887Z","comments":true,"path":"categories/index.html","permalink":"https://blog.williamyao.com/categories/index.html","excerpt":"","text":""},{"title":"本站和我","date":"2018-04-16T02:30:26.000Z","updated":"2018-04-16T02:35:24.558Z","comments":true,"path":"about/index.html","permalink":"https://blog.williamyao.com/about/index.html","excerpt":"","text":"关于文章其实也没有什么啦（千万别信，我这只是一种表达谦虚的方式而已，你懂的）！说起文章的话，其实经济文化社会生产等各方面都有所包含：）但我又是个看不惯乱糟糟场面的强迫症患者，所以姑且将这些文字统统扔到了下面三个洞里。 IRONWARE数字的洪流，堆砌成亦真亦幻的现实 这里堆砌着无数属于“停了电就什么作用都没有了”的文章，为什么这么说呢？因为它们讲述的是“电视机、收音机、洗衣机、电灯泡、空调、热水器”的故事，如果没有电，它们就什么都不是了……当然，这里面还混杂着少部分的云计算、互联网、服务器、软件和编程的小东东，凑合看看也就罢了。 DREAMS定格的瞬间，记录下如梦一样的世界 我总以为，一张照片的瞬间，往往可以描述跨越若干长度的距离和世间，一个真正优秀的拍摄者，应该是一个旁观者，一个倾听者，同时是一个富有想象力的创作者，他在借用光和影冲击着别人也许完全不同的世界观。 WHISPERS无声的呐喊，相伴着萦绕风中的耳语 有朋友问我，在这里发照片、写感想、聊闲话干什么呢？又没有几个人看！我……你过来，我不打你！想起许久前看的那本因为批不下书号而改了单期杂志的《独唱团》，我为什么在这里写东西？总会有人懂的。 关于摄影二十多年来，那个“执着而不计成本，不为索取只为陶醉”，曾因固执的认为美好的东西都应在画面中，走遍天下寻找美景，却忽略了身边最美的东西。 时光荏苒，繁华褪去，顿开蹙眉后循迹而来，看到的竟是一个无我世界中我的影子。 最好的摄影师是次元之外带有一丝独特气息的眼睛，他在感知画面的灵魂，并用悄无声息的方式将自己的气息融入那其实从未改变过的客观存在。 时间带走的不光是原本稚嫩的画面和画面背后稚嫩的人，在一件件得到又一次次放手之后，时间向我们诉说的是，画面的意义本就在那里，它并不取决于是用什么拍的，如何拍的，谁拍的。 所以最后，任何信手拈来能留住画面的东西，都能留住画面的意义。 用了二十多年时间从旁轴、双反、单反回到旁轴，从中焦、长焦、广角回到定焦，从135、120、645/6*6回到135。 这一圈儿兜下来才发现，最向往的东西，一直都在那个开始的时间点上，等着我回来，那个坐在沙发上，信手拈来，心无旁骛，毫无顾忌的，简单的快乐小屁孩。 关于本站William Yao’s Dream World 一个文艺大叔的自白接触网络十数年，至今感觉自己像是个傻瓜。 接触编程十数年，至今感觉自己真是个傻瓜。 接触摄影十数年，至今感觉越来越喜欢傻瓜。 接触赛车十数年，至今感觉疯子都喜欢傻瓜。 接触爱情十数年，至今感觉宁愿变成个傻瓜。 清华大学混日子，至今感觉这里就我是傻瓜。 最近经常看的书：A Thousand Splendid Sun. 最近研究的领域：中年男人的信任感和安全感在步入而立的自身上实现的途径探索与方法研究。 最想做的事：寻回那个特定源向外辐射的所有能量。 最希望实现的理想：上面那句话。 最应该坚持的事情：上上面那句话。 最希望得到理解的事情：上上上面那句话。 最喜欢的一句话：上上上上面那句话。 最后，很高兴你能看到这里请记住本站不是很难记的域名：WILLIAMYAO.COM、LNYK2.COM 以及我们邮件联系！ LNYK@ME.COM"}],"posts":[{"title":"打造灵活可用的本地Node.js工具链环境","slug":"2017112901","date":"2017-11-29T02:03:09.000Z","updated":"2018-04-16T02:07:33.138Z","comments":true,"path":"2017/11/29/2017112901/index.html","link":"","permalink":"https://blog.williamyao.com/2017/11/29/2017112901/index.html","excerpt":"Sinopia貌似早就停止更新了，而且对5.0以上版本的npm兼容很差，最新的本地镜像工具是Verdaccio，用法、结构，甚至配置文件都几乎一样，不知道这两个软件之间是什么关系，总之Verdaccio对于当前9.11.1版本的Node及其对应版本的npm支持的都非常好。 William Yao2018年04月13日 最近这小一年时间，真是折腾了不少东西，要说始终没空更新博客，那真是牵强附会的理由，就连Typecho都升级版本了，我的博客内容却始终没变化，实在有些说不过去，就算权当记录自己的成长历程，也该码点儿字啊。","text":"Sinopia貌似早就停止更新了，而且对5.0以上版本的npm兼容很差，最新的本地镜像工具是Verdaccio，用法、结构，甚至配置文件都几乎一样，不知道这两个软件之间是什么关系，总之Verdaccio对于当前9.11.1版本的Node及其对应版本的npm支持的都非常好。 William Yao2018年04月13日 最近这小一年时间，真是折腾了不少东西，要说始终没空更新博客，那真是牵强附会的理由，就连Typecho都升级版本了，我的博客内容却始终没变化，实在有些说不过去，就算权当记录自己的成长历程，也该码点儿字啊。 最近一段时间，因为工作需要，实在没有办法，硬着头皮开始折腾前端方面的东西。要说方便的话，JS的东西，基本可以拿来就用，涉及到的知识点也就HTML5/ES5-6/服务器一类的内容，只要与现有体系（技术）结合的好，django+bootstrap也就分分钟的事儿，可为什么说叫“硬着头皮”呢？ 不管是正打算窥探前端世界的雏鸟们，还是已经到了没事儿写个插件模块的高手，我觉得大家至少在下面这一点上有一个共识：前端技术体系，是一个由一堆极客构建出来的庞大、松散、版本迭代速度奇快的，供重度代码强迫症患者放肆发泄的神奇世界。 说回这些天来我自己的感受，怎么说呢……正事儿没怎么干，光“搭环境”就让我乐此不疲的废寝忘食了无数个花好月圆……这里套用加西亚的叙事风格：“一个月之后，拿着自己用echarts拼凑出来的图表准备交差的时候，怎么也不会想到，原来当年直接被我忽略掉了的normalize.css和一堆.min.js，才应该是整个项目的起点。说白了，就是在前端技术的世界门前，我又一次迷了路。 这也是今晚突然来了情绪，说什么也要写这么一篇小短文的其中一个原因，目的就是想让对前端技术感兴趣的童鞋们，别像我一样迷路。本文想要达到的效果，就像标题所说的那样，通过简单的几个步骤，构建起灵活可用的本地Node.js工具链环境。 因为，构建好工具链（俗称搭环境），才是迈向前段世界的正确的第一步！ 至于另外一个原因，其实也是本文最想分享给大家的，是怎么在没有互联网的内网环境中，继续用你自己搭好的工具链环境！ 怎么样，上面写的全是废话吧？好吧，让我们赶快开始！ 先跑个题儿我喜欢用emacs，因为emacs是我的信仰！但不管是deb世界还是rpm世界，版本更新都不怎么及时，真烦！于是搜贴，用下面的几行命令，可以在ubuntu或者apt的世界里，用上最新版的emacs。 123sudo add-apt-repository ppa:kelleyk/emacssudo apt-get updatesudo apt-get install emacs25 如果你之前用源码编译安装的，并且当时的源码包还在（千万别轻易删除任何源码包），那么大多数用make方式进行编译安装的源码包，都支持： 1sudo make uninstall 跑题结束，正文开始！ 整体架构对于前端世界而言，大的包管理架构林林总总好多个，但最有名的还是node.js中的npm（虽然yarn作为后起之秀也相当不错），而node本身的多版本管理，也经常让人头痛，并且，如果你没办法连接互联网，那一切都可以拜拜了！ 所以，本文所分享给大家的应用场景是： 你的日常开发工作，均需要在内网环境中进行，绝对连不了互联网！ 你至少有一台电脑可以连互联网，且从这台电脑上下载的东西，不管是刻盘也好优盘也好网闸也好，总之能拷贝到你内网中那台连不了互联网的可怜电脑上（比如我这儿）。 两台电脑都跑着Linux（推荐Ubuntu或者CentOS），因为我不用Windows，所以如果你用的Windows，抱歉我没法教你…… 如果符合上面三个条件，你可以放心的继续阅读本文了。 阅读前注意！ 请一步步的按顺序仔细阅读，因为每一个小节中即包含了怎么回事，也包含了该怎么干。 对于Linux新手，也是最容易犯的错误，请记住一句话：在没让你sudo的时候，就别乱用root！特别是这条，因为你很可能把什么东西给搞成系统级安装，你自己用着还不知道！ nvm这东西很神奇！很方便！很强大！它是用来管理本地node版本的工具，怎么说呢？有点类似python的virtualenv，你可以用这东西在node的若干个版本之间无缝切换，而且安装配置全自动，最重要的，这东西可以带着node，以及用npm install -g全局安装的所有东西，一起搬家！ 本节操作，在互联网电脑上进行。 nvm的官网，以及安装使用说明 首先，如果你当前系统中有node和npm，请统统删了！ 然后，装上git！ 1sudo apt install git 随后，安装nvm： 1curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.6/install.sh | bash 或者 1wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.6/install.sh | bash 官网说的很清楚，上面的脚本，会从github上克隆nvm到~/.nvm中，并且在你的profile中加两句变量定义和脚本引用，就算装完了！是不是很简单？ 看到没，nvm不是系统级的安装，它自己本身就是可以搬家的！ 验证一下nvm的安装结果： 1command -v nvm 如果屏幕有信息返回（应该就三个字母：nvm），就表示安装成功了，如果没有，请exit当前的Terminal，重新开一个，再试试，应该就好了。 本节终极知识点： ~/.nvm包含了所有东西，并且不是系统级安装，是可以直接考走的！ 用nvm安装node弄好了nvm，在互联网电脑上的剩下操作，就更简单了！ 1nvm install --lts 上面的命令，会自动安装node的LTS版本，LTS版本是最新的长期支持稳定运行版本，截至本文发布时，node的LTS版本是v8.9.1 然后 1nvm install node 上面只指定node，不指定版本号，默认就是安装node的最新（稳定）版本，注意这个版本一般不是长期支持版本。截至本文发布，最新版本是v9.2.0 这里，推荐你把将来可能用到的所有node版本，统统装上！ 12nvm ls 查看本地Node.js版本nvm ls-remote 查看远端Node.js的所有版本，想装哪些版本，就从这里面挑吧！ nvm会自动将你install的最近一个版本，作为node的默认运行版本，你可以使用下面的命令在本地已经安装的版本（用nvm ls查看）中自由切换： 123nvm use node或者nvm use --lts 这里只需要注意一点，代表LTS版本的标签，前面要带上--. 本节需要掌握的知识点： nvm会把所有已经安装的版本统一放在.nvm/versions/node/ nvm在安装node的时候，如果可执行文件包下载失败，会自动切换到源码包下载，并自动编译安装到.nvm对应目录中，基本可以做到万无一失的全自动安装！ nvm在安装node之后，会自动安装该版本能够支持的最高版本的对应npm（或者说node自带的npm） 用npm安装sinopia那啥，你不知道npm是啥？天呢……npm是node用来管理包的工具，这么说吧： nvm用来管理不同版本的node，对于每个已经安装的node来说，都是相互独立的，从node内部来看，LTS版本的node并不知道还有另外一个9.2.0版本的node在它隔壁。 npm是node管理自己的模块（或是包、插件等等）的工具，每个用nvm安装的node版本，都有它自己的npm包管理工具，虽然不正确，但你可以把npm看作是每个版本的node都会自带的东西。 好了，基本概念解释清楚了之后，我们来看看这个真正实现本地化的神器：sinopia. sinopia简单的理解，就是Node世界中众多模块中的一个，它的功能很简单也很强大！ 简单，就是全自动的维护运行一个本地的node模块仓库（node的仓库叫做registry）。 强大，是在npm告诉sinopia想要什么模块之后，sinopia先看看它自己这儿有没有，如果有，就直接提供给npm，如果没有，会先自动从npm的官方仓库中下载回来，保存到自己这儿，然后再提供给npm，这一切均自动完成。当然，sinopia还支持多用户上传分享模块等等功能，它就是在替你维护一个全功能的Registry！ 12nvm use nodenpm install -g sinopia 这里我们先指挥nvm激活node的最新版本，然后用npm将sinopia全局安装（-g）到node的全局模块库中。这里跟上一节不同，你完全没必要每个node版本都装一个sinopia，用最新的node装最新的sinopia就好啦。 在上面装sinopia的最后，编译器[有可能]会报两个依赖包编译失败的错误，一个是fs-ext，一个是crypt3，出现这种情况，我也不知道是怎么回事，node的LTS和最新版在Ubuntu 16.04 LTS中都会出现这两个错误，但没关系，从sinopia的依赖包文件中可以看到，fs-ext和crypt3这两个包是可选依赖，简单讲就是“没它们也行”的意思，但毕竟是编译错误，我们需要手动删除关于这两个包的一些多余文件： 1234rm -fr ~/.nvm/versions/node/v9.2.0/lib/node_modules/fs-ext/rm -fr ~/.nvm/versions/node/v9.2.0/lib/node_modules/crypt3/rm -fr ~/.nvm/versions/node/v9.2.0/lib/node_modules/sinopia/node_modules/fs-ext/rm -fr ~/.nvm/versions/node/v9.2.0/lib/node_modules/sinopia/node_modules/crypt3/ 上面四个位置中的v9.2.0是用来安装sinopia的node版本号，请修改为自己的。且上面四个路径不一定都存在，保险起见，挨个都删一下吧，不然在用npm指定用户登录sinopia维护的Registry的时候，htpasswd组件会报错。 有经验的童鞋，在看了上面四个路径之后，是不是有所收获？没错，nvm真的很强大，完全把每个版本的node都独立封在了各自的目录中，真的挺像python世界的虚拟环境的。 配置sinopiasinopia就这点最贴合我的审美：号称零配置！装上就能用！ 12cd ~/sinopia 直接输入sinopia，它就开始工作了！ 第一次运行的时候，sinopia会在~/.config/sinopia/中生成一个config.yaml，这是它默认的配置文件，为了给将来的搬家工作做铺垫，我们先ctrl-c结束sinopia的运行，然后新建个目录，将配置文件丢进去： 1234cdmkdir sinopiacd sinopiacp ~/.config/sinopia/config.yaml ./ 然后用编辑器打开这个配置文件： 1nano ~/sinopia/config.yaml 将第一行的storage变量内容修改为相对路径： 1storage: ./storage 这一行的意思是，告诉sinopia，用来存储所有模块的地方，是与这个config.yaml配置文件在一起的storage目录。 然后，我们带着参数再次运行sinopia： 12cd ~/sinopiasinopia -c config.yaml 12warn --- config file - /home/wyao/sinopia/config.yamlwarn --- http address - http://localhost:4873/ 如果屏幕输出了类似上面的内容，OK，这次sinopia在使用我们修改好的config.yaml运行了，它所维护的所有包，都放在指定地方（这里是~/sinopia/storage） 这里先别结束sinopia，就让它这么运行着，下一节我们会用它继续工作！ 指挥npm连上sinopia本节比较简单，因为在npm看来，sinopia给的地址就是一个正常的Registry。我们这么来做，保持上一节打开的sinopia不便，新开一个Terminal（终端），然后： 123nvm use nodenpm set registry http://localhost:4873npm adduser 第一条命令是指定nvm激活最新版本的node，这样做是为了举个例子，你完全可以激活任何一个版本的node，设定registry到sinopia的服务地址，并且用向导注册一个新用户（注册完会提示自动登录到了registry）。 这里其实还隐藏着一点，就是使用nvm管理的node，对于每一个Terminal（终端）来说，都是独立的，就算一个终端中运行着最新版本node的sinopia，另一个终端完全可以nvm use --lts，互相没有干扰（我又想说python的venv了，真的是天才设计）。 注册完用户（其实也可以不注册），新建一个临时文件夹，用npm通过sinopia把将来可能会用到的模块，统统装一遍，这一步不为别的，只是让sinopia把那些模块从官方仓库中下载回来并保存到它自己的storage目录中： 12345678cd /tmpmkdir ssscd sssnpm install -g gulpnpm install -g gruntnpm install jquerynpm install bootstrap... 看着另一个终端中的sinopia正在替你做着所有事情，心情是不是很好？等装完想装的，结束sinopia，exit所有终端窗口，我们准备最后一个大环节：打包搬家！ 搬家准备在这一节中，我们主要打包两样东西： 123cdtar cjvf nvm.tar.bz2 ~/.nvm/tar cjvf sinopia.tar.bz2 ~/sinopia/ 就这两样！只有这两样！简单不？ 刻盘、优盘、网闸，随你便，让我们暂时离开互联网，搬到内网机器上。 落户内网你已经成功把上面两个包弄到内网来了，并且内网的这台机器也是Linux（理由请看本文开始部分），假设这两个包拷贝在~/Downloads/中，我们解压它们： 123cd ~/Downloadstar xjvf nvm.tar.bz2tar xjvf sinopia.tar.bz2 然后移动.nvm目录到~/中： 1mv ~/Downloads/.nvm ~/ 至于sinopia目录，把它放在服务一类的程序目录中就好，比如： 1mv ~/Downloads/sinopia ~/running/ 然后我们编辑当前系统用户的profile（Ubuntu的文件在~/.bashrc），在最后加上几行： 123export NVM_DIR=\"$HOME/.nvm\"[ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\. \"$NVM_DIR/nvm.sh\" # This loads nvm[ -s \"$NVM_DIR/bash_completion\" ] &amp;&amp; \\. \"$NVM_DIR/bash_completion\" # This loads nvm bash_completion 然后source .bashrc或者关了重开一个Terminal，测试一下我们的nvm激活了没有： 12nvm lsnvm use node 如果测试用的命令有用，恭喜你，nvm落户成功了！ 接下来，我们继续操作sinopia： 123cd ~/running/sinopianvm use nodesinopia -c config.yaml 如果一切正常，sinopia会顺利起来，和互联网那台机器一样开始提供服务！ 这里需要注意，第二行命令是激活某一个版本的node，这里你需要激活那个在互联网机器上安装sinopia的版本，因为别的版本中没有安装sinopia（当然，如果你多个node版本全装了，算你狠……） 再提醒一点，什么npm set registry，npm add user之类的操作，只要是在之前互联网机器上做过的，现在都不需要再做了，还记得吗？所有东西，都保存在.nvm目录中，配置也一样，我们全搬过来了！ 日后维护按照上面的操作进行到这里，我们已经把nvm，多个版本的node，对应的npm，以及sinopia统统搬进了内网。 如果以后想要安装其他node模块，只需要回到那台互联网机器上运行sinopia，找个临时文件夹npm install想要的模块，然后把sinopia的storage文件夹替换内网机器上的storage文件夹即可。 如果想要更新node版本，在互联网机器上操作完nvm之后，直接打包.nvm目录回到内网，替换原来目录即可。 上面两个操作建议替换，因为我不确定合并目录会带来什么隐患，还是删了旧的，直接用新目录保险！ 后记好久不写文章，确实写的废话连篇，但至少至此，你应该能够很牛逼的对你的团队成员讲：“老子新建了一个registry，都把npm set到我这里，自己注册用户，我们用私有仓库共享模块！ 希望本文能够帮助到你！","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://blog.williamyao.com/tags/javascript/"},{"name":"nodejs","slug":"nodejs","permalink":"https://blog.williamyao.com/tags/nodejs/"},{"name":"npm","slug":"npm","permalink":"https://blog.williamyao.com/tags/npm/"}]},{"title":"Let's Encrypt全程配置使用指南","slug":"2017032701","date":"2017-03-27T01:46:00.000Z","updated":"2018-04-13T02:44:37.043Z","comments":true,"path":"2017/03/27/2017032701/index.html","link":"","permalink":"https://blog.williamyao.com/2017/03/27/2017032701/index.html","excerpt":"现在的版本由于支持了泛域名证书验证，Let’s Encrypt的命令和过程机制都和原来不太一样了，想要进入自动认证的，推荐直接使用LNMP提供的全自动脚本，一条命令搞定，会省很多事情！ William Yao2018年04月13日 前言首先，就在昨天，从StartSSL申请的为期一年的SSL证书到期了，Renew了新的email证书和所有相关DV证书更新进nginx之后，发现所有浏览器（IE/Firefox/Chromium）全都提示证书安全方面的问题，于是花时间仔细调研了一番，突然震惊的发现如下信息：","text":"现在的版本由于支持了泛域名证书验证，Let’s Encrypt的命令和过程机制都和原来不太一样了，想要进入自动认证的，推荐直接使用LNMP提供的全自动脚本，一条命令搞定，会省很多事情！ William Yao2018年04月13日 前言首先，就在昨天，从StartSSL申请的为期一年的SSL证书到期了，Renew了新的email证书和所有相关DV证书更新进nginx之后，发现所有浏览器（IE/Firefox/Chromium）全都提示证书安全方面的问题，于是花时间仔细调研了一番，突然震惊的发现如下信息： Firefox浏览器背后的Mozilla基金会正在考虑对沃通（WoSign）及被其秘密收购的StartCom（著名的StartSSL即其旗下产品）这两个CA一年内新签发的所有SSL证书进行封杀。Mozilla的工程师是在对这两个CA签发了一系列可疑的SSL SHA-1证书进行调查之后，宣布了这个禁令。 这两家CA试图规避已经被我大中华山东大学数学教授王小云对撞破解后宣布不再安全的SHA-1算法的停用政策。 沃通秘密收购了StartCom，在2016年采用倒填日期的手段来签发SHA-1证书。 Mozilla说这个临时封杀仅针对这两个公司最新签发的证书，不影响已经分发给他们的客户的证书。如果这两个公司在一年的封杀后没有通过一系列的检查，Mozilla将准备封杀这两个公司的所有证书。 此外，Chrome和其它产品的对它们的封杀也在计划中。 怎么说呢，这年头信仰的缺失总会带来很大问题，也许有一天迪菲－赫尔曼密钥交换算法也变得不再安全了呢…… 综合以上原因，也该暂时放弃StartSSL的SHA-1证书，改投目前我认为一定会火起来的Let&#39;s Encrypt项目吧。 Let’s EncryptLet’s Encrypt是国外一个公共的免费SSL项目，由Linux基金会托管，由Mozilla、思科、Akamai、IdenTrust和EFF等组织发起，目的就是向网站自动签发和管理免费证书。 看这介绍就觉得很牛，一直懒得去尝试，现在终于是出手的机会了。 本文目的阅读完本文，我希望使你能够达成如下目的： 暂时忘了StartSSL 了解Let&#39;s Encrypt 为你的ubuntu+nginx一路搞定新的SSL证书 废话不多说，我们开始。 具体步骤本文使用Let&#39;s Encrypt推荐的ACME工具Certbot以达到官方指导的证书自动获取、安装、更新、维护的目的，感兴趣的童鞋请访问下面两个网站了解来龙去脉（鸟语版）： Let’s Encrypt Certbot 性子急的童鞋，请继续往下看，我们正式开始。 环境假设 Ubuntu 16.04 LTS nginx 1.8 sudo太麻烦，以下所有命令假设全在root权限下执行 配置APT安装Certbot首先确定你有add-apt-repository命令，如果没有，先装上： 1apt install software-properties-common 执行下面脚本安装Certbot 123add-apt-repository ppa:certbot/certbotsudo apt updatesudo apt install certbot 执行certbot -h，如果看到说明信息，就表示安装成功了（一般APT安装不会失败） 注册Certbot其实这是Certbot提供的一个帮助性服务：certbot register，这个命令，同意几个协议，填写一个邮箱，将来如果不小心丢了证书凭证，可以通过邮箱找回，挺好的，注册吧。 了解Certbot这里要说明一些关于Certbot的内容，首先这个工具是安装在服务器上的，可以自动搞定SSL证书的工具，它有两种常用的获得证书的途径，HTTP/TLS-SNI，具体技术细节在这里就不啰嗦了，你只需要选择一种： HTTP：你需要开着nginx且可以通过HTTP正常访问（不能开HTTPS） TLS-SNI：你需要暂时关闭nginx，因为Certbot会临时打开自己的小服务器获取证书，80端口得给它空出来 HTTP方式因为我之前的证书在更换成Let&#39;s Encrypt项目之前就已经过期了，加上Certbot不能通过HTTPS方式验证域名（网站）的有效性，所以我先将nginx虚机配置中所有跟SSL有关的项目全部注释掉，同时保证nginx reload之后还能正常跑起来，这里可以放心，网站内容能不能正常看并不重要，唯一需要注意的一点是，Certbot在执行完下面这条命令后，会在网站根目录新建一个.well-known目录，你需要保证你的nginx能够解析这个目录（最好的办法是丢个文本文件进去，看看能不能通过浏览器读到里面的内容）。 再次注意：执行下面这个命令需要你的nginx运行正常，且要满足上面一段话中的要求，不然证书申请会因为通过域名访问不了你的虚机而卡在反向认证环节。 1certbot certonly -w /home/wwwroot/williamyao.com -d williamyao.com -d williamyao.com 解释一下上面命令的意思： -w：指定nginx虚机根目录（nginx虚机配置.conf里面的root项），其实就是用来指挥远程服务反向读取这个目录下面的.well-known文件夹看看能不能访问到，以验证域名的真实性。 -d：连着两个，表示配合-w指明的虚机目录，总共有这两个域名指向同一个虚机，这两个域名会打包在一个证书里面。 TLS-SNI方式这里就比较简单了，因为不牵扯反向认证的问题，但是也有一点，nginx（或者80端口）得给Certbot空出来，它需要启动自己的小服务器来认证。 1certbot certonly --standalone -d williamyao.com -d williamyao.com 这一步和HTTP方式的不同总共有两点：一是nginx开关问题，二是以后证书的自动更新（Renew）问题，这个后面紧接着会讨论，得到的证书等文件以及存放路径都是一样的。 得到的东西不管选择哪种方式，在成功执行完毕后，都会得到下面的东西： /etc/letsencrypt/live/williamyao.com/ privkey.pem : the private key for your certificate. fullchain.pem: the certificate file used in most server software. chain.pem : used for OCSP stapling in Nginx &gt;=1.3.7. cert.pem : will break many server configurations, and should not be used. 对于nginx来说，我们只需要关心前两个文件，一个是秘钥，一个是证书。 配置nginx虚机的conf以我的配置为例，编辑/usr/local/nginx/conf/vhost/williamyao.com/conf，将原来所有跟SSL有关的配置项删掉（如果有），然后加入下面的配置： 123456789101112131415# 启用 SSL 配置ssl_prefer_server_ciphers on;ssl_certificate /etc/letsencrypt/live/williamyao.com/fullchain.pem;ssl_certificate_key /etc/letsencrypt/live/williamyao.com/privkey.pem;ssl_protocols TLSv1 TLSv1.1 TLSv1.2;ssl_ciphers &quot;EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4&quot;;keepalive_timeout 70;ssl_session_cache shared:SSL:10m;ssl_session_timeout 10m;# 强制全站使用HTTPS（如果不想全部使用HTTPS，请注释掉下面三行）add_header Strict-Transport-Security max-age=63072000;add_header X-Frame-Options DENY;add_header X-Content-Type-Options nosniff; 将ssl_certificate和ssl_certificate_key替换为得到的东西里面的证书和秘钥，至于其他配置项的意思，请自行度娘。 重启nginx验收有些人喜欢reload，我就喜欢重启！service nginx restart.如果不出意外，等服务跑起来，打开浏览器看看结构，是不是HTTPS和证书信息都正常？恭喜你！但是！还没完…… 配置自动更新其实我觉得呢，这一步才是Certbot最吸引人的地方，因为Let&#39;s Encrypt项目提供的证书有效期只有90天，频繁更新是挺烦人的事情，因此Certbot在手动执行自动更新证书命令的同时，也支持crontab计划表执行。 命令解释首先看一下命令：certbot renew --dry-run 这个命令的意思是，让certbot模拟更新一下已有证书，测试一下是否都能正常更新，但只是模拟全程，并不改写现有文件。 针对上面提到的需要选择的获得证书的两种方式，这个自动更新命令需要小有调整，对于HTTP方式，需要保证nginx是在运行的，所以我们用上Certbot支持的钩子机制： 1certbot renew --pre-hook \"service nginx start\" --post-hook \"service nginx restart\" --dry-run 上面命令的意思很简单，在执行renew动作之前，先执行service nginx start命令，确保nginx服务是起来的，在执行完renew动作之后，再执行service nginx restart来重启nginx确保更新完的证书及时加入nginx服务。 如果是TLS-SNI方式呢，命令稍作修改： 1certbot renew --pre-hook \"service nginx stop\" --post-hook \"service nginx start\" --dry-run 也很好理解嘛。 配置crontab真正配置生产环境的时候，我们不会想没事儿SSH到服务器上手动执行Certbot的，我们需要crontab的自动方式，啥是crontab，请自行度娘 Again.crontab -e 选择一个文本编辑器之后会自动打开crontab的任务文件，新加入一行对应命令，以我为例，每周二四六的凌晨三点检查更新证书， HTTP方式： 10 3 * * 2,4,6 certbot renew -q --pre-hook &quot;service nginx start&quot; --post-hook &quot;service nginx restart&quot; TLS-SNI方式： 10 3 * * 2,4,6 certbot renew -q --pre-hook &quot;service nginx stop&quot; --post-hook &quot;service nginx start&quot; 保存文件，关闭编辑器之后，crontab就自动按照我们的设定开始新的值守任务了。 注意1：因为是自动运行，我们只关心出错时的信息，所以带上-q开关，忽略所有非错误的信息。 注意2：因为是生产环境，是真的让它更新，所以去掉--dry-run模拟开关。 注意3：本章节所有renew命令，Certbot都会预先检查证书的有效期，只有临近过期的证书，才真正会被更新，其它“离着作废还早”的证书是会被智能略过的，所以引用官网上的一句说法，“很可能执行完更新命令，什么也没有发生。” 后记真的不得不说，StartSSL有点让我伤心，之前还写过一片详细的新手教程，现在也不用再看了。 也许有那么一天，任何东西都不再有加密的必要…… 那是共产主义吗？！ 因为已经到了头昏脑涨的凌晨一点多，所以此文文风略显“彪悍”，望君海涵！ 还是那句话，衷心希望此文能够帮到你。","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://blog.williamyao.com/tags/linux/"},{"name":"encrypt","slug":"encrypt","permalink":"https://blog.williamyao.com/tags/encrypt/"}]},{"title":"更改pypi(pip)源到阿里云","slug":"2017032301","date":"2017-03-23T01:44:06.000Z","updated":"2018-04-13T01:45:01.005Z","comments":true,"path":"2017/03/23/2017032301/index.html","link":"","permalink":"https://blog.williamyao.com/2017/03/23/2017032301/index.html","excerpt":"","text":"说实话，在国内使用pip有的时候真的是一种折磨，还好阿里云有镜像。 在~/.pip/中新建文件pip.conf并作如下修改： 12345[global]index-url = http://mirrors.aliyun.com/pypi/simple/[install]trusted-host=mirrors.aliyun.com","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"python","slug":"python","permalink":"https://blog.williamyao.com/tags/python/"}]},{"title":"“二货成长记”到“灰狼日记”","slug":"2017010801","date":"2017-01-08T01:37:34.000Z","updated":"2018-04-13T02:38:59.096Z","comments":true,"path":"2017/01/08/2017010801/index.html","link":"","permalink":"https://blog.williamyao.com/2017/01/08/2017010801/index.html","excerpt":"","text":"低头看着出去巡视完地盘，回来吃饱早饭，上蹿下跳疯了一上午，然后例行公事似的肚皮朝天，四仰八叉躺在我脚边睡回笼觉的虎子，不知为何，我总有种小小的愧疚感，真的就好像在虎子小小狗那会儿生病住院期间，朋友打趣对我说的那样，“不知道虎子跟了你，是它的幸运，还是不幸。” 出生两个多月，一场大病在医院住了十八天，回家又后续治疗加观察调养一个半月，原本圆软帅萌的小小狗硬生生被这场大病折磨的骨瘦如柴。虽说如此，可是“饿犬”那副小架势倒是丝毫没变，住院时一边打着点滴，一边吃罐头吃的满脸都是，出院回家，剃毛剃得这秃一块那秃一块，却眼神犀利的抱着我的腿玩儿命够我手里的酸奶瓶子，加上哈士奇本身肠胃功能就弱得号称“玻璃胃”，没吃过的，吃多了的，虎子统统拉稀，我摸索了好一阵子才能大致分清是病理性的还是生理性的。随后就是各种吃饭狼吞虎咽，在家上蹿下跳，对任何没见过的东西一闻二舔三叼走，出去玩儿，见到跟它目光对视，或者直接打招呼给我的人，就扑上去一顿乱舔，甚至丝毫不理会人家手里牵着的另外一条比它大的多的正在虎视眈眈盯着它随时准备扑上来护主的大金毛。 （虎子闭着眼伸出舌头，舔了舔我的脚后跟……） 记得朋友跟我说过一个段子，“十来岁那会儿，想什么说什么，二十来岁的时候，要说什么，会想想之后再说，到了三十来岁，有些话，想想就不说了。”而对于一个三十来岁，正自豪的认为凡事皆应理性思考，原则性强却心肠极软的人来说，虎子可谓是抓着我的痛点把我玩儿到了极致。 从决定养它开始，我就在恶补各种养狗的知识，书也细读了不少，网上的文章更是查阅的不计其数，养狗不养狗的朋友我都愿意向他们收集信息，甚至邀请两个在动物行为学方面很有研究的朋友来家里做客，向人家学习，然后应用于“实战”。可随着知识储备不断积累与实战演练屡战屡败的矛盾日益尖锐，以及每天奔波在自己的事儿和虎子的事儿之间的疲劳，我开始更多的在我和它之外的第三个角度考虑问题。 世上大多数矛盾，都是在妥协与自我妥协中达到平衡。 哈士奇，通常被戏称为“二哈”，这个形象应该是从网上不时放出的“现场视频”和搞怪表情包得来的，而对于把一只哈士奇几乎朝夕相处式的从小小狗养到一岁大的我来说，虎子的所作所为一直在颠覆“二哈”这个绰号的普遍含义，我也愿意为它们正名。 没错，虎子是一只可以在冰天雪地里自由驰骋的西伯利亚雪橇犬，如果抛开犬种这个讨论层面上显得不那么重要的个体差异，以及那个只以执行人的命令成功率为参考指标的所谓“智商排行榜”来说，我可以很负责任的给哈士奇一个更富有参考价值的大致定义： 哈士奇，它们是体能充沛，精力旺盛，能很快领会你的意图，甚至可以用一个动作，一个表情和它们交流，但在很多小事情上即使明白也懒得鸟你，甘愿“抬头挺胸做狗”，不愿“点头哈腰做人”，总是充满好奇却又警觉性奇高的，具有北极狼的个性和智慧的一群家伙。 至少从两个方面可以理解那个所谓“智商排行榜”容易给人们带来的误导性。一是从专业角度来说，记得当初跟从事宠物心理及行为训练方面工作的朋友聊天时他们说过，在他们接触的犬类专项训练比赛（比如搜救）中，哈士奇经常名列前茅，而且就“本职工作”而言，经过简单的训练，凭借优异的精力和体能，拉雪橇的时候哈士奇是极少犯错的。二是从性格角度——我还有点儿发言权的角度——来说，对于一个能在零下几十度的冰天雪地里一口气负重跑出8到12英里跟玩儿一样的狗来说，什么坐下、握手、丢球捡棍子这种事儿，至少我感觉，它们不是不懂，只是很不屑为之。 单从教会虎子全套“日常”动作，每个动作只用不到十分钟就能学会，但它却很少主动跟我玩儿这些“小把戏”这一点上，可以让我相信，哈士奇绝不是可以“亵玩”的狗，这一点有些书和文章中也有提到，“工作犬的自尊心和挫败感都是很强烈的”。 “哈士奇的潜力能发挥到什么程度，完全看你怎么养它，怎么对待它！” 说到这里，也该触及到很多不养狗的朋友们经常津津乐道的所谓“撕家”问题了。为什么只限于“不养狗”的人呢？因为至少我认识的所有狗主人中，没有人说过“我的狗不撕家”。那为什么只有哈士奇“撕”出了风格，“撕”出了招牌，“撕”成了二哈呢？ 我觉得这里面，还是误解多一些吧。有个在大理开客栈的老哥先后养过很多狗，自己本身也出于兴趣拿过犬类训练方面的资格证，跟他闲聊“撕家”问题时他说，“哈士奇喜欢撕家？你让它完成每天八英里的运动量，你看它还撕不撕？你以为边牧就不撕了？牧羊犬啊老弟，你不陪它玩儿个大半天跳山羊叼飞盘逮兔子的游戏，把它过剩的体能消耗出来，或者干脆扔到一边儿，让它得不到你的关注，边牧会比哈士奇撕的更有‘意境’”。想起戴更基有本书里写的，“如果你住在阿尔卑斯山上，有一大片院落和几十只羊，养了两只边境牧羊犬，那请你忘掉我说过的所有话，你根本不用看我的书。” “人之过在好为人师” 本想写的更有临场感一些，却不自觉的又走上了照本宣科的老路，对不住了。至少我希望上述观点能够小小影响到喜欢、关注哈士奇，甚至是正在养狗的朋友们。同时，喜欢看我朋友圈“二货成长记”的童鞋们，感谢这么长时间对虎子的关心关注，它的健康成长离不开你们中的任何一位！还有一直想知道“二货”到底叫什么的朋友，真的抱歉我到现在才告诉你们，是的，它就叫虎子！ 当初之所以起名叫“二货成长记”，有些朋友已经打趣的猜到了答案，那些文字和图片，其实是两个“二货”共同成长的记录，虎子的二，在于像“小尾巴”一样对我的信任和依赖，我的二，则在于醉心的享受在虎子对我几近极致的忠诚与近乎直白的“不尊重”中疯笑挠墙的莫名快感，以及从“不懂”养狗，变成“不懂”养它的深层次愚钝。 这篇与“二”大相径庭的文章也让喜欢“二货成长记”的童鞋们嗤笑了，在这里跟大家道个歉，“二货成长记”中的内容，多半断章取义，加上艺术渲染，仅为博君一笑。真正的虎子，我会在“灰狼日记”中作为故事详细道来，也盼望随后道来的这些“第一手资料”能给喜欢虎子，或者喜欢养狗的朋友们一点参考的价值。 盯着依然熟睡在脚边的虎子的大鼻头，我突然在想，来到这个世界上一年了，也去了不少地方，见了不少东西，认识了不少的同类和异类，它对这个世界是怎样的一种印象呢？它对我和家人的印象又如何呢？ 今天虎子一岁了，本在矫正挑食的强制阶段，也特例让它放纵了一下，毕竟是这个小东西来到世上整一年，虽然“多灾多难”，小斗士依然神采奕奕的飞奔在“小康”的大道上，久违的厨房和鸡肝，今天只需开心！ 抄袭一下加西亚的风格，作为引言的结束语，以及“灰狼日记”的序章。 “多年以后，虎子站在它住过的第一个笼子前，准会想起我开车接它从狗舍到家的那个下午。当时，它的家只是几片特大号的围栏围起来的长方形，里面铺着我当年在单位用过的破褥子，装它的小笼子就放在褥子上，旁边给它吃饭喝水用的小铁碗粗糙褪色，活像我的烟缸。” 附上从虎子到家第一天开始到现在的全记录，吃饭排便体重精神状况，什么时候换的牙，什么时候闹的狗等等，以及当日表现，除了身高体长以外几乎都有了。图片看不清？没关系，那是我故意的~ 开玩笑，放心吧，这些数据我会在编辑一番弄得漂亮点儿之后陆续放出的，没办法，谁让朋友总奚落我说：“你没女人养，就弄条狗来养。”先抛开个人观点不谈，既然虎子跟了我，我就把它养到极致吧！ 这个博客是灰狼日记的唯一更新地址，几个域名都可以用： hdiary.cc hus.wiki williamyao.com lnyk2.com 也可以关注微博，我会同步更新。","categories":[{"name":"HDiary","slug":"HDiary","permalink":"https://blog.williamyao.com/categories/HDiary/"}],"tags":[{"name":"life","slug":"life","permalink":"https://blog.williamyao.com/tags/life/"},{"name":"hdiary","slug":"hdiary","permalink":"https://blog.williamyao.com/tags/hdiary/"}]},{"title":"更新JavaScript公共库到BootCDN","slug":"2016033101","date":"2016-03-31T01:35:18.000Z","updated":"2018-04-13T01:37:02.814Z","comments":true,"path":"2016/03/31/2016033101/index.html","link":"","permalink":"https://blog.williamyao.com/2016/03/31/2016033101/index.html","excerpt":"今天下决心“修理”了一下引入外链给SSL造成的“安全警告提醒”问题！总共修复了以下三部分内容，现在开启调试终于没有安全警告了！我感觉BootCDN还是很不错的，版本更新也比较及时，有兴趣的朋友可以试用一下。","text":"今天下决心“修理”了一下引入外链给SSL造成的“安全警告提醒”问题！总共修复了以下三部分内容，现在开启调试终于没有安全警告了！我感觉BootCDN还是很不错的，版本更新也比较及时，有兴趣的朋友可以试用一下。 多说评论更新完证书之后，临时禁用了多说，今天开调试器再看，多说官方的证书终于更新了，有效期到2018年。 可以可以，切换回多说了。 百度统计原来用的老代码，现在重新更新一下，自动生成的已经是HTTPS链接了。 主题模板用的公共库这其实才是标题所说的内容~原来主题用的是百度的公共镜像，但万恶的百度居然不支持HTTPS！好在其他公共库也好用。 （我怎么就这么讨厌百度这破烂作风呢……） 总共更新了下面几个公共库： HTML5Shiv JQuery Respond","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"cdn","slug":"cdn","permalink":"https://blog.williamyao.com/tags/cdn/"},{"name":"javascript","slug":"javascript","permalink":"https://blog.williamyao.com/tags/javascript/"}]},{"title":"启用SSL就是容易引入问题","slug":"2016032901","date":"2016-03-29T01:32:52.000Z","updated":"2018-04-13T01:35:02.358Z","comments":true,"path":"2016/03/29/2016032901/index.html","link":"","permalink":"https://blog.williamyao.com/2016/03/29/2016032901/index.html","excerpt":"","text":"这么大个公司，快一个礼拜了，新证书还没搞定，瞧我这日子赶的…… 用IE/Firefox浏览本站看到安全提示的童鞋莫惊慌，是他们多说评论插件的证书过期了，和我没关系！ 实在懒得用Nginx反向代理Duoshuo的HTTPS了，还是盼望他们速度解决吧！","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"ssl","slug":"ssl","permalink":"https://blog.williamyao.com/tags/ssl/"}]},{"title":"StartCom申请SSL证书及Nginx HTTPS支持配置全攻略","slug":"2016032501","date":"2016-03-25T01:00:02.000Z","updated":"2018-04-13T02:44:57.118Z","comments":true,"path":"2016/03/25/2016032501/index.html","link":"","permalink":"https://blog.williamyao.com/2016/03/25/2016032501/index.html","excerpt":"除非抱着回顾了解历史的目的，否则请勿再看此文，StartSSL已经因为一些卑劣的行径而死。 申请并自动更新证书，请使用Let’s Encrypt! 参考文章：Let’s Encrypt全程配置使用指南 William Yao2018年04月13日 前言最近收到StartCom的邮件，数字证书即将过期，想到去年在StartSSL上折腾数字证书的一番啰嗦经历心里就打怵，可是又没办法，只好怀着“悲痛”的心情登上StartSSL，结果……！原来恶心人的界面统统消失了，取而代之的是全站的大更新，就连原来非常繁琐的Certification和Validation流程也被非常高效的向导给取代了！整个界面以侧边栏总览的方式将帐号下所有的内容全部概括，看着就让人“赏心悦目”！","text":"除非抱着回顾了解历史的目的，否则请勿再看此文，StartSSL已经因为一些卑劣的行径而死。 申请并自动更新证书，请使用Let’s Encrypt! 参考文章：Let’s Encrypt全程配置使用指南 William Yao2018年04月13日 前言最近收到StartCom的邮件，数字证书即将过期，想到去年在StartSSL上折腾数字证书的一番啰嗦经历心里就打怵，可是又没办法，只好怀着“悲痛”的心情登上StartSSL，结果……！原来恶心人的界面统统消失了，取而代之的是全站的大更新，就连原来非常繁琐的Certification和Validation流程也被非常高效的向导给取代了！整个界面以侧边栏总览的方式将帐号下所有的内容全部概括，看着就让人“赏心悦目”！ 经过一段时间的摸索和测试，虽然全新的StartSSL利用向导和无处不在的“提示”大大简化了用户的使用门槛，但还是有一些地方需要注意的，遂作此文，从新用户注册环节开始，经由域名认证、SSL证书认证等步骤直到配置Nginx虚拟主机以支持SSL加密通信，为网站挂上“自信”的HTTPS标签，全程记录每一步分享给大家。 此文阅读难度：纯新手可读（既然到了SSL级别，应该也不会太“新”吧~） 废话不多说，让我们开始！ StartSSL方面首先介绍在StartSSL方面的操作，因为这才是真正获得证书认证的关键流程。 注意：因为此文操作全程在Win10平台进行，所以在证书申请的全过程中，推荐使用IE浏览器（方便证书的导入导出），如果使用其他浏览器，遇到的任何问题将超出本文讨论范围。 注册登录已经注册过会员的童鞋请跳过此步骤。 首先需要说明一点，StartSSL继续沿用了以往的登录方式：证书登录！ 这也是很多童鞋在过去兴致勃勃的冲到StartSSL想要申请一个属于自己的数字证书时，被那个非常不友好的StartSSL界面卡在了新用户注册这第一个环节…… 所以，在StartSSL上的全部操作，用的都是一张Email证书，不需要用户名密码什么的。 首先访问StartSSL.com，点击Sign-up进行注册 这里最好填写能够正常收到邮件的邮箱，并且最好是常用邮箱，因为以后在StartSSL上的所有操作，都会与此邮箱关联。 接下来的步骤比较简单，在到让我们选择怎样生成证书的时候，选择直接导入到IE中就可以。 经过一番邮箱验证之后，我们就得到了由StartSSL颁发的邮箱证书，在“Internet 选项、内容、证书”里面可以选择导出这个证书，妥善保存，日后登录StartSSL就全靠这个证书了，有效期一年，过期后需要重新验证。 之后就登录进StartSSL中，默认停留在控制面板页面，右侧侧边栏中会显示所有该证书用户名下的所有认证信息，当然如果是新用户，应该除了个人信息外空空如也，没关系，我们继续。 验证域名在这一步之前，我相信在注册环节中，你已经将个人信息什么的填写完整了。 想要获得某域名的证书之前，首先要验证该域名的所有权。 选择上面的Validations Wizard，启动验证向导，在下面选择Domain Validation对域名进行验证，点击继续，来到下一步 输入想要验证的域名，注意这里我用的是顶级域名，至于二级以上域名是什么情况，我没进行验证，不过看此文的童鞋，应该都有顶级域名吧：） 填入想要验证并获得证书的域名后，StartSSL系统会自动对该域名进行whois查询，找到域名所有者的电子邮件地址，并让你选择将验证邮件发到哪个邮箱，只能选择查询到的域名所有者邮箱或者列出的其他三个常用形式的管理员邮箱，其他邮箱是无法进行验证的。 这里还会遇到个问题，如果你的域名服务商为你开启了隐私保护，那么这里的域名所有者邮件地址一般情况不会查询到真正可操作的邮箱，比如阿里云的域名隐私保护如果开启了，列表中第一个邮箱会是以阿里云结尾的一个伪装邮箱，经测试，这个邮箱是无法收到任何邮件的（本以为会代为转发），所以在进行这一步之前，一定要暂时关闭隐私保护。 如果你的邮箱服务器比较稳定，会立刻收到验证邮件，按照邮件里的说明将验证码输入进页面里点击验证，域名就验证成功了。 申请证书先多啰嗦一句，StartSSL上的验证、申请流程几乎都是自动的（除了证书废止等操作需要人工审核），所以沿着本文的文络前进的同时，你已经在逐渐拥有各种东西了~ 开始，重新回到控制面板，选择上面的Certificates Wizard启动证书申请向导，默认选择第一项Web Server SSL/TLS Certificate并下一步。 接着，我们会来到一个满屏“鸟语”有点让人头大的页面，其实这个页面的内容也非常简单，我们一步一步来。 首先，在上面的文本框中输入想要获得证书的域名，这里要注意以下几点： 每一行输入一个域名 第一行的域名为主域名（然并卵……其实很少有人会点击HTTPS旁边的“锁”去认真查看证书内容的） 只能输入五行（五个域名） 你这里输入的域名，在最后只会得到一个bundle，也就是单一证书捆绑多个域名，为你在上面输入的所有域名提供验证。 这里特别要注意，如果真的输入了五个域名（包括二级以上域名），生成了一个证书，其实在后期是比较难管理的，如果你名下有好几个域名，稍加时日，完全搞混乱几乎是必然的，所以我的建议是：不要采用我在上面图片中一次填满五个的方式，而是每次只验证一个（顶级或者二级）域名，这样每个域名都会得到一个独立的证书，给证书以及配套的文件单独建一个以域名为名称的文件夹保存，一目了然，不会搞混。 另外，如果你已经捆绑了好几个域名到一个证书上，我的做法是：不用这个证书就好~~重新为每个域名申请独立的证书，因为每个域名是可以多次申请多个证书的，不碍事儿。 填写好域名，我们开始关注页面的下半部分，这一部分是需要我们提交认证签名请求（CSR），我们选择第一项Generated by Myself，使用工具自己生成签名文件及对应密钥。 这里注意看提示，StartCom很贴心的提供了一个Windows平台上使用的绿色工具，一键完成签名文件及对应密钥的生成工作。当然，如果在其他平台，或者喜欢用openssl，也可以根据提示的命令进行生成： 1openssl req -newkey rsa:2048 -keyout yourname.key -out yourname.csr 如果机器性能够强（服务器），也可以使用rsa:4096，更高算位提供更高安全性，不过性能会受到影响，记住我们生成的证书是要给服务器用的，你需要在负荷及安全性上做权衡了。 那么怎么生成CSR呢？这里演示一下StartCom的小小绿色工具的用法，首先在这个页面中点击StartComTool.exe下载到本地，运行该程序： 如果文本框里已经有内容了，就点一下Clear，直接点击下方绿色的Generate CSR按钮，在弹出的对话框中选择路径，保存相关文件（比如给文件起名叫app.williamyao.com.key），这一步工具会自动为我们生成两个名称相同的文件，一个是CSR，一个是Key，这两个文件都要保存好，一个是签名内容（PEM格式），一个是密钥文件，密钥文件在下一步配置Nginx时会用到。 然后，将文本框中的CSR内容复制粘贴到浏览器的文本框中（直接点“Copy”按钮，回到浏览器粘贴即可），现在我们的页面看起来是这个样子： 之后，我们点击Submit提交申请，不出意外的话，我们的证书文件立刻就生成好了： 这里注意，我们不能用下载工具进行下载（因为StartCom的证书认证机制），请点击右键选择“目标另存为”使用IE的方式进行下载。 下载回来的是一个压缩包，解开看一看，原来StartSSL很贴心的为我们生成了一套对应各个常用服务器的证书文件，我们这里把Nginx的对应证书文件单独解压出来，得到一个.crt文件，先放好这个文件，一会儿会用到。 在进入下一步之前，我建议大家重新整理一下上面的流程中得到的所有文件，以我为例： 新建文件夹startssl-signed 进入文件夹，新建文件夹app.williamyao.com 将对应文件拷贝到app.williamyao.com文件夹中 经过整理，文件夹中会有如下文件： lnyk@me.com-2017.pfx（从IE中导出的用于登录StartSSL的电子邮件证书） app.williamyao.com.csr（签名文件） app.williamyao.com.key（密钥文件） app.williamyao.com.zip（下载下来的证书文件压缩包） INTRO（文本文件，里面记录一下上面三个文件的生成日期，以及证书文件的到期日期等等） 这样整理之后，以后为其他域名申请的证书也可以这样存放，就不会乱套了。 这里再建议大家一遍，如果手里域名多的话，最好给每个域名单独申请证书（就是只填写一行域名到向导的文本框中），“大合集”的方式，实在不利于日后为其他域名增添SSL支持，以及统一管理。 整理完文件了？是不是看着赏心悦目的？好，我们进行下一步，配置Nginx，让证书真正发挥用处！ Nginx 方面在进行配置之前稍作一个假设，Nginx以虚拟主机方式保存配置文件，即每个虚拟主机有自己单独的.conf文件，这种方式比把所有东西都丢进nginx.conf里面强得多，而且现代版本的Nginx都是默认采用虚拟主机方式进行配置了。 至于为什么做这样的铺垫，是为了下面解决容易碰到的一个问题，我们到达那个步骤的时候再详细说明。 上传文件我们需要将两套文件上传到服务器，每一套中有两个文件，一个是CRT证书文件，一个是KEY密钥文件，用于启用williamyao.com以及app.williamyao.com这两个域名对应虚拟主机的SSL支持， 这里将每套两个文件做如下命名： williamyao.com.crt williamyao.com.key app.williamyao.com.crt app.williamyao.com.key 然后传到服务器上，我的建议是将上面的文件统一放在/etc/ssl/private/路径中（这个路径也是*nix平台规范建议的SSL证书存放路径，便于管理，既然有“先人指路”，我们不妨照做。 值得注意的是，将文件放在这个文件夹中，需要用到root权限，即sudo cp，放进去后的文件所属用户保持root:root就好，Nginx的执行进程是可以读取的。 配置Nginx先别急，这里说明一下，启用SSL的一般做法是，虚拟主机的主server段不监听80端口，而是直接监听443端口，然后在主server配置段后新开一个server段监听相同server_name的80端口，并将请求301重定向到HTTPS. 这样做的好处是，不管访问者是否制定HTTPS协议（一般人上网大都只会输入域名，不会先写协议的吧……），只要输入域名，Nginx接到请求后就会将请求重定向到443端口的SSL主机上。 下面我们也打算这么做，以我为例： SSH到服务器上，分别编辑两个虚拟主机的conf配置文件，我们先来第一个： 1sudo nano /usr/local/nginx/conf/vhost/williamyao.com.conf 将配置信息添加到配置文件中，配置好的williamyao.com.conf文件形如这个样子： 123456789101112131415161718192021server&#123; listen 443 ssl; # 下面这一行用于启用 IPv6 支持 listen [::]:443 ssl ipv6only=on; server_name williamyao.com; # SSL 支持配置如下 ssl on; ssl_certificate /etc/ssl/private/williamyao.com.crt; ssl_certificate_key /etc/ssl/private/williamyao.com.key; ...（其他配置）...&#125;server&#123; listen 80; listen [::]:80 ipv6only=on; server_name williamyao.com; return 301 https://williamyao.com$request_uri;&#125; 之后编辑另一个虚拟主机app.williamyao.com.conf配置文件，形如下面这样： `confserver{ listen 443 ssl; # 下面这一行用于启用 IPv6 支持 listen [::]:443 ssl; server_name app.williamyao.com; # SSL 支持配置如下 ssl on; ssl_certificate /etc/ssl/private/app.williamyao.com.crt; ssl_certificate_key /etc/ssl/private/app.williamyao.com.key; ...（其他配置）... } server{ listen 80; listen [::]:80; server_name app.williamyao.com; return 301 https://app.williamyao.com$request_uri;} 细心的童鞋以及高手可能已经发现了，这两个虚拟主机的配置稍有不同，这也是我们之前做那个小小的铺垫的用意。注意观察WWW主机的ipv6only=on开关，在APP主机中是没有的，因为按照Nginx关于ipv6only这个开关的设置，在全部虚拟主机中，只能有唯一一台主机监听的某端口带有此开关，在我们的例子中，如果APP主机也启用这个开关，Nginx进程会报“重复监听端口”的错误并强制退出。至于ipv6only的详细内容，请自行百度:P 全部配置完毕后，重启Nginx或者Reload，不出意外的话，回到浏览器，输入域名（可以不带HTTPS，顺便测试一下301转发），是否一切正常？ 恭喜你，你的服务器已经被标记为“安全”了！ 其他当然，启用SSL加密通信，还是那个万年不变的弊端，如果你的网站有外链的话，至少IE浏览器在的默认安全级别之下，始终会有个烦人的安全提示，类似“此网站不安全”！并会自动关闭掉你所有的外链内容读取。本来是更加安全的通信模式，就因为这提示，反倒会让访问者看着不放心…… 特别是越来越趋势化的扁平设计风格，更多的引用一些开放的JS公共库以达到更好的页面效果，这时候如果启用SSL，至少IE的那个恶心提示，几乎是无可避免的了，好在如Gravatar这类开放服务，都具备HTTPS能力支持。 后记启用SSL加密通信，不光是对通信安全的加固，更是对访问站点的用户的负责（至少在态度上:P），网络安全方面的话题谈起来就有点儿大了，至少有一个顶级CA对我们的通信进行授权和认证，这本身就是一种令人觉得舒服的事儿~ 还是那句老话：希望本文对你能有帮助。","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://blog.williamyao.com/tags/nginx/"},{"name":"ssl","slug":"ssl","permalink":"https://blog.williamyao.com/tags/ssl/"},{"name":"https","slug":"https","permalink":"https://blog.williamyao.com/tags/https/"}]},{"title":"TrueCrypt你怎么了？","slug":"2016031201","date":"2016-03-12T00:48:58.000Z","updated":"2018-04-13T02:41:44.885Z","comments":true,"path":"2016/03/12/2016031201/index.html","link":"","permalink":"https://blog.williamyao.com/2016/03/12/2016031201/index.html","excerpt":"今天整理硬盘，需要访问加密分区，因为前一阵子刚重装了系统，这次需要重新装回TrueCrypt。从4.x开始一直使用这个可爱的加密系统创建活动虚拟磁盘保存加密数据，也是通过了解这个开源软件，顺便才小小研究了当时非常流行的几个加密算法，可是今天打开官网，却发现了不对的地方。 WARNING: Using TrueCrypt is not secure as it may contain unfixed security issues. TrueCrypt官网","text":"今天整理硬盘，需要访问加密分区，因为前一阵子刚重装了系统，这次需要重新装回TrueCrypt。从4.x开始一直使用这个可爱的加密系统创建活动虚拟磁盘保存加密数据，也是通过了解这个开源软件，顺便才小小研究了当时非常流行的几个加密算法，可是今天打开官网，却发现了不对的地方。 WARNING: Using TrueCrypt is not secure as it may contain unfixed security issues. TrueCrypt官网 回搜索引擎寻找答案，看到了下面这篇回复： 这句话有极大的可能藏有深意。 取每个单词的首字母 Using TrueCrypt is not secure as it may contain unfixed security issues 得到：uti nsa im ću si 这是一句拉丁文，或者一句塞尔维亚文。 谷歌翻译拉丁文——英文，得到： unless I want to use the NSA 谷歌翻译塞尔维亚语——英文，得到： I hear they’re nsa 将文字附加到官网整句话后方，可以得到： WARNING: Using TrueCrypt is not secure as it may contain unfixed security issues, unless I want to use the NSA 或： WARNING: Using TrueCrypt is not secure as it may contain unfixed security issues, I hear they’re nsa 不管是哪句，英文意译都大致可得： WARNING: Don’t use TrueCrypt，because it is under the control of the NSA 到底怎么回事，留给你们判断吧。不是撒手不干这么简单。出事了，出大事了。 不光在官网页面第一行用红色字醒目的标着最开始那句话，就连最新版7.2安装的时候也会弹出一个大大的窗口写着上面那句话的更多文字方面的解释！多么优秀的一个开源加密系统，就这样被扼杀了？！ 过多的不想评论，因为一是不知道事情究竟如何，二是这种事情看得多了，也懒得去探究了，无奈过后，只好改用Windows系统自带的VHD+BitLocker这种根本无法跨平台应用的选择！如果不是因为一些无法替代的原因，真想告别Windows再也不回来了！ 记得在单位的时候，正经用过两年多Ubuntu，写文档有AOO，排版输出有TeX，处理图像有GIMP，码代码有Emacs，影音有VLC，真的思考过，单纯工作的话可以永不再回Windows！ 唉，写着写着又恶心了，就到这吧，放几张图，给想用`VHD+BitLocker的朋友们指条路。 切记：这种模式几乎是没法跨平台的，经常需要在不同系统平台间交换加密信息的朋友，找别的软件吧！ 先在“计算机管理”的磁盘管理里面，选择创建（或者挂载之前的）VHD虚拟磁盘 再从已经挂载上的磁盘上点右键，开启BitLocker 最后，再留图纪念一下可爱的TrueCrypt，希望有新的匿名团队接收代码工作，走出这团迷雾！","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"encrypt","slug":"encrypt","permalink":"https://blog.williamyao.com/tags/encrypt/"}]},{"title":"Ubuntu安装最新版TeX Live","slug":"2016022902","date":"2016-02-29T00:36:00.000Z","updated":"2018-04-13T02:45:10.597Z","comments":true,"path":"2016/02/29/2016022902/index.html","link":"","permalink":"https://blog.williamyao.com/2016/02/29/2016022902/index.html","excerpt":"前言今天重装了`UbuntuKylin，从麒麟版本诞生之日，可以说我的Linux就没转过别的平台，主要是喜欢它的中文化（听说是工信部和社区合作的长期中文化产物），不但一堆Locale默认中文，自带中文输入法还有双拼自然码码表，最关键的是对TeX的中文化支持相当好，几乎不用手动干预，一堆安装自动搞定。 时隔好些年，今天因公去了趟麒麟在北京的分公司，有幸见到了当年参与UbuntuKylin开发的几位中国大神，还被送了一个麒麟吉祥物，真是荣幸之至！ William Yao2018年04月10日","text":"前言今天重装了`UbuntuKylin，从麒麟版本诞生之日，可以说我的Linux就没转过别的平台，主要是喜欢它的中文化（听说是工信部和社区合作的长期中文化产物），不但一堆Locale默认中文，自带中文输入法还有双拼自然码码表，最关键的是对TeX的中文化支持相当好，几乎不用手动干预，一堆安装自动搞定。 时隔好些年，今天因公去了趟麒麟在北京的分公司，有幸见到了当年参与UbuntuKylin开发的几位中国大神，还被送了一个麒麟吉祥物，真是荣幸之至！ William Yao2018年04月10日 当然，写这篇文章，主要目的不是记录怎么用apt-get，而是在今天我装完系统，开始安装TeX Live的时候，发现Ubuntu官方维护的居然是2013.2014update版本！拜托！已经2016年了好吗！ 赶紧去到CTAN上查看官方发布情况，TeX Live 2016发布需要到2016/06/08`，还有好几个月，所以决定先装2015年度版本。 这样一来，就不能偷懒用apt-get了，好在官方的安装过程也简单的不行，就是脱离了Ubuntu软件仓库维护，日后升级等一系列操作还是得手动，不想“动手”的童鞋，还是乖乖去戳“软件中心”吧～ 正文这次不写那么罗嗦了，简介流程走起： 官方下载去官方网站（CTAN）下载一个很小的Perl安装脚本 解压运行安装脚本这里需要注意，安装脚本支持4种类型的界面方式： install-tl -gui text 默认方式，纯文本 install-tl -gui wizard 向导模式，主要用在Windows系统安装中 install-tl -gui perltk Tk窗口模式，本文采用这个方式 install-tl -gui –profile=profile 依据profile中指定的方式执行批量安装 这里我们使用第三种Tk窗口模式（顺便装上perl-tk），使用下面的命令安装： 12sudo apt-get install perl-tksudo ./install-tl -gui perltk 打开的窗口是这样的： 这里我没做任何修改，直接默认安装了，值得一提的是Portable Setup为绿色安装，虽然不太想去琢磨这个绿色在Linux平台上的适用性，但要是在Windows平台上，本人还是非常偏爱一切绿色软件的！ 做好心理准备开始下载4G左右的内容后，点击“安装”，会弹出“安装过程”窗口，指示当前的安装进度： 当然，Terminal里也会有同步显示： 设置环境变量打开~/.bashrc或profile，添加TeX Live的执行文件目录到环境变量，默认是这样： 1PATH=/usr/local/texlive/2015/bin/i386-linux:$PATH 如果像我一样是64位系统，则是这样： 1PATH=/usr/local/texlive/2015/bin/x86_64-linux:$PATH 结束测试编译一下吧，不出意外的话，整个系统就按装好了。 后记就像我在《新年新气象，缅怀过去走进未来——换上Typecho》这篇文章结尾提到的那样，折腾TeX Live的最主要目的，其实是想将自己写过的文章以出版物级别PDF的形式（而非数据库中的一条记录或文件夹里的一个文本文件）封装一个完美的归宿，作为一个比较喜欢阅读的人，我偏执的认为，这种方式最为尊重文字本身的价值意义。","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://blog.williamyao.com/tags/linux/"},{"name":"ubuntu","slug":"ubuntu","permalink":"https://blog.williamyao.com/tags/ubuntu/"},{"name":"tex","slug":"tex","permalink":"https://blog.williamyao.com/tags/tex/"}]},{"title":"常用7-Zip最高压缩命令","slug":"2016022901","date":"2016-02-29T00:33:06.000Z","updated":"2018-04-13T01:30:05.763Z","comments":true,"path":"2016/02/29/2016022901/index.html","link":"","permalink":"https://blog.williamyao.com/2016/02/29/2016022901/index.html","excerpt":"每次都记不住7-Zip的命令，到处搜索，这次就先备注在这里吧。","text":"每次都记不住7-Zip的命令，到处搜索，这次就先备注在这里吧。 最高压缩命令（最耗内存和时间）： 123456789101112137z a -t7z ~/snapshot.7z target_dir/ -r -mx=9 -ms -mf -mhc -mhcf -mmt# a 添加或创建压缩文档# -t7z 指定压缩包格式为7z（其实会自动根据指定文件名来判断，这个开关可以不写）# 比如指定压缩包名称为 snapshot.7z，则自动采用 7z 格式# target_dir 为需要压缩的文件（目录），支持 WildCard# -r 递归到所有的子目录# -mx=9 设置压缩等级为极限压缩# （默认为：LZMA 最大算法、32 MB 字典大小、BT4b Match finder、单词大小为 64、BCJ2 过滤器）# -ms 开启固实模式（把所有文件当作一整块来存储）# -mf 开启可执行文件压缩过滤器# -mhc 开启档案文件头压缩# -mhcf 开启档案文件头完全压缩# -mmt 开启多线程模式 需要注意的是，在ECS上测试极限压缩，1G CPU/1G内存是没法开到-mx=9的，但是-mx=8没有问题，虽然官方文档只说了-mx=[1/3/5/7/9]的对应压缩算法，但作为一个代码强迫症患者，就是喜欢逐级量化！ 0 Copy No compression. 1 LZMA 64 KB 32 HC4 BCJ Fastest compressing 3 LZMA 1 MB 32 HC4 BCJ Fast compressing 5 LZMA 16 MB 32 BT4 BCJ Normal compressing 7 LZMA 32 MB 64 BT4 BCJ Maximum compressing 9 LZMA 64 MB 64 BT4 BCJ2 Ultra compressing 还有，如果CPU是单核，-mmt无效（不报错，只是不起作用）","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"7-zip","slug":"7-zip","permalink":"https://blog.williamyao.com/tags/7-zip/"}]},{"title":"Steam也过中国年？！","slug":"2016021101","date":"2016-02-11T11:40:16.000Z","updated":"2018-04-12T11:51:02.346Z","comments":true,"path":"2016/02/11/2016021101/index.html","link":"","permalink":"https://blog.williamyao.com/2016/02/11/2016021101/index.html","excerpt":"今天打开Steam居然看到了这样的场面：","text":"今天打开Steam居然看到了这样的场面： 一开始想，Valve也挺会凑热闹的嘛，结果点进去一看才发现，Steam中国商店全平台折扣，一般的像是“打折”这一类的信息，对于我等技术大叔来说基本是小脑略过的信息，可一看价目表，我确实心痒痒了！ Civilization 5: Complete Edition，包含全部14个DLC，39块！ The Elder Scrolls V: Skyrim - Legendary Edition包含所有三个DLC，28块！ Just Cause Collection全系列9个包，28块！ Tomb Raider Collection不包括最新Rise of Tomb Raider的古墓丽影全系列，52块！ 还有 The Witcher Trilogy Pack（1 + 2 + 3打包卖），87块！ Civilization: Beyond Earth包含2个大包DLC，95块！ The Elder Scrolls IV: Oblivion Game of the Year Edition Deluxe包含所有DLC，26块！ Borderlands 2 Game of the Year包含9个DLC，27块！ 总之，不知道圣诞节那会儿Steam，反正这次应该是大出血了！ 在这里不想过多讨论入正还是破解的话题，那样实在没意思，我既不是狗血愤青只吆喝买正版，也不会觉得入正有多么嘚瑟多么弱智，毕竟3DM/Ali213有一群可爱的大神和默默做贡献的朋友。还是引用大神们的名句吧：图个乐就3DM/Ali213，真正喜欢就买正版！ 这次真是图个最便宜的时候合法拥有一套自己觉得值得20年之后再拿出来玩玩儿的好游戏 况且，是不是上了年纪？貌似对“慢性子”的游戏有格外的偏爱，就是喜欢一个人喝着茶研究一下潜行，征服几个世界，Loot一下废土掠夺者据点……从辐射和老滚这类游戏的风格，是不是能看出一个人的性格？ 最后，这不是广告贴和臭屁贴！有志同道合者，Steam加好友：LNYK2","categories":[{"name":"Whispers","slug":"Whispers","permalink":"https://blog.williamyao.com/categories/Whispers/"}],"tags":[{"name":"game","slug":"game","permalink":"https://blog.williamyao.com/tags/game/"},{"name":"steam","slug":"steam","permalink":"https://blog.williamyao.com/tags/steam/"}]},{"title":"新年新气象，缅怀过去走进未来——换上Typecho","slug":"2016021001","date":"2016-02-10T07:14:12.000Z","updated":"2018-04-12T07:48:56.822Z","comments":true,"path":"2016/02/10/2016021001/index.html","link":"","permalink":"https://blog.williamyao.com/2016/02/10/2016021001/index.html","excerpt":"回顾2016年02月，丙申年正月初一。 因为很久没管系统的事儿了，今天睡醒觉，索性登到青岛服务器上，不看不知道啊，WordPress又把php-fpm给拖死了！重启服务之后，用了一上午时间，细细的思考了一下折腾ECS这两年都在干些什么。","text":"回顾2016年02月，丙申年正月初一。 因为很久没管系统的事儿了，今天睡醒觉，索性登到青岛服务器上，不看不知道啊，WordPress又把php-fpm给拖死了！重启服务之后，用了一上午时间，细细的思考了一下折腾ECS这两年都在干些什么。 记得从几年前受够了WebFaction共享主机到国内的牛车网速那一刻起，就开始了折腾之路，当时的阿里云资源还是比较好的，大概因为刚刚开拓市场，硬件资源还比较充足的缘故吧，试用一个月ECS之后，决定把服务器全都迁移到阿里云上。当时阿里云只有青岛和杭州两个区，作为北方人，自然选择了青岛区，费了几天功夫搭建好基础服务，直接SSH到ECS上把几个django projects和两个WordPress迁移了回来。 速度自然是比国外服务器快多了，可为什么说折腾呢？因为原来外国的服务器，外国的域名商，不存在备案问题，这一下子全都迁移回了国内，不但工信部备案，按照北京市规定，还要去公安局备案。先后折腾了两个礼拜，才把全套手续拿下，传说中的京ICP备和更加传说中的京公网安备两个“身份证”也光荣的挂在了Footer上。唯一美中不足的，当时只是抱着试试看的心态去备案的，生活中也有不少事情占用时间，没有太多的精力管这些事儿，结果，就只备案了一个域名，剩下四套系统原来的域名统统挂不到服务器上了…… 当时想，无所谓了，既然这样，干脆从头开始吧，于是暂时搁浅了所有的django项目，只保留了WordPress，毕竟好多年间写的几乎所有东西都在上面。启用了新域名LNYK2.COM，弄好了模板和插件。 其实反观自己，这些年来不管干啥，都想走一套极简的风格，而一旦折腾起来，却又乐此不疲……类似这样的矛盾，一次次的存在。就好像摄影，从最早的大变焦狗头，到最后只玩儿定焦纯手动，结果就是一大箱子镜头背着累死累活，看到变焦头还满头大汗的对人家嗤之以鼻；又好像出游，从最初“捏”张照片看景色那种单纯的快乐，一度演变成出游只为拍照，丢掉了旅行本身的乐趣，身边的人，也不再是出游最重要的陪伴，而仅仅成了画面中的模特；再好像django，架了nginx/Apache/PostgreSql一整套系统只为接个微信公众号的API！事后想想也是醉了。最后说写文章，从将近二十年前的纯HTML到CGI论坛，从ASP到PHP，从dotText到.Net Community Server再到自己写的Melody框架，从Confluence到MediaWiki最后到WordPress，期间丢了多少篇文章真是数不过来了，其实数据都留着，一直想着哪天有时间了，找台破本儿重新架起来所有东西，只为把当年的文字找回来。在这些年的“系统变革”中，其实我一直欣赏那种简约扁平的素雅风格，可是渐渐的WordPress后台装了若干插件，若干风格，让本就庞大的系统更加臃肿，同时为了弥补响应速度，底层各种Memcached/Accelerator吃光了本就不多的内存，造成访问延时，系统资源耗尽，就像这次。同样的，事后反观（我这人比较喜欢总结式的“马后炮”），本就没几个人访问的博客，折腾这些干啥？…… 于是，在这“春意盎然”的新年新气象中，开始了新一轮的折腾，这次我决定，是该扔掉所有臃肿的累赘了。 开始折腾本来想写一篇纯“娱乐”的文字，放在Whispers里，写了第一节之后重新阅读才发现，居然又莫名其妙的朝着Ironware风格去了……干脆第二节就继续来些硬货吧。 系统风格这次折腾，因为有一个明确的目标——极简，多余的东西统统不要，所以系统平台最终选择了这么几样： 还是阿里云的ECS，这次开到了香港区，不为别的，就是不喜欢备案（虽然咱也是有“身份证”的人了），这样青岛区的服务器纯用来承载Git/django等其他服务，同时用作大陆方面的CDN. 除LNYK2.COM仍然解析给青岛区以外，包括hk*.LNYK2.COM在内所有域名统统解析到香港区，因为LNYK2.COM是有证的，做入口点及CDN没问题。 域名注册商转移到万网（阿里云），因为实在不喜欢Godaddy的收费策略，第一年便宜的要死，等骗你上了贼船，之后续费的时候再挣你的钱。 这次折腾的主角——博客系统，彻底扔掉了WordPress，简单几步把所有东西转到了Typecho上。 关于Typecho在这里多说几句，先搬一下官方的广告词： 仅仅7张数据表，加上不足400KB的代码，就实现了完整的插件与模板机制。超低的CPU和内存使用率，足以发挥主机的最高性能；原生支持Markdown排版语法，易读更易写。支持BAE/GAE/SAE等各类云主机，即使面对突如其来的高访问量，也能轻松应对；精心打磨过的操作界面，依然是你熟悉的面孔，更多了一份成熟与贴心。每一个像素的剪裁，都只为离完美更进一步。 比起已经被我搞成大胖子的WordPress来说，Typecho这“哗哗”的运行速度和朴素到多余东西一点儿没有的后台风格，让我突然觉得找到了老相好~ 再说主题，这次用的是Min童鞋修改的绛木子的仿简书风格，自己做了点儿小修改（下面会介绍），在这里对以上两位筒子的辛苦劳动表示一下由衷地感谢！ 好吧，正式转到Ironware风格，我们开始吧！ 具体操作架好服务还是不想折腾，直接上LNMP，弄好Nginx/PHP-FPM/MySQL； Typecho官网上下载最新版，我这里偷懒，直接从Typecho on GitHub上clone的Master，丢到vhost的root; 这里先别着急安装，因为LNMP的[vhost].conf是默认关闭pathinfo的，所以要先操作一下虚拟主机的配置文件： 1234sudo nano /usr/local/nginx/conf/vhost/[虚拟主机名].conf加 # 注释掉 try_files $uri =404; 这一行去 # 启用 include pathinfo.conf; 这一行sudo service nginx restart 或者 sudo lnmp nginx restart 重启一下服务 这样之后，安装完Typecho就不会碰到404没法进后台的错误了。 之后的操作，假设你已经完成了Typecho的安装，系统一切正常。 迁移数据 以下操作在香港区服务器上 首先是安装Typecho的插件，建议先装AppStore，这是Typecho的一个应用商店插件，用起来很方便。关于插件的安装，最标准的安装方式是把[插件]目录直接上传到[typecho root]/usr/plugins/中。先用这个方法装上应用商店，之后就可以从后台中启用应用商店插件，并直接依靠应用商店来装一些常用插件了，很方便。 如果连应用商店都不想装，那咱就直奔主题，下载安装WordpressToTypecho这个插件，启用之后进入插件配置，填写WordPress的数据库服务器相关信息，配置完了点运行，如果不出意外，插件顺利工作完毕会有提示，所有的文章和页面就都转换到Typecho上了。 我这里的操作相对复杂一点，因为不想把青岛区服务器的3306端口开放到公网，我是在青岛区服务器上另装了一套Typecho，迁移完数据后用phpMyAdmin导出、导入到香港区的，貌似阿里云的内网IP跨区是不互通的，也没想着深究iptable/阿里云盾之类的内容，对于这种问题我一贯奉行一个原则： 如果一个看似巧妙的操作却会为问题本身引入更多的复杂度，那么Hard Operations往往是更好的解决办法。 喝杯可乐，我们继续：） 到这里，数据库里的内容已经迁移完毕，接下来的是给文章中的附件“换门牌号”： WordPress的附件地址一般是[WP root]/wp-content/uploads/ Typecho的附件地址是[Typecho root]/usr/uploads/ 如果你的WordPress没有修改过默认上传路径，或者装过什么奇怪的插件的话，其上传目录中的结构和Typecho是完全一致的，全是uploads/[年]/[月]，这样就太方便了，直接把WordPress的uploads/所有东西统统复制到Typecho的uploads/里面，附件就都过来了。 然后打开phpMyAdmin或者直接myadmin之类操作MySQL的东西，使用查询语句，将原来文章中的附件地址替换成新的，以我为例，blog.lnyk2.com上的WordPress附件地址，替换成williamyao.com上的Typecho附件地址，查询这么写： 1UPDATE typecho_contents SET text = REPLACE(text,'http://blog.lnyk2.com/wp-content/uploads/','https://williamyao.com/usr/uploads/'); 执行完查询，回到Typecho前台，随便开个带附件的文章看看，观察一下附件地址，是不是已经全过来了？ 恭喜你，到这一步，数据迁移全部完成！ 主题设置以下是关于Min 童鞋修改的绛木子的仿简书风格的小修改。 删除“打赏”按钮貌似支付宝已经取消了捐赠功能？（还是我没找到，不得而知），总之觉得这个可爱的小功能有点儿不大符合咱这大叔模样的行事风格，贱贱的就把它删掉了，具体如下： 123修改 page.php 和 post.php分别找到 class 为 page-donate 和 post-donate 的 span 段，形如：page.php 中的 &lt;span class=&quot;page-donate&quot;&gt; ... &lt;/span&gt; 和 post.php 中的 &lt;span class=&quot;post-donate&quot;&gt; ... &lt;/span&gt; 将这两个&lt;span&gt;...&lt;/span&gt;简单粗暴的整段删掉，在“赞”和“分享”中间的“赏”按钮就消失了，其他dialog之类的不用动，当然删的干净一点儿也无妨。 支持侧边导航栏的自定义链接这套主题在后台是可以自由切换侧边栏显示文章分类还是独立文章的，做的真的很贴心，忍不住再赞一个！但是对于大多数想要定制这个侧边栏的童鞋来说，只能动手改，好在改动不大。 因为主题本身支持Links插件，只不过插件定义的友情链接需要单独建立slug为links的独立页面，并且把链接聚合到这个单独页面中，这里我们正好可以利用Links插件，给她小小扩展一个新功能，支持选择是否把友情链接分类放到侧边栏！ 不要紧张，修改步骤很简单，跟我来： 首先，满足一下我们的升级强迫症，将主题自带的Font Awesome替换为最新版本。Font Awesome维护一个字体和一整套应用，这个字体的特殊之处在于它包含的全是小图标！这套主题左侧导航栏开头的那些小图标，用的就是FA字体里的。 从Font Awesome官网上下载最新版； 用fonts/中的文件替换服务器上[Typecho root]/usr/themes/jianshu/fonts/中的同名文件； 用css/中的font-awesome.min.css文件替换服务器上[Typecho root]/usr/themes/jianshu/css/中的同名文件。 其次，你要装上HANNY的Links插件，这也是这套主题默认支持，推荐安装的。 然后，用好一点的编辑器（记事本其实也行……）打开Links/Plugin.php找到 1public static function output_str($pattern=NULL, $links_num=0, $sort=NULL) 这个函数，在前面的条件判断中新加一个判断条件： 函数原来的前几行： 123456789101112131415public static function output_str($pattern=NULL, $links_num=0, $sort=NULL)&#123; $options = Typecho_Widget::widget('Widget_Options'); if (!isset($options-&gt;plugins['activated']['Links'])) &#123; return '友情链接插件未激活'; &#125; if (!isset($pattern) || $pattern == \"\" || $pattern == NULL || $pattern == \"SHOW_TEXT\") &#123; $pattern = \"&lt;li&gt;&lt;a href=\\\"&#123;url&#125;\\\" title=\\\"&#123;title&#125;\\\" target=\\\"_blank\\\"&gt;&#123;name&#125;&lt;/a&gt;&lt;/li&gt;\\n\"; &#125; else if ($pattern == \"SHOW_IMG\") &#123; $pattern = \"&lt;li&gt;&lt;a href=\\\"&#123;url&#125;\\\" title=\\\"&#123;title&#125;\\\" target=\\\"_blank\\\"&gt;&lt;img src=\\\"&#123;image&#125;\\\" alt=\\\"&#123;name&#125;\\\" /&gt;&lt;/a&gt;&lt;/li&gt;\\n\"; &#125; else if ($pattern == \"SHOW_MIX\") &#123; $pattern = \"&lt;li&gt;&lt;a href=\\\"&#123;url&#125;\\\" title=\\\"&#123;title&#125;\\\" target=\\\"_blank\\\"&gt;&lt;img src=\\\"&#123;image&#125;\\\" alt=\\\"&#123;name&#125;\\\" /&gt;&lt;span&gt;&#123;name&#125;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\\n\"; &#125; ......&#125; 我们只需要在最后一个else if段后面再加一个else if，用来判断一个FA_NAV条件，把上面几行变成这样： 1234567891011121314151617public static function output_str($pattern=NULL, $links_num=0, $sort=NULL)&#123; $options = Typecho_Widget::widget('Widget_Options'); if (!isset($options-&gt;plugins['activated']['Links'])) &#123; return '友情链接插件未激活'; &#125; if (!isset($pattern) || $pattern == \"\" || $pattern == NULL || $pattern == \"SHOW_TEXT\") &#123; $pattern = \"&lt;li&gt;&lt;a href=\\\"&#123;url&#125;\\\" title=\\\"&#123;title&#125;\\\" target=\\\"_blank\\\"&gt;&#123;name&#125;&lt;/a&gt;&lt;/li&gt;\\n\"; &#125; else if ($pattern == \"SHOW_IMG\") &#123; $pattern = \"&lt;li&gt;&lt;a href=\\\"&#123;url&#125;\\\" title=\\\"&#123;title&#125;\\\" target=\\\"_blank\\\"&gt;&lt;img src=\\\"&#123;image&#125;\\\" alt=\\\"&#123;name&#125;\\\" /&gt;&lt;/a&gt;&lt;/li&gt;\\n\"; &#125; else if ($pattern == \"SHOW_MIX\") &#123; $pattern = \"&lt;li&gt;&lt;a href=\\\"&#123;url&#125;\\\" title=\\\"&#123;title&#125;\\\" target=\\\"_blank\\\"&gt;&lt;img src=\\\"&#123;image&#125;\\\" alt=\\\"&#123;name&#125;\\\" /&gt;&lt;span&gt;&#123;name&#125;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;\\n\"; &#125; else if ($pattern == \"FA_NAV\") &#123; $pattern = \"&lt;style&gt;.fa-nav_link_&#123;lid&#125;:before&#123;content: \\\"\\\\&#123;user&#125;\\\";&#125;&lt;/style&gt;&lt;a href=\\\"&#123;url&#125;\\\" target=\\\"_blank\\\" title=\\\"&#123;description&#125;\\\"&gt;&lt;i class=\\\"fa fa-nav_link_&#123;lid&#125;\\\"&gt; &lt;/i&gt; &lt;span class=\\\"title\\\"&gt; &#123;name&#125; &lt;/span&gt; &lt;/a&gt;\"; &#125; ...&#125; 好了，插件修改就这么简单，接下来更简单： 打开主题的header.php，找到&lt;div class=&quot;dropdown&quot; id=&quot;nav-menu&quot;&gt;这一段，在本段最后&lt;/div&gt;之前加上下面这句：&lt;?php Links_Plugin::output(FA_NAV,0,&#39;fa-nav&#39;);?&gt; 修改后的样子是这样： 修改好了？OK，一切搞定！那么怎么用呢？很简单！ 打开后台的管理/友情链接，新建一个友情链接，在链接分类中填写fa-nav，在自定义数据中填写不带左斜杠的Unicode图标代码。 什么是图标代码？Font Awesome官网图标页有该字体的所有图标示例，你选好了哪一个，直接点图标进去，里面的Unicode后面就是字体代码： 填完了没？应该是这个样子： 最后回到前台刷新，效果是这个样子： 会用了不？是不是很简单？Links插件所有功能一切正常，我们给它加了个功能，只要把链接分类写成fa-nav，并且给它一个Font Awesome的图标，它就会自动出现在左侧导航栏中！ 这里有个小Bug：想要出现在左侧导航栏中的链接，必须填写图标代码，不然显示的时候原来的图标位置会有点小瑕疵，想改改的筒子就自己上手试试吧。同时，链接默认是开新窗口（标签页）打开，如果想要同窗口打开，需要删掉Links/Plugin.php中那行代码的&quot;target=_blank&quot;属性。 其他插件Typecho的插件虽然都不算大，但好在一些不错的简单功能都能找到对应的插件： 这几个都挺不错的。 这个主题需要装上TeStat插件，“阅读”和“点赞”统计才会生效。 后记执着而不计成本，不为索取只为陶醉，有时候人就是应该活的简单些。 憋了小一年没更新文章，一回来就搞这么冗长的一片口水文，有失大雅，有碍观瞻，新春之际，望君海涵，但有不妥，欢迎拍砖！ 最后，等到哪一天连这些都嫌烦了，就回归老路线，TeX直接输出PDF，把自己写的所有文章都放进去，看看若干年后能不能弄出本儿书来…… Jekyll最近貌似很火？我总觉得，有折腾Ruby Gem和github.io的功夫，想写的东西早就写出来了，何必呢？ 我其实是个喜欢用钢笔和牛皮纸本子写日记的人。","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"life","slug":"life","permalink":"https://blog.williamyao.com/tags/life/"},{"name":"nginx","slug":"nginx","permalink":"https://blog.williamyao.com/tags/nginx/"},{"name":"typecho","slug":"typecho","permalink":"https://blog.williamyao.com/tags/typecho/"}]},{"title":"电动车换接口“血腥”实录","slug":"2015061601","date":"2015-06-16T07:01:56.000Z","updated":"2018-04-12T07:13:22.981Z","comments":true,"path":"2015/06/16/2015061601/index.html","link":"","permalink":"https://blog.williamyao.com/2015/06/16/2015061601/index.html","excerpt":"前两天小电驴的电池又被无良贼人盗走，这次一咬牙一跺脚，在某宝上买了块“广告费”砸的最狠的“品牌”电池","text":"前两天小电驴的电池又被无良贼人盗走，这次一咬牙一跺脚，在某宝上买了块“广告费”砸的最狠的“品牌”电池 东西是不错，可是和电动车的接口不匹配，两个母头…… 看来这活儿还得自己动手。 首先留出足够长的尾线，剪掉原来电动车上自带的电源线（用钳子切的会比较平滑） 然后剥开尾线端以及要更换的那条新线的尾端 如果没有剥线钳，剪刀也可以，但这里需要小心，一般这类电源线都是细线绕成，而不是一根粗线，剪的时候尽量避免把细线剪断（因为那样容易扎到手~~~） 之后就是接线，在接线之前一定要先确认正负极分别是哪一根线，一般红对红黑对黑没错，但小心杂牌厂商电动车无良组装乱接线。 然后，别着急！先关闭电动车的总开关，彻底切断电路，以防真的接反了，伤到自己。 在到这步之前，专门咨询过“专业人士”，如果真的接反了，顶多是打坏电动车的控制器，几十块钱的事儿，就当买个教训好了。 现在开始对接两端的线尾吧，这里一般有两种方式连接，如果你没有顶着大太阳饥肠辘辘的在干活，那可以将两端细线都散开成喇叭状，然后互相对插交错，之后朝一个方向拧紧，这样受力强度会好那么一点点，但像我这烈日当空的，就采取第二种方式吧，粗线交叉！ 虽然在这种电流电压级别上，两种连接方式没有太大的区别，但后者更省时间。当然，根据电流只走导体表面的特性吧啦吧啦吧啦……那个啥，我们继续哈。 现在开始上胶带！ 有细心的童鞋就要问了，这里应该上绝缘胶带啊，怎么上防水？ 抛开电动车也会碰到雨天过水容易打湿之类的因素不谈，其实更直接的原因是，哥没有找到绝缘胶带…… 通常，这个包裹的环节，就不要省胶带了，原本线缆就没了外皮，受力全靠内部导线，多缠点儿胶带吧，给它们点儿更强壮的依靠。 然后，接上插头，小心翼翼的打开电源 嗒哒~大功告成！ 活儿干到这里，是不是心满意足？别着急，既然都这样了，干脆把工作干足！商家包装用的减震工程泡沫，这时候可以用来搞些小制作了。 作为患有强迫症的宅男大叔，一开始居然给搞成了这个样子 欣赏一番自己的作品之后细细琢磨，电池也会发热，这样不利于散热，于是最后精简成了这个样子，注意不要盖到商标和序列号。 随后想起保修问题，又问了问商家 答复是肯定的，那就好。 此次事件终于圆满结束，我承认标题有些“拉眼球”的嫌疑：） 不过还是那句话，希望能对你有帮助。","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"motor","slug":"motor","permalink":"https://blog.williamyao.com/tags/motor/"}]},{"title":"pybej跨平台全自动扫频煲耳机小程序","slug":"2015052902","date":"2015-05-29T06:48:37.000Z","updated":"2018-04-12T06:54:35.385Z","comments":true,"path":"2015/05/29/2015052902/index.html","link":"","permalink":"https://blog.williamyao.com/2015/05/29/2015052902/index.html","excerpt":"起因为期近一周的“煲耳机”工程终于结束了，经过四个阶段，135小时的线性扫频，耳机终于进入“成熟”阶段，听起来也比较顺耳了，但就是这个Tone Generator，这么简单的几个功能，还又是收费又是破解，运行时还各种弹错的，实在让人受不了，最重要的，这个软件貌似只支持Windows系统，其他平台无望！ 于是，就萌生了自己写一个的想法，经过两天折腾，pybej也应运而生，并在Github.com上开源。","text":"起因为期近一周的“煲耳机”工程终于结束了，经过四个阶段，135小时的线性扫频，耳机终于进入“成熟”阶段，听起来也比较顺耳了，但就是这个Tone Generator，这么简单的几个功能，还又是收费又是破解，运行时还各种弹错的，实在让人受不了，最重要的，这个软件貌似只支持Windows系统，其他平台无望！ 于是，就萌生了自己写一个的想法，经过两天折腾，pybej也应运而生，并在Github.com上开源。 说明说是个程序，其实就是用Python写的小脚本，里面加上了我在煲耳机的时候的一些小想法，比如自动暂停扫频，让耳机休息休息之类的功能，具体说来，如下： 随意指定扫频频率上下限及循环间隔 扫频时长计划任务 耳机休息间隔及休息时间自定义 各类有的没的安全提示 体积小（就两个脚本），跨平台（因为用python 2.7） 没词了，实在不知道怎么继续吹下去了…… 运行界面多语言支持，原生支持中文（废话……国人） 安全范围提醒，避免意外输入过高或过低频率，对设备造成伤害。 继续那些有的没的提醒 扫频任务实时提示，并自动暂停扫频，让耳机得到休息 最后，运行完毕后自动清理临时文件，并提供任务总结 下载地址如果你熟悉python，请到Github.com上直接下载项目源码，也欢迎你的参与，项目说明及运行环境配置也在Github.com上，具体请访问： PyBej on Github 对于Windows用户，由于pyAudio包在64位python中无法运行，只好虚拟32位系统进行打包，最近小忙，哎呀没空啊！我会尽快搞定发上来，或者如果哪位热心朋友帮忙pyInstaller打包，将不胜感激：LNYK@ME.COM 补充说明目前欠缺英文翻译文件，在translation包中，有空的朋友可以在Github.com上参与一下哦～ 最后，我只是觉得，像Tone Generator这种小小的软件，就不要收费了嘛！干嘛呀，真是的！","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"python","slug":"python","permalink":"https://blog.williamyao.com/tags/python/"},{"name":"music","slug":"music","permalink":"https://blog.williamyao.com/tags/music/"}]},{"title":"LXDE 上的Scrot截屏软件","slug":"2015052901","date":"2015-05-29T06:45:19.000Z","updated":"2018-04-12T08:09:48.126Z","comments":true,"path":"2015/05/29/2015052901/index.html","link":"","permalink":"https://blog.williamyao.com/2015/05/29/2015052901/index.html","excerpt":"今天想发布一个小程序，需要用到运行时的截屏，结果猛戳Print Screen按键，打开GIMP粘帖却一点儿东西都没有，Bing了才发现，LXDE默认没有截屏功能……好吧，只好再装软件。这次用的是scrot，一个和LXDE搭配非常好用的截屏软件。","text":"今天想发布一个小程序，需要用到运行时的截屏，结果猛戳Print Screen按键，打开GIMP粘帖却一点儿东西都没有，Bing了才发现，LXDE默认没有截屏功能……好吧，只好再装软件。这次用的是scrot，一个和LXDE搭配非常好用的截屏软件。 首先，安装（我用的是Lubuntu，所以直接偷懒）：sudo apt-get install scrot 装好之后，在控制台运行scrot --help，如果看到帮助信息，则表示已经可以正常工作了。 Scrot的操作可以通过命令行，不过最好的方式当然还是Print Screen。 快捷键就两个，非常好用： 12PrtSc ： 截取全屏Alt+PrtSc： 截取当前活动窗口 生成的图片保存在主目录~/中，以时间戳命名的PNG文件。 这种操作方式个人感觉比粘帖版操作方便许多。","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://blog.williamyao.com/tags/linux/"},{"name":"lxde","slug":"lxde","permalink":"https://blog.williamyao.com/tags/lxde/"}]},{"title":"在Windows平台上制作Linux USB启动盘","slug":"2015052201","date":"2015-05-22T03:12:46.000Z","updated":"2018-04-12T03:17:29.211Z","comments":true,"path":"2015/05/22/2015052201/index.html","link":"","permalink":"https://blog.williamyao.com/2015/05/22/2015052201/index.html","excerpt":"上周一直在折腾这台N年前的小上网本，初步设想是换SSD，加内存，上搭载轻量级LXDE桌面的Lubuntu，结果不知道是由于优盘年代比较久远，还是本本自己优盘引导有问题，或者是优盘启动制作工具的问题（事后证明是后者），总是引导不进安装程序，又不想手动折腾Grub，只好耐着性子慢慢Bing（度娘就算了吧，在我这行里，用度娘你是搜不到任何有价值的东西的），结果在大神“指点”之下，原来可以这么简单。","text":"上周一直在折腾这台N年前的小上网本，初步设想是换SSD，加内存，上搭载轻量级LXDE桌面的Lubuntu，结果不知道是由于优盘年代比较久远，还是本本自己优盘引导有问题，或者是优盘启动制作工具的问题（事后证明是后者），总是引导不进安装程序，又不想手动折腾Grub，只好耐着性子慢慢Bing（度娘就算了吧，在我这行里，用度娘你是搜不到任何有价值的东西的），结果在大神“指点”之下，原来可以这么简单。 如果你用Ubuntu社区提供的启动盘创建器，或者LILI引导14.04以下的TLS版（长期支持版本），应该是可以正常引导的，但如果像我这次，用来引导Lubuntu 15.04，就可能会出现无法启动的情况。 所以，如果出现了问题，还是使用下面的“终极工具”吧，虽然方式可能野蛮了一点点，但成功率相当高，那就是来自SUSE Studio的ImageWriter 如果觉得慢，我这儿也有一份。 再或者，源代码在这里。 这个只有30K大小的C++程序（在GitHub上开源）就一个功能，把RAW格式的磁盘快照写入磁盘！ 这里的方法其实很蹊跷，但也很简单，把你下载的Linux ISO光盘镜像的扩展名改成”.raw”，然后启动ImageWriter，选择你刚刚改名的文件，再从下拉菜单中选择你希望做成启动盘的优盘，这一步要比较小心，优盘的所有内容都将丢失。 之后，当然是开始制作了，这种方式其实是把ISO的文件内容，以RAW的方式直接写入优盘中，内容甚至字节顺序都和ISO镜像一模一样，当然成功率会非常高。 至此，在我一切工具（非Grub）都试过之后，来自SUSE的这个30K的小工具却异常的帮了我的大忙。 后记： 装上Lubuntu 15.04之后又继续折腾中文支持，特别是fcitx输入法，怎么弄都弄不好，搜了一堆解决方案之后才得知，15.04这个短期支持版本的支持面还不成熟，不像14.04LTS，从实用性，安全性，还有本地化方面都比较稳定了，推荐像我这类需要TeX排版等对中文特性依赖比较高的用户，还是装14.04LTS吧。 所以无奈之下，格了重装回14.04LTS，这次直接用的Ubuntu自带的启动盘创建器，Lubuntu 14.04LTS居然一遍引导成功……看来目前各种工具对14.04版本的支持还是相当的好啊。 最后，LXDE真的好快，而且不光Lubuntu，Fedora也有对应的LXDE版本，不过个人感觉没有Lubuntu做的漂亮。 希望对你有帮助。","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://blog.williamyao.com/tags/linux/"},{"name":"usb","slug":"usb","permalink":"https://blog.williamyao.com/tags/usb/"},{"name":"windows","slug":"windows","permalink":"https://blog.williamyao.com/tags/windows/"}]},{"title":"解决MAIWO K305B硬盘底座的Win8.1驱动问题","slug":"2015050801","date":"2015-05-08T02:25:49.000Z","updated":"2018-04-12T07:00:59.657Z","comments":true,"path":"2015/05/08/2015050801/index.html","link":"","permalink":"https://blog.williamyao.com/2015/05/08/2015050801/index.html","excerpt":"前几天在京东上败了如下两个东西","text":"前几天在京东上败了如下两个东西 一个是MAIWO的4硬盘底座，一个是ORICO的10口USB 3.0 HUB，本以为买回来可以直接使用，结果硬盘底座却出了问题，系统无法找到合适的驱动程序，具体问题描述如下： 运行环境 软件平台：Windows 8.1 Enterprise 64-bit 英文原版，打好截止2015-05-08之前的所有关键更新补丁 硬件平台：四台笔记本分别是ThundeRobot，Lenovo Thinkpad，Sony VAIO和Samsung 故障位置：ThundeRobot 接口类型：USB 3.0/2.0以及ORICO HUB上的USB 3.0 故障现象四个笔记本使用的都是 Windows 8.1 Enterprise 64-bit，区别是ThundeRobot上用的是原生英文，其他三个本儿上是中文包，不知道是补丁的问题还是主板接口芯片的问题，除了TR以外其他三个本儿都可以自动安装驱动，唯独TR（也是我主用的笔记本）上的系统无法正确识别硬件。 尝试解决其实一开始在怀疑，硬盘连接底座，底座再连接Hub，Hub最终接到笔记本的主USB 3.0口上，虽然中间的硬件都号称免驱动，但这种连接方式会不会给系统识别硬件造成障碍？于是直接将底座接在主机上，依然无法识别……进而开始怀疑是不是败了个残次品？于是在TR上切到Ubuntu 14.04 LTS，一切正常。看来问题锁定了，驱动不对！ 由于Win 8.1在联网环境下是自动搜索安装对应驱动的，这一步过不了，只能手动在设备管理器里面操作，先是扫描硬件改动，又是卸载重新安装，依然无果。 360驱动大师、驱动人生、驱动精灵统统无法扫描出新的硬件…… 所以…… 联系客服这里要大赞一下MAIWO的客服，可能是因为碰到了我这个稍微懂点儿，把问题描述的比较清楚的用户，客服那边也是非常尽心尽力的帮我解决，甚至连远程协助都用了，当时没有弄好，MAIWO的硬件工程师在初步判断了故障之后，给我的答复是会尽快解决，但正好赶上五一放假，需要两三天时间。 我心想人家解决问题的态度这么到位，我又暂时不着急使用，就等等吧。 官方解决方案出炉经过两天耐心的等待，终于收到了客服的消息，这次依然是QQ上实时交流，问题故障最终也得到解决，具体操作是需要给硬盘底座重新刷一下固件，具体解决方案如下： 准备另一台电脑（或者Windows 8及以下版本）……还好手头上有四个笔记本，其中三个都正常识别底座，不然这问题还真得折腾着重装系统了…… 为什么要这么做呢？因为需要刷固件，如果连设备都无法正常识别和连接到系统上，还怎么刷？ 判断芯片型号据客服工程师介绍，K305Bu3这一款底座先后使用过两种芯片，一个是VL701，一个是VL711S，因为开始使用的是VL701，后来芯片停产了，才更换到VL711S，而出货上并没有标注具体芯片的使用型号，所以这个需要我自己尝试，方法就是，刷两次！因为刷写固件是要严格对应芯片接口类型的，类型不对根本就刷不进去，所以两套各对应一种芯片的刷机包，哪个能刷，芯片就是哪个型号。 提前在这里交代一下，是让在看这篇文章的你在接下来的刷固件步骤中放宽心，第一遍没刷成功，只表示你选错刷机包了~ 准备刷写固件这里提供两套刷机包的本地下载：VL701-MP-TOOL，VL711S-MP-TOOL 如果你不能确定芯片是哪个，就都下载下来吧，每个包只有2M，很小。 以下以我的VL701芯片为例（VL711S操作完全相同）： 首先解压缩刷机包，会得到两个文件：VL70xMPTool_Setup_V1.0.0.28.exe，VL701-R02_00_00_06-20111019.bin 第一个是刷写工具，第二个是固件文件。 首先安装刷写工具，一路下一步就行。 安装好之后，打开刷写工具，会看到默认界面是这样： 我的是英文系统，所以打开的话界面可能会有点难看，你的应该比我的好看些：） 首先在顶部菜单中，将设备数量改成4 随后左上角点“设置”按钮，打开设置窗口： 先用右上角“打开文件”按钮，找到压缩包里的固件文件（VL701-R02_00_00_06-20111019.bin），确定。 然后按照上图进行设置： Flash: 选择Default 关闭格式化 禁用压力测试 窗口右半部分中间的两个数值需要进行设置：VID为0x2109，这个数值代表生产厂商威刚，PID为0x0701，这个是芯片代号（如果你的芯片是VL711S，就把这个数值改成0x0711） 其他保持默认即可 设置完毕，确定回到主界面，然后连接上设备，打开电源，等待软件识别出4个驱动器。 然后点上面“自动运行”按钮，应该一瞬间就能刷完。 其实我觉得这里先连接设备还是先打开软件并没有什么区别，如果你已经连上了设备，也无妨。 如果你看到上图，恭喜你，你挑错刷机包了…… 果断换另一个包，从步骤5.3开始重来……这里需要格外注意两点，一个是固件文件要选对，一个是PID参数要设置正确，两套刷机包针对两个芯片，固件文件和PID都是不一样的。 先前的MP-Tool可以先不用卸载，两个包中的MP-Tool是各自对应两种芯片的，名字也不同，不会覆盖的，等刷好之后一起卸载就是了。 回到5.3再次开始之后， 如果看到上图，恭喜你，终于大功告成了。 测试还等什么？关掉MP-Tool，关闭设备，插回那个无法识别硬件的系统上，是不是问题解决了？ 总结据客服工程师（和这兄弟聊的非常投缘~~）介绍说，设备之所以会出现这样的情况，主要是因为Win 8.1依靠VID和PID两个硬件参数来判断硬件类型，并自动搜索安装驱动，而有可能我这台设备针对Win 8.1的时候，系统无法正确读取VID和PID，也可能是个别情况，我这个底座的两个参数本身就设置有误（不过Ubuntu上正常啊……），总之这个刷机包只是重写了这两个参数，让Win 8.1 64-bit的系统可以正确找到对应的驱动，并没有对硬件芯片固件进行其他的修改。 另外，因为发现了我这个底座用的是已经停产的VL701芯片，心里还曾有点小小的不爽，客服工程师说VL711S只是比VL701在架构和功耗上好了那么一点点，引脚、功能、性能什么的完全一样，根本看不出差别。 呼，心里好歹舒服一些了。 本来很少写关于硬件的东西，这次借着这个事儿，也小小的体验了一次硬件工程师的感觉，也更坚定了我原本对硬件方面的感觉：通过一番努力做出来的东西，可以实实在在的拿在手里，感觉它的重量，我总觉得这种成就感，反而要比设计出了什么先进算法、写了个什么多少人都在用的软件所带来的成就感要来的实在的多，也强烈的多，因为你能够触碰到你的作品，而不只是看着它YY~ 再次感谢工程师兄弟，本不是什么太值钱的设备，客服能做到这份儿上很让我感动，如果国人企业都能有这种敢于担当的态度，也许很多事情的结果都会不一样吧。","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"usb","slug":"usb","permalink":"https://blog.williamyao.com/tags/usb/"},{"name":"hdd","slug":"hdd","permalink":"https://blog.williamyao.com/tags/hdd/"}]},{"title":"Git私有托管服务初（粗）探（谈）","slug":"2015042701","date":"2015-04-27T01:52:56.000Z","updated":"2018-04-12T02:00:13.052Z","comments":true,"path":"2015/04/27/2015042701/index.html","link":"","permalink":"https://blog.williamyao.com/2015/04/27/2015042701/index.html","excerpt":"快三年前写的文章，经过这么久的发展和版本更迭，GOGS反而成了我的最爱！ William Yao2018年04月12日 这周本来憋着想写几篇技术贴的，可是事情到了最后各种失败和不适用，一直没有形成实质性的结果，所以最后就改成这么一篇介绍性的文章吧，具体安装过程和其中碰到的各种问题也简单的以介绍性为主了。","text":"快三年前写的文章，经过这么久的发展和版本更迭，GOGS反而成了我的最爱！ William Yao2018年04月12日 这周本来憋着想写几篇技术贴的，可是事情到了最后各种失败和不适用，一直没有形成实质性的结果，所以最后就改成这么一篇介绍性的文章吧，具体安装过程和其中碰到的各种问题也简单的以介绍性为主了。 首先，这件事的起因是这周突发奇想整理存档库，解开了尘封很多年的一堆归档包，里面是我从1999年开始到今天的几乎全部程序代码和人生，大部分都丢失了文件创建日期等基本信息，而且那时候的我还没有什么版本控制系统的概念，只知道用压缩包。这笔财富丢了就一去不复返了，得像保护历史文物那样去花时间好好管理。可惜从里面没找到1996年写的第一个小程序，和1997年弄的第一个网站，可能那时候“太年轻”，硬件平台几经更换之后也没想起来备份什么的吧，程序也就随着当初那个2Gb的硬盘一起消失在历史烟雨中了，等这个五一假期，回家翻翻箱子底，看看能不能找出几张当年的软盘，里面兴许会有意外收获也说不定。 其次，折腾这词儿形容的是经过好几天的努力，最终事情回到起点，没有留下任何实质性的结果，不光如此，由于本地环境与服务器环境差距太大（x86和x64），实验只能在服务器上进行，几天下来不光服务器资源混乱不堪，还添加了很多不稳定因素，甚至不可恢复的灾难性问题，被迫回滚磁盘快照好几次（在此也感慨一下阿里云ECS的磁盘自动快照功能，真是帮了我大忙），同时影响了正常服务的运行，可以算是服务中断了。为什么会遇到这些问题，接下来相对简单的讲给大家听。 Gitlab最先搜索到的是Gitlab这个顶顶大名的开源项目，因为版本已经到了7.9，看上去还是很让人放心的，不但功能较为全面，而且各个平台都有对应的支持，一开始的我认为可能这就是我所需要的吧。 优缺点优点：功能强大、全面，自带Nginx，干净的系统可以较顺利的一步到位安装；官方文档比较详细，具体安装过程及对应平台设置都有介绍。 缺点：系统性能消耗巨大（5个基本服务需要同时运行，对于低配的虚拟服务器来说直接吃不消），运行内存不够1G的还需要手动挂在额外的系统交换分区（Swap）；如果系统不“干净”，自带的Nginx/MySQL等服务需要在配置中设定为关闭，并且剩下的配置比较复杂，容易碰到问题；碰到问题的话，官方没有多少实质能用的Faq，由于Git托管属于相对冷门的项目，搜索引擎几乎找不到对应版本的问题解决方案；最后是这种系统的通病，权限管理设置复杂。 安装方式先从Gitlab说起，不仅因为这个是我第一个实验目标，也是因为这是最胖最“牛刀”，同时也是配置最复杂的一个，光折腾它，就用去了我这周的两天时间。上面的优点大致都能被理解为“强大”，但是套上它的缺点，至少对于我，就实在不能够接受了。 Ubuntu平台有对应的APT包，干净的系统可以直接apt-get install gitlab，但是对于我这个跑着Nginx/MySQL/PostgreSQL/Git over SSH和若干FastCGI调用的小小ECS服务器来说，apt-get离我真的很远。所以只能选择第二种安装方式，手动安装。 在手动安装中出现了若干问题第一禁用内置Nginx，配置外部Nginx服务器进行反向代理，虽然这一步官方文档有详细说明怎么弄，但并不全面，什么运行用户/目录权限等等问题千奇百怪，虽然最后找到了解决办法（本想就这个解决办法单独写篇文章的），顺利挂上了外部Nginx，静态文件载入成功，文件上传正常，但权限设置中还有很多不容易发现的漏洞。 第二启动问题，外部Nginx通过ProxyPass透明代理到Gitlab的服务端口是比较简单的运行方案，但作为系统服务启动这个老问题却让我好好的脑补了大半天，从init.d运行级到systemd的.service配置，最后选择的，也是成功运行的方案是supervisord，这三个东西具体是什么，不再缀述。 第三也是最重要的一个问题，权限问题。Gitlab原生支持LDAP，这种高大上的东西暂时用不到，默认的服务器角色分配就够了，这里说的权限问题，也是这类托管平台的通病，SSH和HTTP的权限问题！ SSH的问题比较轻，依托密钥进行身份认证。 HTTP/HTTPS的问题十分严重，表现是通过HTTP和HTTPS可以实现匿名clone，但却连带着push也匿名了！这不天下大乱了嘛！最开始想到了一个这种情况的解决方案，也在Issue上进行了讨论，公开托管服务项目不适合这种折中解决方案，但我的目的是完全私有，则可以试试，办法就是在Gitlab的后台打开访问登录限制，只有登录后才能看到内容，同时关闭注册功能，这样就至少让服务平台界面隔绝在私有范畴，但在经过测试之后发现，虽然可以隔绝平台操作界面，但如果知道了某代码库的克隆地址，依然可以拉取到本地，并且依然可以Push！Issue里面有人给出了个参考的解决办法，外国小伙还就爱钻牛角尖啊，办法是用Nginx的权限管理，撇开Gitlab，直接通过passwd文件给HTTP和HTTPS配置访问权限，达到单项访问的目的，同时启用SSH，这样通过HTTP/HTTPS单向Clone和Pull，通过SSH过滤无权限操作，实现密钥式的推送。这虽然是个办法，但他的做法是手动修改passwd，无法自动适配Gitlab的权限系统，也就是说注册了个新用户，这个新用户并不会自动出现在passwd中，需要手动添加进去，或者修改Gitlab的Ruby脚本（没错，Gitlab的Web框架是Ruby on Rails），给Git仓库加HOOK。 其实后来想想，对于我这个单用户非公开的使用环境来说，passwd的做法足够了，拒绝一切匿名的HTTP/HTTPS访问，通过密钥使用SSH，这样是可以解决问题的，但平台消耗了资源，只为了这么点儿目的，还不如继续我之前的一个小项目，给Gitolite做一个Python的Helper来的简单呢。 Gitolite的Helper在可用之后会开源放在Github上，有兴趣的童鞋可以随时关注本站的最新文章：）（小广告一枚） GOGS这是一个国人90后小童鞋开发的项目，别看年轻，却大有作为啊，给国人挣了面子。 优缺点优点：体积小，资源消耗少，通过系统的Git用户和.ssh/authorized_keys文件管理SSH权限；自带HTTP服务，可以通过Nginx透明代理到HTTPS；安装方便，直接提供对应平台的二进制可运行代码，无需安装，直接./gogs web运行即可。 缺点：和Gitlab一样的匿名权限问题，解决方法同样也是只能使用Nginx的passwd；使用GO语言编写，相对小众，官网被墙，文档查询只能通过国内的爱好者网站，而且做本地修改的话需要在下源码之前先过语言关…… GOGS还是非常不错的，比Gitlab小的多的资源消耗，没有那么一大堆内置服务（Nginx之类的）需要关闭，虽然有相同的问题，但如果通过和Gitlab一样的解决方法来实现的话，显然GOGS更适合，因为资源占用小，解决了HTTP/HTTPS的问题之后，就比较适合小型团队的私有运行环境了。而且在操作authorized_keys文件上，使用了自己的标签分组，理论上应该和Gitolite不冲突。 除了通病问题以外，GOGS的问题还反应在版本目前比较低，只有0.6.1，很多功能作者说是会在0.6.2中引入，比较年轻的项目，值得持续关注，同时也因为比较年轻，相关讨论少的可怜，基本只能在其github的issue里面讨论。 由于是二进制方式直接运行，所以日后升级什么的也比较简单，在测试GOGS的时候，唯一遇到的问题还是卡在了Git系统用户的权限问题上，使用Supervisord运行需要指定GOGS的启动用户，一般都是git用户，但用Nginx做反向代理的时候，Nginx默认运行在www(www-data)用户下，这里绕了几个弯儿，最后想起Nginx的Server段可以指定以哪个用户身份运行……也给遇到问题的童鞋们备注一下，凡是Nginx反向代理这类需要运行在特殊用户之下的应用的时候，可以指定与其相同的用户。 Gitomony法国的一个开源项目，是Git托管服务的一个小型应用，纯PHP实现，因为可能会在SSH上出问题，所以我对这个项目没有进行测试，有兴趣的可以看看。 GitbucketGitbucket 这是一个神奇的网站……呃……神奇的项目。 有人说Gitbucket可以算是Github的开源版本，也有人甚至说它是Github的官方克隆，不管怎么说，这个虽然是吃系统资源最大（甚至比Gitlab还要大）的托管平台系统，但也是系统隔离最好，不会对现有服务产生任何影响（主要是Gitolite）的绝对隔离的平台，因为它是用JAVA写的，打包了所有自身需要运行的包到一个war文件，官方上是这么说的，扔到类Tomcat的服务器中运行，或者干脆java -jar gitbucket.war调用其自带的Web服务器直接开端口运行（这一步会解包一些必要文件到当前用户的主目录，不过没关系，卸载的时候删掉就行），就是这么简单。 虽然说的多么好，但本人折腾到现在，已经身心俱疲了，一周时间也就这么如飞一般过完了。简单尝试运行了一下就作罢，不过还真像Github，连wiki/issue都有，Markdown/fork/star/watch一样不少，据说pull request正在测试。 对于Gitlab的资源消耗都有点承受不起的我来说，再来一套JAVA，估计主服务就要卡内存了…… 同样，有兴趣的朋友可以关注一下，从安装使用方面来说，Gitbucket是不二之选，功能强大，使用简单，同样可以使用Supervisord直接开机启动！ GitblitGitblit 好嘛，这个更过分了，也是JAVA写的，不但有容器端的war包，还有独立运行（Standalone Edition）版本，甚至还有一个管理器Manager程序，这个应该是单机应用的最理想版本了。 Atlassian BitBucketBitBucket 这个算是超出本文范畴的应用了，虽然国内访问速度明显没有Github.com快，但本人从Confluence到JIRA再到BitBucket，一直是比较喜欢Atlassian的设计风格的，虽然Atlassian每个应用吃资源都不小，但作为单机应用，还是不错的。 为什么把BitBucket也放在这里呢，因为Atlassian这一贯抠门的风格，居然在BitBucket上没有体现出来，免费的Plan有5个用户，私有仓库则是没有上限！这种设定对于小型团队来说，应该是非常不错的选择（要就要他Unlimited Private Repo！） 结束语说了这么多，大致介绍了我这周测试的几个“主流”Git托管服务系统，想要开属于自己的Github的童鞋，你除了上面几个平台的相关问题需要克服以外，还需要过用户管理/稳定性测试/分部存储等好几个关口，本人已经倒下了，希望你能再接再厉，最终实现自己的目标。 最后，希望对你有帮助。","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"git","slug":"git","permalink":"https://blog.williamyao.com/tags/git/"}]},{"title":"测试Markdown语法支持","slug":"2015041901","date":"2015-04-19T01:22:50.000Z","updated":"2018-04-12T07:01:13.762Z","comments":true,"path":"2015/04/19/2015041901/index.html","link":"","permalink":"https://blog.williamyao.com/2015/04/19/2015041901/index.html","excerpt":"今天测试了一下WP-Markdown，开启Markdown语法支持，为我这不堪重负的服务器再添上点儿赘肉，最后测试结果：不启用！","text":"今天测试了一下WP-Markdown，开启Markdown语法支持，为我这不堪重负的服务器再添上点儿赘肉，最后测试结果：不启用！ 原因： 和已有的Syntaxhighlighter不兼容，无法解析之前文章的Code Block，虽然Crayon Syntax Highlighter和Jetpack完全兼容，可以将现在的语法高亮/WP-Markdown替换成JetPack和Crayon，但首先不敢保证对之前的文章有没有影响（应该会有，因为两个高亮插件的语法标记不同），其次是对JetPack深恶痛绝，因为GFW的缘故，连接JetPack得用过墙体…… 博客已有几年的文章积攒了，轻易变动格式，是需要对未来有个充分的预期和应对措施的，虽然WP-Markdown会在存储的时候将标记先转换成HTML再存储，但日后若有变动，影响面还是会非常广的。 以下是测试文章的原文，当时是启用了WP-Markdown的。 在文档这一块儿，虽然一直习惯用emacs + reStructuredText + Sphinx的三贱客组合，偶尔调戏一下小妾ReadTheDocs，但毕竟有点儿不上不下的感觉。为什么这么说呢？往上说，我自认为已经掉进LaTeX的坑里很多年，不是Open Document就是TeX出PDF；往下说，小一点的文档我喜欢Plain Text（纯文本），无格式化信息，调用方便。所以Markdown虽然自出现以来一直有所关注，也尝试过一些方便的写作方式和应用，但偶尔转回“博大精深”的TeX写完再回来，就觉得这东西有点儿找不到地方用……MediaWiki支持TeX，ReadTheDocs是reStructuredText，虽然BBCode是上个世纪的事儿，但只要是从那个年代过来的，像我这样看到老东西就心潮澎湃的大叔大姐还是大有人在。之前唯一用Markdown的地方，就是开源项目的文档，不管是GitHub还是类GitLab/GOGS的平台，貌似都对.md情有独钟，大叔也只好赶潮流了。说实话，还真是怀念那个SourceForge一统天下的年代，当时找到需要的软件，一旦碰到是收费的，第一反应不是找破解（良心小小不安），而是上SF找Open Source Projects, 拿回来源码编译运行，即解决了当下需要，又有种偏执的享受。 自从Git“股价走高”，Mecurial“屡见不鲜”之后，开源世界里各种胡乱Fork各种无良Branch各种收费Distribution层出不穷，直接导致在GitHub等托管服务上用搜索功能根本搜不到你想要的东西。SF.net作为SVN最早的拥护者和拓展者之一，现在几乎Weekly Download Top 10上一半儿的Project Wiki首页都挂着“Moved to GitHub”的字样，看着真让人心酸。 说实话文本格式这一块儿，我算是经历了跌宕起伏的几大轮回啊，回想十五年前，哪有那么多花哨，弄个FoxPro，来个UCDOS/WPS塞点儿文章就爽的不要不要的；十年前，觉得HTML + CSS才是奸夫淫妇最佳组合，以至于数据库里的纯文本全都转成了臃肿的HTML；八年前，初步接触到所谓内容表现分离的概念，一度懊恼自己写过的那些初中生高中生作文里边怎么那么多尖括号，想提取文字只能打开浏览器复制粘贴；七年前，身边的人操作系统是个什么东西都没概念，他们居然会用Word！六年前，大牛们突然又回到起点，为了文字里有内容以外的格式化标记就叫不可用的垃圾这种破事儿天天打来打去；五年前，一方赢了，文字去格式化“运动”蓬勃兴起；同年，少部分人（比如我）受够了微软的霸权，转向Open Office和.odt，当时我们的豪言壮语是：如果文档需要格式，那它应该被TeX塞进.pdf里；四年前，存储代价成了白菜价，人们不再关心一篇中学生作文体积是1K还是1M，1K的TXT却要用100K的.doc去承载，只因为它标题小二号，正文仿宋。也就是从那一年（甚至更早几年），“去格式化”运动和叫做云计算的女人“结婚”了，生出了几个儿子，为了增加儿子们找到好媳妇的筹码，在教老婆识别过滤格式代码，哄老婆开心的同时，“偷偷”给儿子们加进了“格式化”的元素，取名叫.rst/.md等等，直到今天，状况就是，老子退休在家不出门，老娘不识美丑，如日中天，即将迎来中年第二春，儿子们广撒网钓大鱼，纷纷瞄准了开源世界和移动应用各种调戏妹纸，因此当下还看不出是上还是下，是格式化还是非格式化，是Plain Text还是“浏览器复制粘贴”，因为混血了！ 这次测试Wordpress的Markdown插件，主要是想看看能不能配合GitHub和GitLab的文档自动生成，感觉WP-Markdown插件本身做的还是很不错的，有即时预览功能，同时支持Setext和atx两种语法（保存或发布之后，会自动将Setext转换为atx语法）。reStructuredText插件就不测试了，与目的不符，本来就从来不用Wordpress的及时编辑器，都是直接在Text模式里写东西。其实上面洋洋洒洒一大段历史独白是有原因的，这篇文档用的Markdown语法，可如果哪天卸载了插件，Wordpress不再支持Markdown，或者某个应用需要调用Wordpress数据库里的文章，是不是就得对这掺杂着格式化信息（哪怕它再轻量化）的文本专门写代码进行过滤呢？ 用锋利的大剪刀去修剪鼻毛，是什么感觉？…… 本来是篇测试文章，却又掺进了对历史的喋喋不休，难道真是老了吗？ 其实换来换去，不管TeX，reStructuredText还是Markdown，我全用emacs搞定！关于安装和使用emacs，请看：《Win8 64-bit上运行emacs 24.5 64-bit》和《Ubuntu搭建TexLive+emacs+AucTex+magit(git)创作发布环境》","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"wordpress","slug":"wordpress","permalink":"https://blog.williamyao.com/tags/wordpress/"},{"name":"markdown","slug":"markdown","permalink":"https://blog.williamyao.com/tags/markdown/"}]},{"title":"彻底解决Linux LC_ALL的问题","slug":"2015041602","date":"2015-04-16T15:12:14.000Z","updated":"2018-04-11T15:15:21.301Z","comments":true,"path":"2015/04/16/2015041602/index.html","link":"","permalink":"https://blog.williamyao.com/2015/04/16/2015041602/index.html","excerpt":"刚刚给gitolite添加用户，又见到了下面的错误： 1234567891011perl: warning: Setting locale failed.perl: warning: Please check that your locale settings: LANGUAGE = &apos;zh_CN:zh&apos;, LC_ALL = (unset), LC_MESSAGES = &apos;zh_CN.UTF-8&apos;, LC_COLLATE = &apos;zh_CN.UTF-8&apos;, LC_CTYPE = &apos;zh_CN.UTF-8&apos;, LANG = &apos;en_US&apos; are supported and installed on your system.perl: warning: Falling back to the standard locale (&apos;C&apos;). 以前觉得烦，就没去管，这下好了，不光本机这问题，阿里云的ECS也这问题！ 是到了该下决心弄一下的时候了！","text":"刚刚给gitolite添加用户，又见到了下面的错误： 1234567891011perl: warning: Setting locale failed.perl: warning: Please check that your locale settings: LANGUAGE = &apos;zh_CN:zh&apos;, LC_ALL = (unset), LC_MESSAGES = &apos;zh_CN.UTF-8&apos;, LC_COLLATE = &apos;zh_CN.UTF-8&apos;, LC_CTYPE = &apos;zh_CN.UTF-8&apos;, LANG = &apos;en_US&apos; are supported and installed on your system.perl: warning: Falling back to the standard locale (&apos;C&apos;). 以前觉得烦，就没去管，这下好了，不光本机这问题，阿里云的ECS也这问题！ 是到了该下决心弄一下的时候了！ 先脑补了基础知识：locale的设定及其LANG、LC_ALL、LANGUAGE环境变量的区别 然后开始具体操作。 首先按照网上很多人建议的传统方法编辑.bashrc文件，在最后加上export LC_ALL=C 然后应用资源文件：source ~/.bashrc 很多人的问题到这一步就能解决，但由于阿里云的ECS作为云服务器，资源占用是比较重要的一个指标，默认是不给用户提供那么多locale的，所以这一步行到这里行不通。 根据上面脑补的文章内容对情况进行判断，问题应该出在LC_ALL环境变量和zh_CN.UTF-8这个locale上！ 那么开始，先把.bashrc文件中的输出变量语句内容改成：export LC_ALL=&#39;zh_CN.UTF-8&#39; 我们不用C进行poxis传递了，直接明了指定使用zh_CN.UTF-8，然后应用资源：source ~/.bashrc 现在系统提示变成了：LC_ALL: cannot change locale 哦，没找到这个locale，这好办： 12sudo locale-gen zh_CN.UTF-8sudo update-locale zh_CN.UTF-8 使用管理员权限，给系统重新生成zh_CN.UTF-8这个locale，然后更新。 这之后我们再次应用资源文件：source ~/.bashrc 无错误，直接返回，然后测试了一下重新push gitolite的keydir到ECS，无错误提示，这下不烦了～","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://blog.williamyao.com/tags/linux/"},{"name":"locale","slug":"locale","permalink":"https://blog.williamyao.com/tags/locale/"}]},{"title":"Win8.1和OneDrive 30G免费空间走起","slug":"2015041601","date":"2015-04-16T14:36:06.000Z","updated":"2018-04-11T15:10:06.161Z","comments":true,"path":"2015/04/16/2015041601/index.html","link":"","permalink":"https://blog.williamyao.com/2015/04/16/2015041601/index.html","excerpt":"今天换了OCZ的VECTOR 180 240G，瞬间感觉大本儿起飞了！ 重装了64-bit的Win8.1，认证激活。 清华大学的正版认证服务请参看《清华大学KMS认证正版Win 8及Office 2010》，这次不用那么复杂了，其他不变，序列号不用更换了，用后面两条命令，重定向认证服务器，然后 /ato 认证就好。 原来Win8.1和Win8果然是两个不同的系统，差别有点儿大，主要集中在网络功能上，微软云渗透在系统各个角落！ 这就教大家激活Win8.1的云服务！本文主在介绍，实际操作比较简单，放心看下来吧。","text":"今天换了OCZ的VECTOR 180 240G，瞬间感觉大本儿起飞了！ 重装了64-bit的Win8.1，认证激活。 清华大学的正版认证服务请参看《清华大学KMS认证正版Win 8及Office 2010》，这次不用那么复杂了，其他不变，序列号不用更换了，用后面两条命令，重定向认证服务器，然后 /ato 认证就好。 原来Win8.1和Win8果然是两个不同的系统，差别有点儿大，主要集中在网络功能上，微软云渗透在系统各个角落！ 这就教大家激活Win8.1的云服务！本文主在介绍，实际操作比较简单，放心看下来吧。 大致情况首先，激活云服务之后，就可以用微软ID登录系统了，因为微软ID会与本机账号绑定，所以对于本地系统，什么都不会丢失和改变，在断网状态下，依然可以用本机账号的密码登录系统。 其次，激活云服务之后，可选让Win8.1使用OneDrive的免费15G空间，将本机系统的配置、账号信息、桌面背景、用户头像、应用程序配置等等信息同步备份到微软云中，当安装另一套系统（或重装系统）的时候，就可以泡杯茶，边喝边看微软云怎么把你新装的系统一下子变回原来的样子了。 再次，OneDrive的另一个功能是可以同步你的Documents文件夹，但由于Windows平台的设计理念经常与软件开发者（无良的那些）不一致，导致Documents（文档）文件夹里过不多久就会乱七八糟，各种游戏进度、视频缓冲、日志文件、莫名垃圾等等会塞满Documents，所以这里不建议打开该功能。 最后，同步照片！这功能应该是OneDrive用的最频繁的功能了（当然备份系统是最重要的功能），虽然和百度云、360云等的功能类似，但这个更方便，手机端安装OneDrive，开启本地相册备份，手机照片就会自动同步到微软云，而Win8.1的OneDrive则会自动同步云上的照片到本机，以后你就可以习惯放轻松的用手机“咔嚓”一下，哎？电脑上出现了刚才拍的照片！ 为什么说比百度云、360云等客户端方便呢？还用说嘛，系统集成度问题，那些个云端需要下载客户端手动同步，而OneDrive则自动同步。 当然你要想打开百度的自动同步我也没意见，可是系统配置备份、云登录系统它就无能为力了，像下面这种情况，应该是比较多余的了吧…… PC端操作首先，正常用本地账号登录系统，鼠标移动到屏幕右下角，等出现Super Buttons（超级按钮）的时候，点“齿轮”，选择最下面“Change PC Settings”（抱歉我是英文系统，中文貌似叫做“进一步配置”之类的） 进入配置程序之后，点左边的“Accounts”（账户） 按提示一步一步操作就可以（这里我是不是有点儿不负责任~~），如果没有微软账号，注册一个就好，建议使用你目前最经常用的电子邮箱注册微软账号，微软的免费邮箱太难用了，没必要。 一堆Login、Authorization、Sync之后，恭喜你，你的本地帐户就和微软ID绑在一起了。 最后，还是“PC Settings”面板，进入“OneDrive”选项卡，该关关，该开开。 手机端操作有童鞋会问，为什么还要在手机端进行操作呢？我并不想用照片同步功能啊！ 其实如果细心看图片的童鞋都会发现，文章里提到OneDrive是15G免费空间，可我的标题和图片里明明都是30G啊！ 嘿嘿，这就是手机端的操作了，其他平台不清楚，IOS上搜索安装OneDrive，用你的微软ID登录。 只要开启一下本地照片同步功能，就可以获赠另外15G的免费空间！我猜想再关掉照片同步后，多出来的15G微软应该不会收回了，毕竟这样也太挫了吧，所以不想用照片同步的童鞋，大可以打开→获赠另外15G→关掉…… 后记记得当年开电脑就上QQ和MSN Messenger的那个年代（那时候哪儿有微信？最高大上的就是腾讯的IM和Skype），MSN做的还很烂，云的概念还没有具体实现，当年最热的还是MSN Space，这次激活OneDrive之后，突然发现相册同步回三张照片，N年前在Space上用Windows Writer写博客时留下的背景图，那个感动啊！现在什么东西都挂着“云”标签，但是具体有多少被使用了呢？现在云的过度富余和云计算中心的电力消耗，会不会也将导致电子信息领域的“通货膨胀”？ 百度云的容量可观 360云的更“离谱” 可我觉得具体到应用上，给我30G，足够了。 当然，Evernote这60M/Month也有点儿过分了~ 真希望哪一天Google回到中国，我还能再次见到Picasa上的那些老照片！（顺便缅怀一下逝去的Flickr…工信部，你大爷！）","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"windows","slug":"windows","permalink":"https://blog.williamyao.com/tags/windows/"},{"name":"onedrive","slug":"onedrive","permalink":"https://blog.williamyao.com/tags/onedrive/"}]},{"title":"Win8.1上管理gitolite和托管版本库","slug":"2015041603","date":"2015-04-16T01:11:40.000Z","updated":"2018-04-12T02:53:28.886Z","comments":true,"path":"2015/04/16/2015041603/index.html","link":"","permalink":"https://blog.williamyao.com/2015/04/16/2015041603/index.html","excerpt":"今天还真写了不少东西！ 以前一直在Ubuntu上操作gitolite托管git仓库，近日需要在Win8.1平台上写代码，众所周知git是linux世界的东西，即使MinGW和GitHub for Windows解决了大问题，但一些常用架构和服务框架还是没法在Windows平台上使用的，比如gitolite这个方便的git托管服务器维护工具！ 关于gitolite一直想写篇文章介绍一下怎么实际安装和操作，一会儿再动笔，先打个标记在这里，等不及的可以先看官方文档（其实挺简单） 在Linux平台上使用gitolite托管版本库，我一直都是用分布式单用户流程，用密钥直接操作，现在启用Windows平台，就相当于添加了一个用户给gitolite，本文就顺便科普的详细带你走一边给gitolite添加新用户的流程吧。","text":"今天还真写了不少东西！ 以前一直在Ubuntu上操作gitolite托管git仓库，近日需要在Win8.1平台上写代码，众所周知git是linux世界的东西，即使MinGW和GitHub for Windows解决了大问题，但一些常用架构和服务框架还是没法在Windows平台上使用的，比如gitolite这个方便的git托管服务器维护工具！ 关于gitolite一直想写篇文章介绍一下怎么实际安装和操作，一会儿再动笔，先打个标记在这里，等不及的可以先看官方文档（其实挺简单） 在Linux平台上使用gitolite托管版本库，我一直都是用分布式单用户流程，用密钥直接操作，现在启用Windows平台，就相当于添加了一个用户给gitolite，本文就顺便科普的详细带你走一边给gitolite添加新用户的流程吧。 准备好git没git还玩儿什么呀？尚没准备好的，请猛戳我这篇文章：《Win8 64-bit上运行emacs 24.5 64-bit》 准备密钥这里分两种方法，请详细看完并认真选择。 第一种情况：“一把钥匙走天下”（不推荐） 如果你喜欢用一对儿密钥登录所有地方，虽然不是很安全，但方便倒是真的，那就这么办： 进入Linux（或者你存放钥匙对儿的地方），把公钥私钥都拿回到Windows上来。 第二种情况：“我是一个认真的人” 如果你喜欢为每一个环境（场合）配一对儿钥匙，那就这么办，打开”Git Shell”（随GitHub for Windows一起安装的），在Win8.1平台上默认情况下应该是包装过的Windows Powershell. 在Git Shell里面，许多Linux的命令是可以直接使用的（比如ls/mv/cp），很方便。 12cd ~/.ssh/ssh-keygen 上面的命令是进入Home主目录里面的.ssh目录中（这里存放着key相关的所有东西），使用ssh-keygen命令生成新的公钥私钥对儿，当问到下面这句话时，是让你输入密钥的名称，这里我们输入：test 1Enter file in which to save the key 这句设置密钥的密码 1Enter passphrase (empty for no passphrase): 直接两次回车，留空就好，本例子不需要。 回车之后，会显示出RSA 2048的散列图（也可以用其他加密算法，在这里不详细叙述），同时生成”test”（私钥）和”test.pub”（公钥） 上图中的”test”和”test.pub”就是我们要的密钥对儿，图上还能看出我有其他几个密钥，其中”william_laptop_ubuntu”和”william_laptop_win”是我这两个平台上的密钥，我的密钥管理的比较多，所以起的名字都比较复杂，建议走第二条路的童鞋也养成这样儿好习惯，省的将来一堆id_rsa头都大了。 好，两条路都可以，我们拿到自己的密钥对儿了，进入下一步。 获得权限gitolite的权限分配和仓库维护，都是通过gitolite-admin.git这个特殊的git版本库来完成的（设计真的很奇妙），在本地修改相应配置后直接推送到服务器上，服务器就会根据修改做出相应的动作，所以我们首先要获得这个特殊的管理库。 那么问题来了，因为现在我们不具有访问gitolite托管库的权限，所以根本无法clone回来这个库，怎么办呢？有的童鞋可能会想，进Linux，把那儿的gitolite-admin.git考回来呗。那样做其实是无用的，因为还是不具有推送的权限。 所以首先要做的，就是获得管理员（或相应角色的）权限，这里分情况： 如果在上一步中你选了第一条路（一把钥匙走天下），而且是把Linux中的公钥私钥都给考回来了，那就请直接跳到下一步（4）。 如果是按照本文一步步生成密钥来到这里的，那么我们开始，这里我们要做一个大动作，就是带着你新生成的公钥（不是私钥，是带.pub的那个文件）回到Linux中，然后进入本地的gitolite-admin目录中（服务器上gitolite-admin.git的克隆），因为回到Linux之后，我们是有权限操作gitolite的，我们就从那里，把Windows中生成的公钥提供给gitolite，让他认了Windows这个干爹~ 进入gitolite-admin目录，我们会看到”keydir”和”conf”两个目录，为了更直观一些，我们抛弃之前那个test名字，假定我们生成密钥那一步生成的是”william_laptop_win”这一对儿。 先进入keydir目录，将”william_laptop_win.pub”拷贝到这个目录里，因为原来Linux中的用户已经获得权限，所以等拷贝完成时，这个目录现在有两个文件william_laptop_ubuntu.pub和william_laptop_win.pub. 然后让我们回到conf目录中，用编辑器打开”gitolite.conf” 我的配置大致是这个样子： 第一行定义了一个用户组，原来只有”william_laptop_ubuntu”一个用户，现在要多一个了，因为都是我，所以组名叫做”william”，在ubuntu之后空一格，添加我们新的用户”william_laptop_win”，这里要注意，名字要和”keydir”中的公钥名称相同（”william_laptop_win”），这样才能形成对应关系。 下面的一堆repo是我的托管库中的一部分版本库，这里每一个repo都是在定义上面的用户在该版本库中具有什么样的权限，我这里偷懒了，注意看第一个repo段，@all表示全部版本库（或者全部用户），这段定义的意思是，@william这个用户组对@all（所有版本库）都有RW+（管理员）权限，随后的所有repo都只是个声明，用来操作gitolite新建对应版本库。 到这里，明白为什么“一把钥匙”的童鞋可以直接跳到下一步了吧？因为那样根本就是在用之前的用户，而不是新建用户，那样多没意思~ 完成拷贝和修改动作之后，在当前目录（gitolite-admin目录中的任意位置）将更改提交给服务器： 1234cd ~/path/to/gitolite-admin/git add .git commit -am &amp;quot;Add user: william_laptop_win into group-william&amp;quot;git push 如果push成功，表示用户已经添加完毕了，让我们进入下一步，回到Windows… 配置ssh的config终于又回到Windows下了，现在的状况是服务器已经知道他还有个干爹叫”william_laptop_win”，只是还没见面，没关系，咱这就认亲去！ 还是打开Git Shell，”cd ~/“进入主目录，”cd .ssh”进入ssh目录，接下来我们要用到一个ssh封装别名组的小技巧来声明使用哪个私钥去访问哪个服务器： 12345host gandie-win user git hostname ganerzi.com port 22 identityfile ~/.ssh/william_laptop_win 第一行是给封装取个别名，user那里是”git”，因为gitolite就是在服务器的git用户名下运行的（参考安装使用gitolite那篇文章），默认端口22 这里关键是最后一行，identityfile指定具体用哪个私钥去跟服务器上的公钥配对，这里我们用服务器上（刚才已经推送到服务器上了）的william_laptop_win.pub对应的这个私钥。 还有个小技巧，如果你之前把Linux的密钥对儿也拷过来了，这里可以紧接着定义一个新的别名段，让你可以随时以不同的身份与服务器通信（不推荐）： 1234567891011host gandie-win user git hostname ganerzi.com port 22 identityfile ~/.ssh/william_laptop_winhost gandie-ubuntu user git hostname ganerzi.com port 22 identityfile ~/.ssh/william_laptop_ubuntu 为什么不推荐呢，因为这样在git log查看日志或者别的操作的时候，就分不清是哪个用户提交的推送了（明明是在Windows下推的，用的身份却是Ubuntu的） 认亲假定你完成了第4步，这一步就简单了：git clone gandie-win:gitolite-admin.git，把gitolite-admin克隆到本地，看到”gandie-win”了吗？它就是我们上一步最后定义的别名组，当然如果也定义了”gandie-ubuntu”组，这里用也是可以的…… 如果一切顺利，克隆完成，恭喜你，认亲成功！再有组员基友什么的想用你的服务器托管代码，就不用再切换回Linux操作了，从Windows中将他的公钥和用户名添加到gitolite-admin中推送，让他去clone只属于他自己的项目，就OK了。 最后一个gitolite的高频率使用功能之一：ssh gandie-win 这个ssh命令并不能真正登录到服务器中（因为git用户是锁死的），而是返回对应的用户所有拥有权限的代码库的名字列表，以及所具有的对应权限，并中断连接。 后记记得我多年前第一次使用密钥对儿登录某服务器的时候，给我的感觉就是：“哇擦居然不要密码！这样安全吗？”其实这个问题这么些年从来没消失过，谈的多了就是网络安全，那话题就太沉重了，别问我为什么，我不想说T_T，总之培养良好的安全意识比什么铁腕儿手段都来的重要，看好你的私钥和闭口不谈密码是一样重要，也是一样安全（或不安全）的。 还是建议童鞋们，该给密钥加passphrase就一定要加，也千万别一把钥匙即开门锁又开保险柜！ 最后，希望能对你有帮助。","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"git","slug":"git","permalink":"https://blog.williamyao.com/tags/git/"}]},{"title":"Win8 64-bit上运行emacs 24.5 64-bit","slug":"2015041401","date":"2015-04-14T14:24:47.000Z","updated":"2018-04-11T14:35:33.702Z","comments":true,"path":"2015/04/14/2015041401/index.html","link":"","permalink":"https://blog.williamyao.com/2015/04/14/2015041401/index.html","excerpt":"早早躺在床上（23点），结果如料想般，又失眠了……干躺了一个小时实在是浪费时间，干脆起床继续折腾，现在凌晨四点，折腾完了可以写文章了。 今晚原本打算写个将APE/FLAC自动转换到ALAC的Python小程序，结果怎么也用不惯Notepad++，VS2013那臃肿的体型用来写Python也始终觉得别扭，最重要的，我要写的Python是要用pyInstaller打包在Win平台上用的，所以QAAC/FLAC/MAC等Lib也都是Win平台的，切到Ubuntu去写Python再切回来调试？只为了能用emacs? No! 那么问题来了，怎么办呢？我又不喜欢用Vim~ 嘿嘿，本文就全程带你弄一套64位Win8上用的64位emacs，顺便搞定GitHub和purcell/emacs.d！ 准备好了吗？Let’s roll!","text":"早早躺在床上（23点），结果如料想般，又失眠了……干躺了一个小时实在是浪费时间，干脆起床继续折腾，现在凌晨四点，折腾完了可以写文章了。 今晚原本打算写个将APE/FLAC自动转换到ALAC的Python小程序，结果怎么也用不惯Notepad++，VS2013那臃肿的体型用来写Python也始终觉得别扭，最重要的，我要写的Python是要用pyInstaller打包在Win平台上用的，所以QAAC/FLAC/MAC等Lib也都是Win平台的，切到Ubuntu去写Python再切回来调试？只为了能用emacs? No! 那么问题来了，怎么办呢？我又不喜欢用Vim~ 嘿嘿，本文就全程带你弄一套64位Win8上用的64位emacs，顺便搞定GitHub和purcell/emacs.d！ 准备好了吗？Let’s roll! 下载emacs!emacs当前版本是24.5，GNU上目前只能下到最高24.4 32-bit版本的，这当然不是我们版本强迫症患者的目标！ 用源码自己编译倒是能学到不少东西，不过还是得讲求效率不是？如果需要的人多，我就再考虑写一篇emacs编译方面的入门儿闲话贴。 感谢zklhp在sf.net上的项目：emacs-w64——经过优化的编译好的emacs 64位windows版！ 更重要的是，zklhp筒子是国人！骄傲啊！而且还表示会尽量跟进GNU的每日源码更新，在SF项目上提供每日编译（Nightly）版本！换句话说，zklhp的这个项目，几乎是与GNU Emacs源码同步的。 还没开始下载吗？快点上面的emacs-w64链接！ 解包因为emacs包含大量lisp源码（神奇的语言），解包过程比较慢。解完之后，请将整个emacs目录潇洒的丢进Program Files文件夹中！这次依然是不带（x86）的原版目录，因为这次依然是64-bit！ 搞定Github如果你喜欢自己配置emacs，那么到第2步就算完了，可我为什么要写这篇文章呢？简单分享一个emacs-w64项目的链接不就完了？答案很简单，后面更精彩！ 这一步是搞定Windows平台上能用的Git，什么MinGW，什么Cygwin统统走开，咱就上一套自带MinGW，好用的不要不要的GitHub for Windows! 啥？你还不知道GitHub是啥？大兄弟别闹，好好的猛戳上面的链接！ 顺便来个GitHub for Mac给Mac平台的客官们，不过总觉得这个是多余，Mac上用Port直接装原生的git多好，这个无非是打包了GitHub的C/S罢了。 一路很友好的在线安装过程，直接搞定。 在进行下一步操作之前，如果你打开着emacs，请C+x C+c关闭emacs，因为接下来我们要动它的配置文件！ Clone purcell/emacs.d用了这么些年，purcell的emacs.d依然是我的最爱，也是业界的“标准”，在第一次启动的时候全自动解包安装！具体好在哪里，请参考我的《终于搞定purcell-emacs.d》。 废话还真多哈，开始！ 首先打开GitHub客户端，按照指导简单配置好。 然后打开浏览器，访问purcell/emacs.d项目页，看到页面最右侧一栏下面的Clone in Desktop按钮了吗？戳一下，不出意外应该会自动将链接传递到GitHub客户端并打开，先别着急点什么东西！看完下一段再说！ 这一步稍微有点儿复杂，首先，purcell这个东西，其实就是一个完整的.emacs.d目录，它唯一的安装步骤，就是用这个目录替换自带的.emacs.d，而在Windows 8平台上，在不指定$HOME变量的情况下，emacs的配置目录默认地址是在C:\\Users\\[用户名]\\AppData\\Roaming\\.emacs.d，而GitHub客户端克隆过来emacs.d的时候，先别选上面的路径，因为这个项目文件夹前面没有“.”，随便找个地方放下先。 然后在客户端左侧项目列表中找到“emacs.d”，鼠标右键点它，选“Open in Explorer”以打开这个项目所在目录。 然后全选目录里面所有的东西（包括隐藏文件），复制粘贴到上面说的emacs默认的配置目录中（如果没有就新建，注意.emacs.d前面那个“.”一定要有，在*nix系统中代表隐藏属性），原来有的东西可以直接删掉（估计会有个auto-save之类的） 拷贝完成了？好，然后回到GitHub客户端，点左上角的加号，选“Add”添加已存在的git repo，然后导航到.emacs.d目录那里确定。 OK之后，发现GitHub客户端没什么变化，但如果再在emacs.d项目上点右键在文件管理器中打开，就变成新的地址，也就是.emacs.d目录了，而原来最早Clone下来的那个目录也就被这个替换了，因为是同一个项目的同一个Clone，原来那个可以爽快的删掉了。 上面这么罗嗦的交代，其实就是把emacs.d弄到emacs默认查找的路径上，然后让GitHub客户端重新认回这个目录。 这样做的好处是，purcell再更新emacs.d的时候，我们可以直接用GitHub客户端来Sync最新的代码。 第一次运行emacs完成上一步操作之后，假定你没开emacs，那么好，现在找到emacs的程序目录，进入bin目录，在最下面有个runemacs.exe，运行这个是打开emacs，如果直接运行emacs.exe等文件，背后会一直开着一个Console（cmd），太难看。这里可以把runemacs.exe右键发到桌面，注意不要把它Pin到任务栏，因为Pin到任务栏的还会是emacs.exe，而不是runemacs.exe，依然有黑窗口。 打开了吗？好，不要有任何操作，purcell的emacs.d会自动联网下载所需要的lisp包进行自动部署，放心，所有部署的文件都跑不出$HOME，也就是.emacs.d这个文件夹。这一步取决于你的网速，快的话五分钟以内全部搞定，最后会问你两个问题，关于color-theme的，全部yes就可以，当你看到下面的界面和一句比较暧昧的问候语的时候，恭喜你，一切搞定了。 后记又写的很罗嗦，还是那句话，高手请飘过！ 凌晨五点了…… 关于purcell/emacs.d，几乎是个全能包了，什么color-theme、代码高亮、Git操作、PIL、动态编译、C/C++ Debug等等全都有，实在不够的它还自带package-installer，直接M+x，运行安装器在线安装需要的包，怎么样，不错吧？ 之前写的那篇文章是在Ubuntu上搞这一套，而且关于emacs和github方面叙述的不详细，这篇文章算是对那篇的一个补完吧。 最后，总觉得Steve Purcell像个演电影的！ 依然那句老话：希望对你有帮助。","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"emacs","slug":"emacs","permalink":"https://blog.williamyao.com/tags/emacs/"},{"name":"64-bit","slug":"64-bit","permalink":"https://blog.williamyao.com/tags/64-bit/"}]},{"title":"关于音频的想说的话","slug":"2015041203","date":"2015-04-12T14:15:25.000Z","updated":"2018-04-11T14:23:12.210Z","comments":true,"path":"2015/04/12/2015041203/index.html","link":"","permalink":"https://blog.williamyao.com/2015/04/12/2015041203/index.html","excerpt":"自从TTPod（天天动听）在App Store下线之后，一直找不到可以“随心所欲”的IOS平台播放器，在忍受了一个礼拜“百度音乐”之后终于受不鸟了，今天掏出许久没用的iPod 160G想重新弄弄播放器，苦于iPod是HFS+格式，而小白（本儿）早在一年前就光荣下岗了，现在用的Win8，看来只能折腾了！","text":"自从TTPod（天天动听）在App Store下线之后，一直找不到可以“随心所欲”的IOS平台播放器，在忍受了一个礼拜“百度音乐”之后终于受不鸟了，今天掏出许久没用的iPod 160G想重新弄弄播放器，苦于iPod是HFS+格式，而小白（本儿）早在一年前就光荣下岗了，现在用的Win8，看来只能折腾了！ 让我们先从iTunes和iPod搞起读取iPod首先因为分区格式的问题，只好使用第三方工具（比如Paragon HFS+ for Windows）让Win8能够挂载HFS+（苹果分区）格式。 变更iTunes Media Library因为库不同，iPod在这台新的笔记本上无法继承同步，如果硬来会抹掉iPod里面原有的内容（我150多个G的无损都和小白一起下岗了，iPod里是最后的希望……），所以在步骤1挂载分区准备完成之后，用了iTools，将iPod里面原有的所有歌曲全都导出到硬盘一个文件夹中，然后再重新扔回iTunes的媒体库里面…… 鉴于iTunes那极低的运行效率和庞大的资源占用，我没事儿从来不开它！但其他设备得上Store，还撇不开这个累赘（我从来都认为iTunes是苹果唯一的败笔），如果抛开Store不用，我宁愿用iTools管理设备，至少这样可以避免步骤2那里外里300多个G的文件操作量！ 重新同步话题跑偏了，我们继续回到正轨！这次用新的媒体库刷新iPod，总算是回来了。原来在小白时代，我曾固执的把所有存储设备（卡除外）全都格成了HFS+ Journal，自从转移平台到Linux之后，着实吃了个大亏，为此还专门腾出一个空盘（2T），导了整整一个礼拜，才把分区格式又重新弄回NTFS，虽然就效率而言HFS+更好，但仅就普适性原则来说，还是不要把自己搞的太极端为好，其实当时把视频盘插在小米电视上没反应也是我导硬盘的一大动力。 痛苦的面对近一阶段的下载到的无损原来的歌曲算是搞定了，可是手机上天天动听下的无损该怎么办？原来OSX平台上一直是用Max + XLD搞定所有格式音乐（转换到Apple Lossless: M4A）的，现在Win8，让我如何是好！百度就是垃圾，换胃病（Microsoft Bing）搜索英文（别问我怎么不用Google，我不想说！），找了若干号称全能转换器（管理器）之类的软件，装了用，用了卸，整一下午没干别的，当时真有掘小白的坟的冲动！偶然受一篇文章启发，才想起全能神器Foobar 2000一直平静的躺在我的Program Files里面！ 好吧，又是一段背景废话，让我们又一次（为什么要说又呢？）回到正轨！ 下载QAAC我的这个版本的Foobar默认是没装Free Encoder Pack的，加上Geek般的强迫症臭毛病（版本永远要用最新的），从VideoHelp上下载了当前最新的QAAC版本2.47，解压得到两个目录，x86和x64，因为我的Win8是64位，所以将x64文件夹下面的文件都拷贝到一个目录中（建议将QAAC整个放在一个统一管理绿色软件的目录中，比如Downloads\\Portable），这里我是直接扔到了Foobar自己的encoder目录中。 其实还是推荐Portable目录，养成良好的习惯会让你在未来的金光大道上天天艳阳高照！ QAAC改名因为Foobar没有64位，所以在下一步的设置中，Foobar还是只会寻找qaac.exe，而这里我们拷贝的是qaac64.exe，所以果断将qaac64和refalac64后面的64去掉，注意另外两个库文件（.dll）不要改名！ Foobar设置其实对于用Foobar的人来说，“设置”这个词儿早就应该从一头雾水转到偏执的爱好了，高手请飘过。 这里的设置，其实很简单，没有什么命令参数之类的需要填写，只要找对地方就可以。 先是在需要转换的文件（我这里主要是flac和ape格式，我的Foobar自带LAME等Encoder，所以在有QAAC之后，几乎全格式了）上点右键，选择“转换”菜单最下面的“。。。”，进入转换器配置界面（上面图片里鼠标指着M4A那一行，是我们完成最后步骤之后保存的结果），然后参考下面的图。 不要管窗口左边那一栏，直接从右边开始，先点“输出格式”，选择“Apple Lossless”，这时候窗口会提示你寻找QAAC.exe，知道怎么做了吧？不知道请倒回到步骤1！ 然后请参看下图 输出路径：转换好的文件会放在哪儿。我选择的是“与来源同一文件夹”，你也可以指定文件夹（比如“Apple Lossless”），便于分类。 输出样式及文件名格式：这里得有点儿Foobar的常识，我设置的是[%artist% - ][%album% - ][%tracknumber% - ]%title%，方括号代表“如果空就没有”，按照这种格式输出的文件名称格式是艺术家 - 专辑 - 音轨号 - 歌曲名.M4A，其中哪个字段为空，最后的文件名中就不出现那个字段。 这个窗口就配置完了，接下来推荐最下面“其他”窗口点进去，把“转换播放增益信息”的勾勾打上，这样播放增益也会被转换（就是播放时音量的大小，便于统一每首歌的音量） 到这里，全部搞定，还是“转换器设置”这个窗口中间有两个小按钮，一个向右（载入），一个向左（保存），点保存，这样窗口右边的所有配置就被保存到左边的列表中了，顺便在左边列表中给你的这个新配置起个好记的名字吧，像我一样也行，“M4A 到同目录”，其实这里不准确，应该用“Apple Lossless:M4A 到同目录”，原因下面会解释。 至此，全部配置完成！确保左边列表中选择的是你刚才保存的那一项，然后中间按钮点一下“载入”，好了，窗口右下角“转换”按钮，走你！ 这一次配置完了之后，右键“转换”菜单里就多出来你刚才配置的那一项了，以后可以直接转换，不用再“。。。”打开配置窗口了。 之后怎么办？当然是将转好的.M4A文件丢进天杀的iTunes里面同步去，原来的APE/FLAC等文件，其实可以删掉了。 以后怎么办？那还用说？装上PC版的天天动听，设置默认下载质量为无损！然后让我们进入下面这个循环： 听到好听的歌 -&gt; 天天动听下载无损 -&gt; Foobar转换成ALAC -&gt; 丢到iTunes同步 -&gt; 又听到好听的歌…… Apple Lossless与M4A这一节算是小小脑补一下。 首先，Apple Lossless也叫做Apple Lossless Audio Codec (ALAC)或者Apple Lossless Encoder (ALE)（指的是同一种东西），是编码格式，而M4A是容器格式，两者是不同的东西，就像H264/X264和MP4/AVI的关系一样，一个编码，一个容器，这也是在上面那一步中名称用Apple Lossless:M4A更好的原因，因为M4A作为容器，还可以装AAC编码的音乐。所以以后再听到有人装大仙的满大街喊全能MP4播放器时，请用鄙视的眼光看着他，如果有人喊“MP5”你还是像听到“iPhone 10”那样无视他吧，这种人没得救的。 其次，Apple LossLess格式不是无损格式，要咬字的话叫无损压缩格式，同类的还有APE、FLAC。苹果的真正无损格式叫做AIFF，它的同类是WAV，采样率满足的情况下是无失真的，当然这话题超出了本文的范畴。 最后，不要用iTunes自带的转换功能“创建新版本”去转换，因为这功能转换出的东西是256K AAC格式的M4A，本身和MP3一个级别，转换MP3没有意义，而转换WAV到AAC，你可就亏大了，为什么？下面会列出常用格式的码率。 进入Geek领域 MP3 码率最高320Kbps，一般听听也就算了。 AAC 码率8–529Kbps，比MP3略高。 APE 每采样在8, 16, 24bit级别。 FLAC 每采样在8, 16, 20, 24, 32bit级别。 ALAC 每采样在16, 20, 24, 32bit级别，略高。 上面三种编码码率换算大致在550-950Kbps左右，向上有浮动。 WAV/AIFF 永远的1411Kbps！ 还嫌不过瘾？请看维基百科原版大表格 后记本想简单叙述以备后查，也许是因为好久没写东西，居然又搞成了科技文加侃闲天儿！ 本文这一番折腾，完全是为了高音质！如果你一没大功放二没无源箱三没牛耳机四没好听力，那拜托，无损音频真的不适合你！其他情况，希望对你有帮助。","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"audio","slug":"audio","permalink":"https://blog.williamyao.com/tags/audio/"},{"name":"codec","slug":"codec","permalink":"https://blog.williamyao.com/tags/codec/"}]},{"title":"Mozilla 64-bit产品线","slug":"2015041202","date":"2015-04-12T13:52:10.000Z","updated":"2018-04-11T14:14:25.823Z","comments":true,"path":"2015/04/12/2015041202/index.html","link":"","permalink":"https://blog.williamyao.com/2015/04/12/2015041202/index.html","excerpt":"用了一年多的64-bit Windows 8，不管是Firefox还是Thunderbird都是天天在用，对于运行速度完全没有关注，只知道在平时工作的Ubuntu上运行的这两个软件速度要比Windows上流畅的多，而且最近还因为速度问题用上了传说中Chromium核心的百度浏览器…… 直到今天偶尔看到Mozilla 64-bit产品线，才突然觉得”Program Files(x84)”这个文件夹实在太丑了！浪费是可耻的，所以在64位系统上运行32位程序，本身也是一种罪恶吧！","text":"用了一年多的64-bit Windows 8，不管是Firefox还是Thunderbird都是天天在用，对于运行速度完全没有关注，只知道在平时工作的Ubuntu上运行的这两个软件速度要比Windows上流畅的多，而且最近还因为速度问题用上了传说中Chromium核心的百度浏览器…… 直到今天偶尔看到Mozilla 64-bit产品线，才突然觉得”Program Files(x84)”这个文件夹实在太丑了！浪费是可耻的，所以在64位系统上运行32位程序，本身也是一种罪恶吧！ 下载之前有几点需要说明： 截止2015年04月12日，Firefox 64-bit推荐下载的是38.0b3 (64-bit Beta 3)版本，而最新版本是40.0a1 (Nightly) 建议安装Download链接默认指向的版本（当前时刻是38.0b3） 这个是当前时刻的每日编译版本（40.0a1），如果不选择手动更新的话，会每日更新一次，而且当前版本运行不够稳定（可能是插件原因），打开就Crash，被迫启用安全模式，而且速度不如38版本流畅。 当前最新版本40.0a1，因为是在nightly频道中，每日编译，所以名字也使用开发名“Nightly”，装上就是Firefox Nightly，图标也不一样。和38 beta3相比，这个Nightly会一直保持最新进度，也就是Cutting Edge，至于哪个好，反正我的选择是两个都装！ 在Mozilla 64-bit官网上下载最新的F和T，迫不及待的安装试用，果然速度不同以往！更加后悔我这一年是怎么过来的！ 下载之后安装之前有几点可以放心的告诉大家： 64位的Mozilla产品线几乎都是与32位线同步更新，不存在版本滞后问题。 默认页面点Download下载的是英文版，如果想要中文版或者其他语言版本，Download链接下面有个“Other languages”，你懂的。 安装之前不要卸载原来的F和T，直接安装64位版本，因为Windows 64-bit会给程序自动提供Program Files(x86)和Program Files两个不同的目录进行识别，64位的应用程序当然默认路径是Program Files（不带括号的），这不属于覆盖安装，32-bit和64-bit会同时存在，这样做的最大好处是，所有东西不需要再次配置，64位F和T在首次打开的时候，会静默的从Application Data中参考32位版本的所有内容（包括配置、插件、数据库等等），省了很多麻烦，特别是Thunderbird里面的邮箱。 64-bit的F和T都不能再使用32-bit的插件和扩展，两条线是不能混用的，这点要注意，好在差不多popular的插件都有对应的64-bit版本，而且也会在第一次运行的时候自动包含在主程序中。 安装完毕后，可以从控制面板中再潇洒的卸载原来的32位版本，新装的64位版本不会受到任何影响。 特别注意：64-bit的Thunderbird默认Download链接指向的就是当前最新的每日编译版本（40.0a1），和Firefox Nightly一样，这个频道的Thunderbird也不用原来的名字和图标了，而是改用Daily这个名字，和Firefox的Nightly搭伴儿！一开始安装还以为中招了，百度安全助手也提示未经授权的修改，仔细看才发现，Daily的图标是一个小鸟蛋里伸出一张小鸟嘴（这不就是Thunderbird的嘴嘛~是不是很有爱） 最后，建议把Daily（Nightly也一样）的检查更新选项设置为不自动更新，每日更新实在有点儿受不了，虽然是后台静默升级！想要更新的时候可以打开“About”窗口，再“Check for updates”。","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"mozilla","slug":"mozilla","permalink":"https://blog.williamyao.com/tags/mozilla/"},{"name":"64-bit","slug":"64-bit","permalink":"https://blog.williamyao.com/tags/64-bit/"}]},{"title":"将Gravatar改为国内多说头像镜像","slug":"2015041201","date":"2015-04-12T13:47:30.000Z","updated":"2018-04-11T13:51:47.081Z","comments":true,"path":"2015/04/12/2015041201/index.html","link":"","permalink":"https://blog.williamyao.com/2015/04/12/2015041201/index.html","excerpt":"最近服务器变动比较大，一直憋着想发几个经验贴，受没有干劲儿和严重的独居拖延症影响至今没有写，今天整理收藏夹，干脆一并写几篇经验贴便于查看吧。 使用官方WordPress的童鞋肯定苦于“和谐”之苦，不但安装模板无法看到缩略图，而且许多模板默认使用googleapi和gravatar来调用js和用户头像，无论服务器速度多块，都得等超时，非常不爽！","text":"最近服务器变动比较大，一直憋着想发几个经验贴，受没有干劲儿和严重的独居拖延症影响至今没有写，今天整理收藏夹，干脆一并写几篇经验贴便于查看吧。 使用官方WordPress的童鞋肯定苦于“和谐”之苦，不但安装模板无法看到缩略图，而且许多模板默认使用googleapi和gravatar来调用js和用户头像，无论服务器速度多块，都得等超时，非常不爽！ 关于将googleapis替换成useso国内镜像的方法，请在本站搜索“useso”，查看《Google远去》。 将Gravatar改为多说镜像服务器，其实非常简单，只需要几行代码： 用WordPress后台Appearance下面自带的Editor，打开当前模板的functions.php文件 插入下面几行代码并保存 12345function mytheme_get_avatar($avatar) &#123; $avatar = str_replace(array('www.gravatar.com','0.gravatar.com','1.gravatar.com','2.gravatar.com'),'gravatar.duoshuo.com',$avatar); return $avatar;&#125;add_filter( 'get_avatar', 'mytheme_get_avatar', 10, 3 ); 回首页刷新一下吧，是不是没有Gravatar超时了？是不是很简单？","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"wordpress","slug":"wordpress","permalink":"https://blog.williamyao.com/tags/wordpress/"},{"name":"gravatar","slug":"gravatar","permalink":"https://blog.williamyao.com/tags/gravatar/"}]},{"title":"留个纪念","slug":"2015031801","date":"2015-03-18T13:45:32.000Z","updated":"2018-04-11T13:46:19.210Z","comments":true,"path":"2015/03/18/2015031801/index.html","link":"","permalink":"https://blog.williamyao.com/2015/03/18/2015031801/index.html","excerpt":"","text":"萨克斯断断续续的练，没什么成果，全靠笛子的老底儿撑着，姑且就这样吧，整的太专业事情就不对了。 还记得这首歌嘛，终于能不断气的吹下来了，今天是特殊的日子，留个纪念。 (function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer3\"),\"video\":{\"url\":\"https://wyc-blog.oss-cn-beijing.aliyuncs.com/video/2015031801/2015031801-01.mp4\"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()","categories":[{"name":"Whispers","slug":"Whispers","permalink":"https://blog.williamyao.com/categories/Whispers/"}],"tags":[{"name":"life","slug":"life","permalink":"https://blog.williamyao.com/tags/life/"},{"name":"sax","slug":"sax","permalink":"https://blog.williamyao.com/tags/sax/"}]},{"title":"萨克斯Day.0留个纪念","slug":"2015011801","date":"2015-01-18T13:43:22.000Z","updated":"2018-04-11T13:44:24.798Z","comments":true,"path":"2015/01/18/2015011801/index.html","link":"","permalink":"https://blog.williamyao.com/2015/01/18/2015011801/index.html","excerpt":"","text":"忙里偷闲玩儿一会儿，这辈子第一天摸萨克斯，凭着咱“100多年”的横笛和长笛基础，居然1个小时不到就吹出曲儿来了。 姿势有些别扭，而且哨片实在太烂，最主要的是口型还没适应，下嘴唇总是干扰那本来就便宜的要死的烂哨片震动，就先这样吧。 弄个视频留个纪念，第一次吹，没什么好丢人的~！ My Saxophone Day 0! (function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer2\"),\"video\":{\"url\":\"https://wyc-blog.oss-cn-beijing.aliyuncs.com/video/2015011801/2015011801-01.mp4\"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()","categories":[{"name":"Whispers","slug":"Whispers","permalink":"https://blog.williamyao.com/categories/Whispers/"}],"tags":[{"name":"life","slug":"life","permalink":"https://blog.williamyao.com/tags/life/"},{"name":"sax","slug":"sax","permalink":"https://blog.williamyao.com/tags/sax/"}]},{"title":"进入小S弯阶段","slug":"2014122001","date":"2014-12-20T13:39:19.000Z","updated":"2018-04-11T13:40:17.384Z","comments":true,"path":"2014/12/20/2014122001/index.html","link":"","permalink":"https://blog.williamyao.com/2014/12/20/2014122001/index.html","excerpt":"","text":"室外滑雪场就是舒畅，初级中级高级全挑战！ 初级道过度，中级道主练小S弯，高级道上去看风景，然后落叶飘下来…… 来个过度的初级道视频留念，中级道全神贯注不适合拍摄，高级道惨不忍睹少儿不宜。 (function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer1\"),\"video\":{\"url\":\"https://wyc-blog.oss-cn-beijing.aliyuncs.com/video/2014122001/2014122001-01.mp4\"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()","categories":[{"name":"Whispers","slug":"Whispers","permalink":"https://blog.williamyao.com/categories/Whispers/"}],"tags":[{"name":"life","slug":"life","permalink":"https://blog.williamyao.com/tags/life/"},{"name":"ski","slug":"ski","permalink":"https://blog.williamyao.com/tags/ski/"}]},{"title":"曾经的你","slug":"2014101401","date":"2014-10-14T13:28:47.000Z","updated":"2018-04-11T13:38:54.473Z","comments":true,"path":"2014/10/14/2014101401/index.html","link":"","permalink":"https://blog.williamyao.com/2014/10/14/2014101401/index.html","excerpt":"今夜无法入睡，翻出从前的片子独自回味，感慨时光飞逝。 算来两年没有摸车了，想起当年的义无反顾和淡然忧伤，大概一个害羞的外向男人，都会这样吧，粗略剪辑一番，加配乐送给我的朋友们。","text":"今夜无法入睡，翻出从前的片子独自回味，感慨时光飞逝。 算来两年没有摸车了，想起当年的义无反顾和淡然忧伤，大概一个害羞的外向男人，都会这样吧，粗略剪辑一番，加配乐送给我的朋友们。 谁没有年轻过？谁又曾老去过？ 生活，要有百般体验与千重回味。 梦想依然在远方，从未曾改变。 还是那曾经的我，从未曾改变。 送给我永远不变的梦想和牵挂，无论你在哪里。 还记得吗？“说过了再见，就一定会再见。” 许巍《曾经的你》 (function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer0\"),\"video\":{\"url\":\"https://wyc-blog.oss-cn-beijing.aliyuncs.com/video/2014101401/2014101401-01.mp4\"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()","categories":[{"name":"Whispers","slug":"Whispers","permalink":"https://blog.williamyao.com/categories/Whispers/"}],"tags":[{"name":"life","slug":"life","permalink":"https://blog.williamyao.com/tags/life/"},{"name":"motor","slug":"motor","permalink":"https://blog.williamyao.com/tags/motor/"}]},{"title":"终于进入S弯阶段，纪念一下！","slug":"2014101201","date":"2014-10-12T10:49:05.000Z","updated":"2018-04-11T13:26:41.236Z","comments":true,"path":"2014/10/12/2014101201/index.html","link":"","permalink":"https://blog.williamyao.com/2014/10/12/2014101201/index.html","excerpt":"","text":"感谢清华雪联和北京高校雪联的筒子们，以及北大首师大各大什么都大的兄弟姐妹们，你们都是高手！ 好几年的单板“落叶飘”了，今天灵感一闪终于突破，进入大S弯，并简单体验了一下小S弯，估计下次就能搞定小S弯。 临走之前拍个视频，纪念一下这晚来了好几年的进步感。 没带绑带和支架，手持拍摄，广角镜头完全丧失了速度感！凑合看吧。 (function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer0\"),\"video\":{\"url\":\"https://wyc-blog.oss-cn-beijing.aliyuncs.com/video/2014101201/2014101201-01.mp4\"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()","categories":[{"name":"Whispers","slug":"Whispers","permalink":"https://blog.williamyao.com/categories/Whispers/"}],"tags":[{"name":"life","slug":"life","permalink":"https://blog.williamyao.com/tags/life/"},{"name":"ski","slug":"ski","permalink":"https://blog.williamyao.com/tags/ski/"}]},{"title":"灰狼日记","slug":"2014080201","date":"2014-08-02T09:21:54.000Z","updated":"2018-04-11T12:23:10.672Z","comments":true,"path":"2014/08/02/2014080201/index.html","link":"","permalink":"https://blog.williamyao.com/2014/08/02/2014080201/index.html","excerpt":"歌词要用很久去写，而旋律却能在灵感出现的一瞬间完成，对于我这个只想用音乐来分享感受的外行来说，已经足够了。 试过各种调子和嗓音，最后觉得还是清唱适合这首歌。 William Yao，《灰狼日记》","text":"歌词要用很久去写，而旋律却能在灵感出现的一瞬间完成，对于我这个只想用音乐来分享感受的外行来说，已经足够了。 试过各种调子和嗓音，最后觉得还是清唱适合这首歌。 William Yao，《灰狼日记》 那一年的春季 充满嫩芽的草地 一对年轻的身影 编织甜言和蜜语 他说她像小红帽 她说他是大灰狼 两个人的美丽童话 开始在那里 那一年的秋季 还是那一片草地 即将远行的身影 编织未来的憧憬 她送他一支钢笔 他说会把她写进日记 就从那一天起 他没有停笔 一页一页 灰狼用心写着日记 记录着他们的甜言蜜语 奋斗着当年的憧憬 一天一天 日子就这样的过去 他相信就在不远的将来 这个只属于他们的童话 会有结局。 又一年的冬季 电话里她的声音 她说还记不记得 当年有一个约定 因为故事太美丽 生活依然在继续 就让童话结束吧 融化在心里 多年后的夏季 一只灰狼写着日记 手中紧握的钢笔 划开尘封的记忆 在他每段故事里 始终相信着童话 还在继续 一夜一夜 灰狼静静等待黎明 仍然独自守护着那颗心 他会在梦里回到那草地 一篇一篇 日记就这样翻过去 那每一天日记的结束语 是从来不曾间断的一句 …… 晚安，我爱你。 var ap = new APlayer({ element: document.getElementById(\"aplayer-vHkztkAl\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"灰狼日记\", author: \"William Yao\", url: \"https://wyc-blog.oss-cn-beijing.aliyuncs.com/audio/2014080201/insane.mp3\", pic: \"\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 灰狼日记 Lame MP3 Standard 下载 灰狼日记 Lame MP3 Insane 320KBPS 下载","categories":[{"name":"Whispers","slug":"Whispers","permalink":"https://blog.williamyao.com/categories/Whispers/"}],"tags":[{"name":"life","slug":"life","permalink":"https://blog.williamyao.com/tags/life/"},{"name":"song","slug":"song","permalink":"https://blog.williamyao.com/tags/song/"}]},{"title":"解决HDMI连接电视画面延时问题","slug":"2014063001","date":"2014-06-30T09:17:52.000Z","updated":"2018-04-11T09:21:12.172Z","comments":true,"path":"2014/06/30/2014063001/index.html","link":"","permalink":"https://blog.williamyao.com/2014/06/30/2014063001/index.html","excerpt":"今天终于解决了笔记本连接电视时，电视画面延时的问题。 我的电视是LG，笔记本双显卡，Intel集成负责HDMI通信和输出，GeForce GT 750M负责运算，分辨率1920x1080 60i Hz，扩展桌面方式，电视为第二显示器。 现象是画面在电视显示区内明显反应迟钝，注意是延时，不是拖尾！拖尾是刷新率的问题。","text":"今天终于解决了笔记本连接电视时，电视画面延时的问题。 我的电视是LG，笔记本双显卡，Intel集成负责HDMI通信和输出，GeForce GT 750M负责运算，分辨率1920x1080 60i Hz，扩展桌面方式，电视为第二显示器。 现象是画面在电视显示区内明显反应迟钝，注意是延时，不是拖尾！拖尾是刷新率的问题。 我还纳闷呢，号称逐行400刷新率的LG镇宅之宝，居然1080i就延时！ 首先排除了HDMI两端接口和导线的问题，电视从HDMI 1一直切换到HDMI 3，问题依旧；导线是200元的镀银扁排；笔记本接索尼55寸没问题；笔记本性能？我这台是雷神…… 之后升级了NVIDIA驱动到最新，全局选项强制使用GeForce运算，无效果。 最后找了几篇帖子，终于有朋友解答了问题，原来是电视设置！ 解决办法 电脑上设置第二显示器（TV）的刷新率为60p，而不是60i，就是隔行（不要问我Windows XP里面怎么设置，那玩意儿去火星了）。 LG遥控器（不是动感遥控，是直板遥控器）上，最下面AV模式（……小伙伴是不是紧张了？），选中游戏；其他电视，找到类似显示模式的选项，选择PC模式或者游戏模式，两个都试试（我的索尼55寸就是PC模式）。 设置完之后，应该就能解决延时问题。 当然，电视这么设置肯定是牺牲了某个硬件能力峰值，是逐行刷新率降到200还是动态高光/画面细节损失没来得及研究，有网友反应牺牲的是TruMotion（LG电视减少运动影像残影的功能）。 PS关于电视这方面很少有人谈及，但是本着买一样东西学一样东西的原则，像我等技术强迫症患者，买电视也是要最高指标的。不是做广告，我这台LG虽然贵点（没Sony Samsung那么离谱），但从买到现在就没后悔过，各种接口一应俱全，亮度/刷新统统顶级，自带操作系统和App Store，动感遥控器就像无线鼠标，相比大多数国产（非小米等技术宅出品）电视号称多清晰多明亮，也就骗骗懒得研究性能指标的人群了。多媒体方面Sony 55’只支持少量大众格式，之前用笔记本专门架的DLNA服务器，拉网线接索尼，就为给老妈看抗日神剧（LG在二楼卧室……），期间看了一篇关于用电视连接DLNA服务器的技术贴，作者是这么说的：“第一步，确定自己电视的型号：如果你是LG，可以不用往下看了，各种格式不用转换，移动硬盘插上就看。”要我说，小米电视真的比LG晚了一年多！ 说这么些与主题无关的废话，主要想表达一个意思：外观多炫早晚看烦，广告多好都是空谈，尺寸多大不放脸前，软件多全不用也闲。买袋儿洗衣粉还看伤不伤手呢，何况买电视！劝大家以性能为重，莫谈外观，因为“硬件伤”才是硬伤！","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"tv","slug":"tv","permalink":"https://blog.williamyao.com/tags/tv/"},{"name":"hdmi","slug":"hdmi","permalink":"https://blog.williamyao.com/tags/hdmi/"}]},{"title":"Google远去","slug":"2014061201","date":"2014-06-12T09:14:29.000Z","updated":"2018-04-11T09:17:09.821Z","comments":true,"path":"2014/06/12/2014061201/index.html","link":"","permalink":"https://blog.williamyao.com/2014/06/12/2014061201/index.html","excerpt":"谷歌服务器从香港搬走了，大陆服务终止了，唉。 因此谷歌的很多服务不可用，gmail只能通过imap或pop3访问，googleapis彻底无效等等。 对我们的生活影响深远啊。 本来想等等谷歌，看看googleapis能不能恢复，但看来遥遥无期了。 临时使用360前端开放公共库CDN镜像替换谷歌公共库吧。 具体怎么改请继续看。","text":"谷歌服务器从香港搬走了，大陆服务终止了，唉。 因此谷歌的很多服务不可用，gmail只能通过imap或pop3访问，googleapis彻底无效等等。 对我们的生活影响深远啊。 本来想等等谷歌，看看googleapis能不能恢复，但看来遥遥无期了。 临时使用360前端开放公共库CDN镜像替换谷歌公共库吧。 具体怎么改请继续看。 找到/wp-includes/script-loader.php，把 12// Hotlink Open Sans, for now$open_sans_font_url = \"//fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,600italic,300,400,600&amp;subset=$subsets\"; 里面的googleapis替换为useso，这样就变成下面的样子： 12// Hotlink Open Sans, for now$open_sans_font_url = \"//fonts.useso.com/css?family=Open+Sans:300italic,400italic,600italic,300,400,600&amp;subset=$subsets\"; 保存后WordPress就不会卡在fonts.googleapis.com那里了。 只是WordPress升级后可能会需要重复修改。 盼望谷歌服务早点回来。","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"cdn","slug":"cdn","permalink":"https://blog.williamyao.com/tags/cdn/"},{"name":"google","slug":"google","permalink":"https://blog.williamyao.com/tags/google/"},{"name":"api","slug":"api","permalink":"https://blog.williamyao.com/tags/api/"}]},{"title":"善用CAJViewer的OCR文字识别功能","slug":"2014051002","date":"2014-05-10T09:08:48.000Z","updated":"2018-04-11T09:13:04.401Z","comments":true,"path":"2014/05/10/2014051002/index.html","link":"","permalink":"https://blog.williamyao.com/2014/05/10/2014051002/index.html","excerpt":"","text":"今天做研（Zuo）究（Ye），从CNKI上查询了一堆文章拿回来阅（Chao）读（Xi），发现直接选择文字复制的话，中文还好，英文会变成一堆奇怪的编码，无奈只好手打！ 当我花了将近2个小时才敲了3页，烟头一地无限沮丧的时候，朋友提醒说CAJViewer有OCR功能…… 再次感谢暴廖童鞋拯救了我一晚上的睡眠时间！","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"ocr","slug":"ocr","permalink":"https://blog.williamyao.com/tags/ocr/"},{"name":"caj","slug":"caj","permalink":"https://blog.williamyao.com/tags/caj/"}]},{"title":"WordPress W3TotalCache CDN实现主站分流","slug":"2014051001","date":"2014-05-10T08:52:48.000Z","updated":"2018-04-11T09:08:11.310Z","comments":true,"path":"2014/05/10/2014051001/index.html","link":"","permalink":"https://blog.williamyao.com/2014/05/10/2014051001/index.html","excerpt":"今天拿另一个空间结合ECS测试了一下CDN内容分发网络，一切顺利，现在成文，教你怎么轻松实现利用另一个空间或者CDN来给你的WordPress加速！","text":"今天拿另一个空间结合ECS测试了一下CDN内容分发网络，一切顺利，现在成文，教你怎么轻松实现利用另一个空间或者CDN来给你的WordPress加速！ 系统准备及基本要求首先你要在承载WordPress的空间之外还要额外拥有一个空间，或者amazon S3之类的CDN服务权限，这里我们使用另一个空间，关于CDN的使用请参考W3TotalCache关于CDN配置的说明。 其次，要有对你的空间绑定的域名DNS有添加A记录的权限，或者完全用另一个域名来实现也是一样的，只是那种事情在国内要求你对两个域名都有备案（再次鄙视万恶的GXB），且这种多域名的访问实现一般只有大型网站才那么干，他们会利用多域名来做负载均衡或者云XX之类的策略。 最后，你得有实体FTP权限，而不是什么WebFTP之类的。 本文采用的实例规格如下： 主站 阿里云ECS，承载WordPress，绑定域名blog.lnyk2.com 分流 万网共享空间（速度够快，只是流量限制），绑定域名site.lnyk2.com 域名 使用阿里云对域名进行解析，目前阿里云的域名解析速度是很快的（不是广告，人家做的确实不错，新建A记录后的解析速度基本和我在美国的顶级域.COM解析速度相同，都属于建好就能访问的那种，一般不需要等48小时的同步时间）。 WordPress插件 W3TotalCache 分流方式 Self-hosted CDN / FTP 满足上面的条件吗？OK, Let’s roll! WordPress W3TotalCache一般使用WordPress的小伙伴都会使用WordPress Super Cache或者W3TotalCache来静态化缓存，在不使用CDN功能的情况下，也会减少数据库的查询量，从而小幅度提高访问速度。 然而，对于主站带宽不高的童鞋，CDN是你提速的唯一选择了。 这里默认你装好了插件，并做好了你自己的设置，就差CDN没有打开。 准备分流主机首先FTP到你的分流空间中查看目录结构（没有FTP客户端？那你还玩儿什么？赶紧FileZilla~），一般的网站空间，其HTTP访问目录都不是根目录，我的访问路径是：/htdocs/ 如果你的不是（比如WebFaction的主机就需要你自己新建站点），就先记下来。 然后，确定你分流主机的域名DNS，我这里将site.lnyk2.com指派给分流主机。 最后，新建需要的目录。一般都不会把所有东西丢在根目录吧？ 我使用/htdocs/static/blog/保存要分流的内容，如果你还有别的主站想要分流，可以以static/为基础新建其他目录，比如/htdocs/static/wiki/，/htdocs/static/gallery/，等待分流主机的域名DNS生效后，就可以进行下一步了。 启用W3TotalCache的CDN设置进入WordPress的后台控制，进入左侧Performance（性能）选项，在General（总体配置或者什么的，我用的英文版WordPress）里启用CDN，启用完毕后，跳到CDN的配置子项里去。 填写相关配置如下： FTP Hostname site.lnyk2.com FTP Username 你的FTP用户名 FTP Password 你的FTP密码 FTP Path 记得上面让你记下来的路径吗？填在这里，本例使用/htdocs/static/blog SSL Support 默认就可以，除非你想分流站点使用https访问，而不是http. Replace Site’s hostname with site.lnyk2.com/static/blog 这里填写的内容就是在启用CDN之后，页面中需要分流的内容链接前面的路径部分，比如原来的http://blog.lnyk2.com/me.jpg会被重新替换为http://site.lnyk2.com/static/blog/me.jpg. 这一项下面还有个”Add CNAME”按钮，意思是，如果这里只填写一条记录，则所有分流的内容都会指到site.lnyk2.com/static/blog，如果你希望彻底到连DNS解析都分流的话，可以在这里填写更多地CNAME，并准备好相应的DNS解析，因为填写多条记录的时候，W3TotalCache就自动启用内容分类分流了，比如： css.lnyk2.com 分流CSS js.lnyk2.com 分流head标签中的JS js2.lnyk2.com 分流紧跟body标签的JS js3.lnyk2.com 分流body标签之前的JS 其实对于小型网站来说，完全没必要这样做。 一条就够：site.lnyk2.com/static/blog，不用点Add CNAME按钮。 都设置完毕了嘛？好，点下面的Test按钮，让插件自动进行测试，看看FTP路径或者DNS解析是否正常。 如果通过了测试，恭喜你，就差一步了；如果没通过，根据提示进行相应更改。 最后，点击保存配置，使配置生效。 上传相应内容这一步其实最简单，只要你上面的内容全部完成，W3TotalCache会帮你完成上传工作。上一步保存完配置之后，页面会刷新，上面多出关于CDN的一行提示，里面有需要的按钮。 首先，如果你的分流空间FTP有连接数限制，就先关闭FileZilla或者你的FTP客户端，释放FTP连接。 点第一个“Export the media library”，这一步会将你媒体库里的所有图片音乐等文件同步到分流主机中。 在弹出的窗口中，有一个蓝色的“Start”，点一下，耐心等待进度条跑到头并且按钮从“Pause”重新变回“Start”，同步就完成了，关闭窗口。 这里需要注意，每次你上传文件到媒体库中之后，W3TotalCache会自动把你上传的文件也FTP到分流主机中一份，不用手动同步。 当然，如果你在媒体库中删除文件的时候，记得在鼠标指向文件行的时候，先点最后面那个“Purge from CDN”，将分流站里的对应文件自动删除先。 点第二个“WP-Includes”，同理，会将你WP-Includes目录中的东西同步到分流主机。 点第三个“Themes”，这一步是同步你的主题相关文件。这里需要注意一下，以后你更改了默认主题，还需要重新同步Themes. 第四个“Custom files”，如果你有自定义的一些CSS之类的东西，就同步一下。我这里没有。 根据需要同步完了所有内容后，这个提示行其实就可以不要了，点“Hide Message”。 检查验收一切搞定之后，就可以回到主站前台，随便打开一篇有上传过图片的日志，右键查看源代码，找到那张图片的链接，是不是发现图片地址已经变成你的分流主机的链接了？ 现在打开FileZilla，重新登陆到你的分流主机空间中，看看你制定的路径里面是不是已经有东西了？ 恭喜你，你的主站现在已经是多路分流了，感觉是不是快多了？ 这里额外讨论一下，在大多数情况中，只有分流主机网速不是很慢，才能体会出速度提升，当然并不是说分流主机一定得多么的快。提速并不是单单靠分流，而是还有并行读取，在主站向浏览器传送页面的同时，浏览器也在向分流站点请求图片等信息，这样有时候用户会体验到一种情况，页面还没显示完整，页面中的图片就已经全都显示出来了。即使对于单一主机的情况，从HTTP请求解析过程来说，多路请求也会比队列请求要快很多。这也是大多数大型网站都在采用的策略，他们宁愿多分配几个CNAME，让所有信息都有不同的URL，也不想把所有内容放在一个URL下，只使用路径来分割，举个稍微重复一点的例子： 一个HTML中，有下面几个内容： 123www.lnyk2.com/js/firefox.jswww.lnyk2.com/photo/me.pngwww.lnyk2.com/image/very-big-backgroud.jpg 同一个HTML，内容变成： 123js.lnyk2.com/firefox.jsphoto.lnyk2.com/me.pngimage.lnyk2.com/very-big-background.jpg 这两个HTML展示给访问者的时候，大多数情况下是后面一个快，因为即使第二个页面有3次DNS解析，也是同步进行的，而第一个页面中，虽然只有一次DNS解析，但内容却占用同一个站点的三个并发连接，即使第二个页面的三个子域名都指向同一个主机，并发读取的速度也是比并发连接挨个读取的用户体验要好。 在更普遍的情况下，js/photo/image三个域名指向的是同一个主机的不同虚拟主机，对于访问压力不是很大的站点来说，可以更充分的挖掘http服务器的工作资源，因为这牵扯到一个比较常见的问题：并发连接数。 说了这么多，无非是想让站点快一些，可能有些地方有点吹毛求疵，但如果你主站全功能，而又有一个访问速度不错，但只能存放静态页面的便宜主机，干嘛不利用起来，变成自己的Self-hosted CDN呢？ 后记经过反复测试，W3 Total Cache占用CPU确实比较高，而WordPress Super Cache则是在功能上不如前者，但性能非常优秀。由于我的ECS只指派了一个CPU，在交替启用这两个插件进行测试的时候，是能够明显感觉出反应速度不同的，建议共享空间的童鞋启用W3 Total Cache，而VPC或ECS的童鞋，乖乖Super Cache吧，与其反应速度慢，还不如让读取速度慢点儿。 还有，如果你启用W3 Total Cache的Minify之后，页面乱了，很有可能是你的JS/html/css内容乱码，这时候需要关闭Browser Cache的Gzip选项！Google了很多帖子，没有说怎么修正这个问题的，只好暂时关闭压缩了。可是这样一来，所有缓存的节约量都赶不上一个大JS压缩后的节约量了。 网上也有很多人说W3 Total Cache的CPU占用率居高不下，很多大型网站被迫改用其他缓存插件。这点在后记一开始我有说明，还是那句话，如果不是网速的原因，童鞋你还是明显觉得慢，肯定就是它的问题了。关闭之后再看看，然后自己做决定是否更换其他的插件。 补充使用Super Cache也是可以使用CDN的，只是这个CDN是真正的CDN，不是咱的分流主机配合FTP了，一般需要花银子。 但是使用Super Cache搭配Autoptimize还是一个不错的选择，Autoptimize会实现Minify等很多功能。","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"wordpress","slug":"wordpress","permalink":"https://blog.williamyao.com/tags/wordpress/"},{"name":"cdn","slug":"cdn","permalink":"https://blog.williamyao.com/tags/cdn/"},{"name":"cache","slug":"cache","permalink":"https://blog.williamyao.com/tags/cache/"}]},{"title":"OpenOffice LibreOffice与Microsoft Office","slug":"2014042201","date":"2014-04-22T07:58:18.000Z","updated":"2018-04-11T08:51:19.551Z","comments":true,"path":"2014/04/22/2014042201/index.html","link":"","permalink":"https://blog.williamyao.com/2014/04/22/2014042201/index.html","excerpt":"今天用OpenOffice Write写东西，顺便对比了一下LibreOffice与OpenOffice关于中文首行缩进设定的性能。","text":"今天用OpenOffice Write写东西，顺便对比了一下LibreOffice与OpenOffice关于中文首行缩进设定的性能。 单从首行缩进功能来说，两者都不如Microsoft Office支持的好，当然这并不是说两者就比Microsoft差，可能多是因为OpenOffice和LibreOffice更趋向于国际化及开源多平台的设计思路，会将一些制式标准设计的更通用，当然代价是牺牲一些本国化的使用便捷性。 比如LibreOffice在首行缩进中尚可将单位选择为“字符”，但一旦改变字号，首行缩进量是不会随字号自动变化的；OpenOffice则根本没有“字符”单位的定义，只能使用厘米/毫米/磅/Pi等制式标准。 当然从标准和功能上考虑，OpenOffice与LibreOffice都支持标准ODT及Tex/PDF输出，至少这两种格式中是没有中文化的“字符”这种定义的，不像Microsoft，根本就是强J了ODT标准，产下了自己的私生子Extended Document Format，所以也才会造成.doc/.docx在其他软件里打开变得面目全非的结果。 这也造成WPS Office夹在中间很难做人。 没办法，Microsoft受众面更大，腰板更硬，同时中文本地化支持也更好一些，所以造就了国内很多连“样式”该怎么定义怎么用都不懂，只知道笨拙的一段一段手动调整字号间距缩进，弄得自动样式表跟文章一样长，却还自称为排版高手的用户。 Microsoft造就了一批“懒汉”，这帮人是不可能踏进TeX那严谨（命令化）、优雅（高DPI输出）、高效率（Style定义）的排版门槛的。 一两页的文章省事也就罢了，来个20页，50页，200页以上的文档，这帮“懒汉”绝对会消极怠工压床板的。 说着说着就跑题了，来点干货吧。 首先养成在OpenOffice/LibreOffice，勉强算上Microsoft Office办公软件中首先定义样式表的习惯，正文什么字，标题多大号，段前空多少等等，然后写作中选中整行或整段，然后点选样式表中预先定义好的“正文”“标题”“一级标题”“二级标题”等样式。这样做的一个附加好处是，大多数处理软件都支持自动文档大纲，定义了几级标题，都会自动在文档大纲中出现，甚至直接生成目录。 然后对于需要定义距离的地方，按照磅或者厘米统一换算一次，进行定义，比如正文三号字首行缩进2字符，就将首行缩进设定为缩进32磅。 “磅数制”对字的大小以点（Point）来计量。各个国家对其大小规定不尽相同，英美等国规定1磅为0.35146mm，而我国为0.35mm，按照采用我国国标换算关系来说，1磅 = 0.35mm，1mm = 2.84磅 这样就可以按照下表对应相应数量的字符出来了： 磅 字号 5 八号 5.5 七号 6.5 小六号 7.5 六号 9 小五号 10.5 五号 12 小四号 14 四号 15 小三号 16 三号 18 小二号 22 二号 24 小一号 26 一号 36 小初号 42 初号 对于大于42磅的字号，直接在字体大小中输入磅数就好，比如72pt","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"office","slug":"office","permalink":"https://blog.williamyao.com/tags/office/"}]},{"title":"2014色调清华","slug":"2014042001","date":"2014-04-20T02:36:03.000Z","updated":"2018-04-10T03:13:08.292Z","comments":true,"path":"2014/04/20/2014042001/index.html","link":"","permalink":"https://blog.williamyao.com/2014/04/20/2014042001/index.html","excerpt":"","text":"花有归宿，与树在一起才有生命。 在曲折中寻觅，在颠簸中承受，脚下的路仍然通向远处。 同一个地点，知道这是哪儿吗？ 岁月留下的不只是斑驳…… 斑驳之外是时间的流逝和我们的曾经与过往。 哪怕用尽一生，只为牵住你的手。 就像土壤带来了生命，而时间却带走了土壤。 多少人在寻找远处的风景，却错过了身边最美的绽放。 最后，我们仍然在路上，偶尔停下休息，却没有了悦动的灵魂。 缺少什么？又错过了什么？ 蓝色的静，寂寥的冷，让画面永远静止在那一帧。","categories":[{"name":"Dreams","slug":"Dreams","permalink":"https://blog.williamyao.com/categories/Dreams/"}],"tags":[{"name":"life","slug":"life","permalink":"https://blog.williamyao.com/tags/life/"},{"name":"photo","slug":"photo","permalink":"https://blog.williamyao.com/tags/photo/"}]},{"title":"用 Android 平板电脑为阿里云（AliYun）的 ECS Ubuntu 安装 VNCServer 和 LXDE 桌面","slug":"2014041601","date":"2014-04-16T02:11:59.000Z","updated":"2018-04-10T02:35:19.471Z","comments":true,"path":"2014/04/16/2014041601/index.html","link":"","permalink":"https://blog.williamyao.com/2014/04/16/2014041601/index.html","excerpt":"今天又开始折腾ECS服务器，主要想测试一下用XOOM平板的AndroidVNC远程登录阿里云的ECS服务器，看看跑起来VNCServer和LXDE桌面的云服务器性能如何。","text":"今天又开始折腾ECS服务器，主要想测试一下用XOOM平板的AndroidVNC远程登录阿里云的ECS服务器，看看跑起来VNCServer和LXDE桌面的云服务器性能如何。 这里选择LXDE而不是GNOME或KDE主要是因为，作为服务器，大多数大型桌面系统所提供的特效/专属应用之类的东西都是不需要的，我们需要的是一个轻量级可定制，同时占用系统资源及硬件资源较少的桌面，因为XFCE还是面向开发的多一些，且从性能上来讲，占用资源还是稍微多了一些，所以这里我们选择主打性能的LXDE桌面，关于LXDE具体性能如何，可以参考官方网站，或者侧面参考lubuntu.org（该ubuntu衍生版本主攻性能，使用的就是LXDE）。 测试环境 终端硬件 Motorola XOOM平板 终端系统 CM Android 终端VNC AndroidVNC 远程平台 阿里云（AliYun）ECS服务器 服务系统 Ubuntu 14.04 LTS 系统准备因为阿里云默认提供的是Ubuntu 12.04，有点老，建议先升级到最新版本的系统，可以参考我的另一篇文章：《通过控制台SSH升级阿里云（AliYun）ECS服务器的Ubuntu》 SSH登录安装X和LXDE因为安装服务需要root权限，请确保登录的账户在sudoers中。 1ssh user@xxx.xxx.xxx.xxx 进入系统后，使用如下命令安装X系统和LXDE核心： 12sudo apt-get install xorgsudo apt-get install lxde-core 根据目前阿里云ECS集群的计算性能和网络性能，上述操作，分分钟就完事儿了！再次感慨一下，一两年之后，等用户数量变得庞大起来之后，阿里云还能否提供出这样的性能体验？ 安装VNC服务器12sudo apt-get install vnc4serversudo apt-get install tightvncserver 具体依赖关系忘了，貌似首先安装tightvncserver会自动依赖安装vnc4server，因为在写这篇文章之前，我是用vnc4server进行测试的，而且之后默认使用的也是vnc4server的命令，这里具体不多说，带宽资源都是阿里云的，俩都装上好了，反正服务器的日常维护基本用不到VNC，测试完毕卸载就好。 初始化并配置VNC服务器12tightvncserver :1tightvncserver -kill :1 上面第一条命令为启动1号VNC线程服务。如果不存在1号线程服务，或者说以前没有安装过VNC服务器（本文之后默认为首次安装），则会自动初始化服务器文件到~/.vnc目录中。 从这里开始，就不需要root权限了，请勿继续sudo，否则配置会有些麻烦，就让VNC服务器运行在当前用户身份下就好。 接下来，编辑~/.vnc/xstartup，对VNC服务器进行简单配置，在文件最后加上下面几行： 12lxterminal &amp;/usr/bin/lxsession -s LXDE &amp; 启动服务器1tightvncserver :1 -geometry 1280x750 这里解释一下，一会儿会用XOOM平板进行登录，而我的平板分辨率是1280x800，为了避免安卓系统下面的系统栏遮挡部分窗口，所以不能将VNC服务器以常规分辨率启动（1280x800）。VNC服务器这方面也很方便，使用-geometry选项可以直接定义由服务器返回的桌面分辨率。 当然，因为我测试的时候用的是WIFI公共连接，网速不够，且XOOM 10.1英寸的屏幕真的上了1280x800的桌面，会非常难操作（主要是按钮太小，指头太粗~~），这里可以用其它比例为1.7的分辨率启动服务器（比如800x470）。当然，接上OTG线，连上鼠标就会好些了。 平板上操作自此，服务器上的操作就完成了，接下来我们用Android系统从平板电脑上通过VNC连接阿里云的ECS服务器！ 首先，打开软件市场（Google Play 商店中就有），安装AndroidVNC。 然后，打开AndroidVNC，进行简单配置： Nickname为服务器上已经启动了VNC服务器的用户名。 Password为初始化VNC线程时为VNC登录设定的用户名（看看~/.vnc/里面有没有passwd文件） Address为服务器地址 Port为连接端口 这里需要注意，VNC服务器默认端口为59XX，就是59开头的端口，记得上面tightvncserver :1和tightvncserver -kill :1这两个命令吗？命令后面的参数:1指的不光是VNC线程的ID号，而且指明了端口号！ 因为我们启动的是:1线程，所以这里的端口号填写5901，举一反三，如果初始化时系统提示你的VNC线程号为:2（比如你运行了两次tightvncserver命令，就会初始化出两个线程），这里就填写5902，以此类推。 Username不用填写，登录Windows的VNC服务器时才会用到。 最后一个选项，Color Format，这个色彩选项直接关乎连接的速度感觉，最高为24位真彩色，最低为纯黑白，256色已经够用了，也可以多试试找到适合你带宽的颜色方案。 对于阿里云的ECS服务器来说，颜色的多少只受连接带宽影响，性能影响几乎无差别，所以我们的本地连接和ECS服务器的前向链路带宽只要够快，大可以选择24位色（反正我测试的时候选择24位色看到的是幻灯片效果……）。 上述设置完毕后，点击Connect连接，如果没有什么意外，我们就成功登录到阿里云的ECS服务器桌面了。 还等什么，赶快体验一下用Android系统连接远程LXDE桌面吧。","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"android","slug":"android","permalink":"https://blog.williamyao.com/tags/android/"},{"name":"ecs","slug":"ecs","permalink":"https://blog.williamyao.com/tags/ecs/"},{"name":"aliyun","slug":"aliyun","permalink":"https://blog.williamyao.com/tags/aliyun/"},{"name":"vnc","slug":"vnc","permalink":"https://blog.williamyao.com/tags/vnc/"},{"name":"lxde","slug":"lxde","permalink":"https://blog.williamyao.com/tags/lxde/"}]},{"title":"通过控制台SSH升级阿里云（AliYun）ECS服务器的Ubuntu","slug":"2014041501","date":"2014-04-15T00:16:16.000Z","updated":"2018-04-10T00:54:38.132Z","comments":true,"path":"2014/04/15/2014041501/index.html","link":"","permalink":"https://blog.williamyao.com/2014/04/15/2014041501/index.html","excerpt":"终于厌烦了讨厌的CentOS破旧软件源！决定把阿里云的ECS服务器系统换了，于是今晚干了一件神奇的事情，当时手头上只有我的Motorola XOOM，装的CyanogenMod（Android CM版），因为Android本身就是Linux，而且自带SSH，之前也经常用我的平板SSH到ECS上维护服务器，所以照例用root登陆进去，从控制台中把系统给升级了。","text":"终于厌烦了讨厌的CentOS破旧软件源！决定把阿里云的ECS服务器系统换了，于是今晚干了一件神奇的事情，当时手头上只有我的Motorola XOOM，装的CyanogenMod（Android CM版），因为Android本身就是Linux，而且自带SSH，之前也经常用我的平板SSH到ECS上维护服务器，所以照例用root登陆进去，从控制台中把系统给升级了。 现在成文，教大家怎么把阿里云的Ubuntu搞定到最新版！ 前提我的ECS服务器实例里面没有什么东西，所以不需要备份，如果你进行了不少设置，或者放进去了不少东西，又心疼丢失，那就先备份出来吧，阿里云ECS更换系统是会抹掉系统盘的！ 当然如果你挂载了数据盘，就可以高枕无忧了。 停止ECS实例，更换系统。进入控制台点“停止”，或者SSH/VNC进去shutdown都可以。 完事儿刷新一下控制台里面ECS的当前状态，当状态为“停止”时，“更多操作”菜单里面的“更换系统”按钮就Enable了。 请更换为Ubuntu，阿里云提供的版本是12.04，古老的东西，本文旨在升级这个古老的东西。 SSH登陆Ubuntu 12.04刚切换完系统，阿里云会发短信给你，告知相关变动情况，顺便把root密码也告诉你。 这样我们就直接爽快的打开控制台（Windows用户请用Putty！ Windows Command Prompt是没有SSH的）： 1ssh root@xxx.xxx.xxx.xxx 进去第一件事是先用passwd把root密码改了 用apt-get升级Update/Dist区域的所有软件包在root身份下，或者你之前新建了用户并登陆了，就su一下，或者确保你的当前用户在sudoers中。 1234apt-get updateapt-get dist-upgradeapt-get autoremovereboot 上面四条命令分别是： 更新apt-get的源信息 升级apt-get的Dist区域软件包 删除多余包 重启系统（关键！） 上面第二条命令比较费时，截至今晚Ubuntu 14.04还是LTS版本，需要下载大约270M的软件包，如果以后最新版本是更高的了，这个数字肯定还会变动。 因为是给ECS升级，走的都是阿里云的带宽，说真的270M左右，分分钟就完事儿了，从这也能看出，目前用户数不多的阿里云ECS不管性能还是带宽都还是十分非常极其令人满意的（我的这个ECS实例是1 CPU/512M RAM/2M Bandwidth，基本属于最低配置）。 注意：最后一定要重启系统（用reboot命令） 确保update manager已经安装在系统中1apt-get install update-manager-core 一般会提示已经安装了该包，确认是最新版本就行了。 正式开始自动升级！ 此步骤要求非常稳定的SSH连接，一旦断线就比较难办，请在网络状况较好的时候执行，如果不怕折腾，升级失败导致系统崩溃，就ECS控制台中再擦除一次系统盘也行。 实在点儿背中断了，参看最后0A步骤！ 我用的平板登陆的，风险更是相当高！说明我的运气还是不错的。 运行升级命令后，系统会立刻提醒你使用SSH操作存在风险，选择“Yes”会打开一个额外的SSH连接，端口为1020（或者1022），如果当前SSH中断了，则可以使用ssh登陆到这个端口来恢复系统到初始状态。 让我们开始吧： 1do-release-upgrade -d 这一步会下载更多的包，580M左右吧，但咱的服务器是云服务器，带宽不是问题，总体上会运行个大约7~8分钟，包括自动下载和编译安装等等全过程。 开始不久会开始提示“New version…”之类的回答“yes/no”的问题，大致意思每次都是软件包提供者提供了该软件包的新版本，是否套用新配置，一路Yes就好。 过程中会被问到一次“有些服务需要停止以便更新，是否同意由升级程序操作自动停止/更新/重启相关服务？”类似的问题（英文），这时候照例选择“Yes” 过程中会进入一个红色背景的界面（SSH 服务配置），说“新版本建议取消root用户的SSH密码登陆方式”，这时候可以选择“同意”来关闭之后root通过SSH的登陆行为，也可以默认“不同意”继续同意root的SSH密码登陆。我在这里是保持了，因为阿里云有“云盾”服务，从云出口处检测暴力攻击，并是反向端口开放策略（手动指定开放，默认全部关闭），已经够安全了（除非你的root密码是123456这样的……）。 过程中会有一个“Grub”的提示，说引导记录怎么怎么更新的，细节不用管，继续“Yes” 等一切搞定，提示你升级完毕，就可以重启系统了，等一会儿再用root登陆进来，你看到的就将是最新版本（目前是14.04 LTS）的Ubuntu运行在你的阿里云ECS服务器中了！ 1reboot 再次登陆，添加用户12ssh root@xxx.xxx.xxx.xxxadduser xxx 上面的adduser是Ubuntu中添加用户的命令，当然你也可以使用更“标准”的useradd命令，只是这两个命令的区别是，adduser自动为你创建Home文件夹，并进入设置密码过程，最后拷贝相应的shell配置和RC文件到Home文件夹中，而useradd需要你自己搞定这些东西。 编辑/etc/sudoers文件，里面添加xxx ALL=(ALL) ALL一行，xxx是用户名，这样你新建的xxx用户就可以sudo了。 0A. 升级过程中SSH不幸中断！如果你点儿确实背，不幸在升级过程中break了SSH，还是有办法恢复并重新开始自动升级过程的。 首先用那个备用的端口SSH进去系统，然后编辑/etc/update-manager/release-upgrades文件，找到Prompt=xxxxxxxx（内容不一样）这样的句子，把所有的Prompt=这行全改成Prompt=normal 然后重复do-release-upgrade -d步骤再次启动自动升级程序。 一切搞定了？给自己恭喜一下吧！等14.04正式版，或者以后更高的版本出来想升级的话，打开此文，再次走一遍。 当然，这次升级纯粹是因为12.04“太老”了，apt源里都没什么新东西。 其实版本升级不用这么频繁，反正ECS包月，带宽性能不用也是浪费（有服务的另说）。 最后，希望能帮到你。","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://blog.williamyao.com/tags/ubuntu/"},{"name":"ssh","slug":"ssh","permalink":"https://blog.williamyao.com/tags/ssh/"},{"name":"vpc","slug":"vpc","permalink":"https://blog.williamyao.com/tags/vpc/"},{"name":"ecs","slug":"ecs","permalink":"https://blog.williamyao.com/tags/ecs/"},{"name":"aliyun","slug":"aliyun","permalink":"https://blog.williamyao.com/tags/aliyun/"}]},{"title":"Emacs中的Tab","slug":"2014040103","date":"2014-04-01T14:50:59.000Z","updated":"2018-04-09T14:52:56.760Z","comments":true,"path":"2014/04/01/2014040103/index.html","link":"","permalink":"https://blog.williamyao.com/2014/04/01/2014040103/index.html","excerpt":"默认Emacs是使用空格代替tab插入到文件中的，因为按照Emacs的说法，tab是邪恶的……","text":"默认Emacs是使用空格代替tab插入到文件中的，因为按照Emacs的说法，tab是邪恶的…… 统一设置tab默认长度的方法是(setq default-tab-width 4) 但是有的时候需要用的tab制表位缩进，比如Makefile的默认情况，这时候需要在Emacs配置中加入如下代码，来识别GNUMakefile mode并自动关闭whitespace-cleanup mode: 123456;; 后面设置tab-width部分只是个人喜好，与本问题无关;; 当打开makefile文件时，禁用whitespace-cleanup-mode。其他类似需要保留TAB的文件类型也可以采用这种方法(add-hook 'makefile-mode-hook (lambda () (whitespace-cleanup-mode 0) (setq tab-width 8))) 这样，在GNUMakefile mode被自动激活的同时，whitespace-cleanup mode会被关闭，保证tab制表位被正确写入，而不是被WSC mode自动替换成空格。","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"emacs","slug":"emacs","permalink":"https://blog.williamyao.com/tags/emacs/"}]},{"title":"Ubuntu中简单的C语言Socket C/S例子","slug":"2014040102","date":"2014-04-01T14:42:58.000Z","updated":"2018-04-09T14:50:09.774Z","comments":true,"path":"2014/04/01/2014040102/index.html","link":"","permalink":"https://blog.williamyao.com/2014/04/01/2014040102/index.html","excerpt":"平台 UbuntuKyrin 编辑器 Emacs 24 编译器 GNU Compiler(GCC)","text":"平台 UbuntuKyrin 编辑器 Emacs 24 编译器 GNU Compiler(GCC) Server代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667# include &lt;stdio.h&gt;# include &lt;string.h&gt;# include &lt;sys/socket.h&gt;# include &lt;netinet/in.h&gt;# define MAXDATASIZE 1024# define SERVERPORT 8000# define MAXCONN_NUM 10int main()&#123; char buf[MAXDATASIZE]; int sockfd, new_fd, numbytes; struct sockaddr_in server_addr; struct sockaddr_in client_addr; int sin_size; if((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == -1) &#123; perror(\"socket error\"); return 1; &#125; memset(&amp;client_addr, 0, sizeof(struct sockaddr)); server_addr.sin_family = AF_INET; server_addr.sin_port = htons(SERVERPORT); server_addr.sin_addr.s_addr = INADDR_ANY; if(bind(sockfd, (struct sockaddr *) &amp;server_addr, sizeof(struct sockaddr)) == -1) &#123; perror(\"bind error\"); return 1; &#125; if(listen(sockfd, MAXCONN_NUM) == -1) &#123; perror(\"listen error\"); return 1; &#125; while(1) &#123; sin_size = sizeof(struct sockaddr_in); if((new_fd = accept(sockfd, (struct sockaddr *) &amp;client_addr, &amp;sin_size)) == -1) &#123; perror(\"accept error\"); continue; &#125; printf(\"server: got connection from %s\\n\", (char *)inet_ntoa(client_addr.sin_addr)); if((numbytes = recv(new_fd, buf, MAXDATASIZE, 0)) == -1) &#123; perror(\"recv error\"); return 1; &#125; if(numbytes) &#123; buf[numbytes] = '\\0'; printf(\"received: %s\\n\", buf); sleep(3); &#125; printf(\"send: hi~~\\n\"); if(send(new_fd, \"hi, I\\'m Server!\", 5, 0) == -1) &#123; perror(\"send error\"); return 1; &#125; close(new_fd); &#125; return 0;&#125; Client代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748# include &lt;stdio.h&gt;# include &lt;string.h&gt;# include &lt;sys/socket.h&gt;# include &lt;netinet/in.h&gt;# define MAXDATASIZE 1024# define SERVERIP \"127.0.0.1\"# define SERVERPORT 8000int main(int argc, char * argv[])&#123; char buf[MAXDATASIZE]; int sockfd, numbytes; struct sockaddr_in server_addr; if((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == -1) &#123; perror(\"socket error\"); return 1; &#125; memset(&amp;server_addr, 0, sizeof(struct sockaddr)); server_addr.sin_family = AF_INET; server_addr.sin_port = htons(SERVERPORT); server_addr.sin_addr.s_addr = inet_addr(SERVERIP); if(connect(sockfd, (struct sockaddr *) &amp;server_addr, sizeof(struct sockaddr)) == -1) &#123; perror(\"connect error\"); return 1; &#125; printf(\"send: Hello, world!\\n\"); if(send(sockfd, \"Hello, world!\", 14, 0) == -1) &#123; perror(\"send error\"); return 1; &#125; if((numbytes = recv(sockfd, buf, MAXDATASIZE, 0)) == -1) &#123; perror(\"recv error\"); return 1; &#125; if(numbytes) &#123; buf[numbytes] = '\\0' ; printf(\"received: %s\\n\", buf); &#125; close(sockfd); return 0;&#125;","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://blog.williamyao.com/tags/ubuntu/"},{"name":"c","slug":"c","permalink":"https://blog.williamyao.com/tags/c/"},{"name":"socket","slug":"socket","permalink":"https://blog.williamyao.com/tags/socket/"}]},{"title":"Ubuntu搭建TexLive+emacs+AucTex+magit(git)创作发布环境","slug":"2014040101","date":"2014-04-01T14:29:29.000Z","updated":"2018-04-10T02:24:19.929Z","comments":true,"path":"2014/04/01/2014040101/index.html","link":"","permalink":"https://blog.williamyao.com/2014/04/01/2014040101/index.html","excerpt":"原来一直没写过关于搭建tex环境的小帮助，今天用到，所以总结一下给需要的朋友。","text":"原来一直没写过关于搭建tex环境的小帮助，今天用到，所以总结一下给需要的朋友。 系统：Ubuntu Kyrin，官方中文版（麒麟），用中文版（国人自己的Ubuntu官方版）会省去很多字体配置、区域设置的问题。 环境：TexLive包 编辑器：Emacs 24 因为是小帮助，我们就不来configure/make/make install那一套了，假定你可以方便的连接互联网，然后步骤就很简单了。 首先使用apt-get安装所需要的所有东西： 1234sudo apt-get install git-coresudo apt-get install emacssudo apt-get install texlive-fullsudo apt-get install auctex 上面命令假设你有足够快的网速，不然特别是在第三步安装TexLive的步骤，最好泡杯茶，找个电影看看，这里是图省事儿，安装了ubuntu源中提供的texlive完整metapack，有经验的朋友也可以自己选择需要的包，如果自己选择，推荐texlive-base, texlive-generic还有texlive-xetex，我们在后面的配置中会默认使用xelatex进行编译。 看完电影了？我们继续。 首先配置emacs，这里可以参考我的另一篇文章，使用purcell同学的emacs.d自动搭建基础型全能emacs环境：《终于搞定purcell-emacs.d》 假定你完成了上面一步，那么打开~/.emacs.d/lisp/init-local.el 这是使用purcell的emacs.d环境之后，指定的可以添加自己的修改而不破坏purcell原始文件的地方。 下面是我的init-local.el的完整内容，后半部分是配置magit和auctex的部分，其实依托apt-get搞定所有事情之后，配置起来是很简单的。 每一部分都有说明，感兴趣的朋友可以直接套用。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546(setq track-eol t)(setq-default abbrev-mode t)(setq save-abbrevs nil)(setq user-full-name 'William Yao')(setq user-mail-address 'monoyo@gmail.com')(setq make-backup-files nil)(setq auto-save-default nil);; Kill a buffer without answering confirmation(global-set-key [(control x) (k)] 'kill-this-buffer);; Auto kill processes when killing a buffer.(delq 'process-kill-buffer-query-function kill-buffer-query-functions)(global-set-key [f11] 'my-fullscreen);全屏(defun my-fullscreen () (interactive) (x-send-client-message nil 0 nil '_NET_WM_STATE' 32 '(2 '_NET_WM_STATE_FULLSCREEN' 0)));激活 magit 来管理 git(require 'magit);激活 AucTex(load 'auctex.el' nil t t)(load 'preview-latex.el' nil t t)(setq TeX-auto-save t)(setq TeX-parse-self t)(setq-default TeX-master nil)(setq TeX-output-view-style (quote (('^pdf$' '.' 'evince %o %(outpage)'))))(add-hook 'LaTeX-mode-hook(lambda()(add-to-list 'TeX-command-list '('XeLaTeX' '%`xelatex%(mode)%' %t' TeX-run-TeX nil t))(setq TeX-command-default 'XeLaTeX')))(provide 'init-local);;; init-local.el ends here C+x,C+s保存文件，C+x,C+c`退出emacs. 然后重新打开emacs，如果一切顺利，你就配置完毕了，C+x,C+f打开一个在git管理中的.tex文件看看，是不是magit和auctex都启动了？ 试试用C+c,C+c编译，用C+c,C+v使用evince查看生成的pdf，是不是很爽？ 这里注意一点，上面配置文件的最后一部分，设置C+c,C+c命令默认使用xelatex编译pdf，你也可以设置为latex或其他支持的命令，这个设定只为方便。","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"emacs","slug":"emacs","permalink":"https://blog.williamyao.com/tags/emacs/"},{"name":"git","slug":"git","permalink":"https://blog.williamyao.com/tags/git/"},{"name":"ubuntu","slug":"ubuntu","permalink":"https://blog.williamyao.com/tags/ubuntu/"},{"name":"tex","slug":"tex","permalink":"https://blog.williamyao.com/tags/tex/"}]},{"title":"这个男人来自地球——Man from Earth","slug":"2014031801","date":"2014-03-18T14:18:49.000Z","updated":"2018-04-09T14:28:56.085Z","comments":true,"path":"2014/03/18/2014031801/index.html","link":"","permalink":"https://blog.williamyao.com/2014/03/18/2014031801/index.html","excerpt":"","text":"终于找到N年之前看过但却忘了名字的电影了，虽然只看了一遍，但这么多年过去了仍然留给我深刻印象！强烈推荐！ 《这个男人来自地球》 豆瓣评分 8.4 别名 地球不死人 / 地底奇人 演员 大卫·李·史密斯 托尼·托德 约翰·比灵斯列 Ellen Crawford 安妮卡·彼得森 导演 理查德·沙因克曼 地区 美国 年代 2007 片长 87分钟 简介一个普通男人的秘密在他的辞职事件中开始显示出端倪。历史教授约翰奥德曼（David Lee Smith饰）说自己身上有一个让大家都匪夷所思的秘密，而为了保守这个秘密他不能在一个地方超过十年。他的朋友们试图去发掘他的故事中的秘密，这一举动让约翰非常生气，而他的朋友却发现约翰的故事是无法被否定也无法查证的，究竟约翰身上有着怎样的秘密？一幕幕碎片联系起来，带给我们一个意料之外的故事高潮。","categories":[{"name":"Whispers","slug":"Whispers","permalink":"https://blog.williamyao.com/categories/Whispers/"}],"tags":[{"name":"life","slug":"life","permalink":"https://blog.williamyao.com/tags/life/"},{"name":"movie","slug":"movie","permalink":"https://blog.williamyao.com/tags/movie/"}]},{"title":"清华大学KMS认证正版Win 8及Office 2010","slug":"2014030901","date":"2014-03-09T14:12:14.000Z","updated":"2018-04-10T00:22:12.384Z","comments":true,"path":"2014/03/09/2014030901/index.html","link":"","permalink":"https://blog.williamyao.com/2014/03/09/2014030901/index.html","excerpt":"首先确保你的Win 8是Enterprise版，Office 2010是Professional Plus，其他版本没试过，不敢确定能否激活。 将Win 8序列号修改为清华校园正版序列号。 将KMS服务器地址修改为清华KMS认证服务器。 开启认证。","text":"首先确保你的Win 8是Enterprise版，Office 2010是Professional Plus，其他版本没试过，不敢确定能否激活。 将Win 8序列号修改为清华校园正版序列号。 将KMS服务器地址修改为清华KMS认证服务器。 开启认证。 上面四个步骤看似复杂，其实就是下面几条命令： 使用Win + Q调出所有应用程序界面，在Command Prompt（命令提示符）图标上点右键，在下面选择Run as Administrator（用管理员身份运行），然后在命令行窗口中顺序输入下面几条命令，前提是确保你在清华校园网中，否则认证服务器是访问不到的。 123slmgr /ipk 32JNW-9KQ84-P47T8-D8GGY-CWCK7slmgr /skms 166.111.5.131:1688slmgr /ato 开始会没反应，如果所说的没有什么问题，等一会儿你就会看到这个： 建议先安装Office再进行上述激活，否则可能会需要再重复一遍上述三个命令来激活Office. Good Luck!你现在使用的就是正版Win 8和Office 2010了。 就是不知道清华什么时候开放Office 2013的正版认证。","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"windows","slug":"windows","permalink":"https://blog.williamyao.com/tags/windows/"},{"name":"kms","slug":"kms","permalink":"https://blog.williamyao.com/tags/kms/"},{"name":"office","slug":"office","permalink":"https://blog.williamyao.com/tags/office/"}]},{"title":"在Ubuntu中创建Windows 7/8 USB启动盘","slug":"2014030701","date":"2014-03-07T14:03:12.000Z","updated":"2018-04-09T14:11:08.884Z","comments":true,"path":"2014/03/07/2014030701/index.html","link":"","permalink":"https://blog.williamyao.com/2014/03/07/2014030701/index.html","excerpt":"","text":"如果想在Ubuntu中创建Windows 7或8的USB启动盘，由于没有Windows平台上那么方便的UltraISO，多数人只能选择GRUB手动安装，这样比较麻烦。 今天无意中看到一个小软件，可以方便的在Ubuntu中创建Windows启动盘，经过测试还是比较方便的。 具体安装过程如下（假定你使用的是Ubuntu）： 123sudo add-apt-repository ppa:colingille/freshlightsudo apt-get updatesudo apt-get install winusb 安装好之后，可以在Ubuntu的Dashboard中找到WinUSB，也可以直接使用命令行方式，格式如下： bash sudo winusb --format &amp;lt;iso path&amp;gt; &amp;lt;device&amp;gt; sudo winusb --install &amp;lt;iso path&amp;gt; &amp;lt;partition&amp;gt;bash 第一条命令会根据ISO的具体需要自动格式化设备为相应分区（一般为Fat32），第二条命令则安装ISO到设备分区，并写入MBR.","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://blog.williamyao.com/tags/ubuntu/"},{"name":"usb","slug":"usb","permalink":"https://blog.williamyao.com/tags/usb/"},{"name":"windows","slug":"windows","permalink":"https://blog.williamyao.com/tags/windows/"}]},{"title":"在Ubuntu中为Razer鼠标减速","slug":"2014030601","date":"2014-03-06T14:00:21.000Z","updated":"2018-04-09T14:22:56.728Z","comments":true,"path":"2014/03/06/2014030601/index.html","link":"","permalink":"https://blog.williamyao.com/2014/03/06/2014030601/index.html","excerpt":"","text":"今天买了新笔记本，因为没有预装系统，所以直接用Ubuntu引导的系统，插上我的Razer Naga鼠标之后，发现移动速度太快，即使设置为最低也没用，看来得用系统及别的降速了。 打开终端，使用xinput --list命令找到鼠标的ID，我的ID是11，所以用下列命令进行降速，中间的句子是说明： 1xinput --set-prop \"11\" \"Device Accel Constant Deceleration\" 3 命令的意思是，把输入设备11的移动速度属性降到3，你也可以试试别的数字，对于我，3正好。 命令会立即生效，所以可以多测试几个数值。","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://blog.williamyao.com/tags/ubuntu/"},{"name":"razer","slug":"razer","permalink":"https://blog.williamyao.com/tags/razer/"}]},{"title":"修改 WordPress 的 SyntaxHighlighter 实现圆角和阴影效果","slug":"2013122503","date":"2013-12-25T03:03:28.000Z","updated":"2018-04-09T03:06:21.377Z","comments":true,"path":"2013/12/25/2013122503/index.html","link":"","permalink":"https://blog.williamyao.com/2013/12/25/2013122503/index.html","excerpt":"对于编码/技术博客来说，SyntaxHighlighter代码高亮显式插件必不可少。","text":"对于编码/技术博客来说，SyntaxHighlighter代码高亮显式插件必不可少。 以本站为例，将代码高亮的显式风格修改成圆角带阴影效果的方法是，在当前theme的style.css文件中添加下面的CSS定义即可： 123456789.syntaxhighlighter&#123; padding: 10px 0 !important; box-shadow: 1px 1px 3px #ccc; -webkit-box-shadow: 1px 1px 3px #ccc; -moz-box-shadow: 1px 1px 3px #ccc; border-radius: 5px; -webkit-border-radius: 5px; -moz-border-radius: 5px;&#125; 如果你装了JetPack插件，则可以直接在Appearance下面的Edit CSS中添加上述定义，JetPack会将Appearance/Edit CSS中添加的内容，于theme的Style.css加载完毕后立即加载，这样不管你切换什么主题，Edit CSS中的内容都会一并有效，免去了切换/升级theme后定义消失的问题。","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"wordpress","slug":"wordpress","permalink":"https://blog.williamyao.com/tags/wordpress/"},{"name":"css","slug":"css","permalink":"https://blog.williamyao.com/tags/css/"},{"name":"theme","slug":"theme","permalink":"https://blog.williamyao.com/tags/theme/"}]},{"title":"设定python的默认编码为UTF-8","slug":"2013122502","date":"2013-12-25T02:59:27.000Z","updated":"2018-04-09T03:03:00.570Z","comments":true,"path":"2013/12/25/2013122502/index.html","link":"","permalink":"https://blog.williamyao.com/2013/12/25/2013122502/index.html","excerpt":"今天重装Pillow时遇到了编码问题，编译不通过，于是重新设置了一下python的默认编码。","text":"今天重装Pillow时遇到了编码问题，编译不通过，于是重新设置了一下python的默认编码。 Python在初始化的时候默认使用ascii编码，并且在初始化之后禁止用户修改默认编码，所以造成很多非ascii编码的文件在非显式指定编码的时候报错，这样我们就需要修改一下默认编码为UTF-8了。 在Ubuntu中/etc/python[x.x]/sitecustomize.py这个文件在python运行之前会自动运行，也是整个python的“全站”用户自定义初始化文件。 在这个文件的try:前添加三行内容（如果没有这个文件，可以新建，并修改成下面内容）： 123456789import sysreload(sys)sys.setdefaultencoding('utf-8')try: import apport_python_hookexcept ImportError: passelse: apport_python_hook.install() 在Windows中从Python安装目录下的Lib/site-packages目录中新建这个sitecustomize.py文件，修改内容同上，Lib/site-packages目录中的这个文件也会被自动运行。 在python shell中12import syssys.getdefaultencoding() 这两行查看输出结果是否为UTF-8 如果还不是，就显式指定编码格式吧： 1print a.encode('utf-8')","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"python","slug":"python","permalink":"https://blog.williamyao.com/tags/python/"},{"name":"utf8","slug":"utf8","permalink":"https://blog.williamyao.com/tags/utf8/"}]},{"title":"Ubuntu 13.10 LiveCD + boot-repair 拯救你的 grub2","slug":"2013122501","date":"2013-12-25T02:54:06.000Z","updated":"2018-04-09T02:58:45.309Z","comments":true,"path":"2013/12/25/2013122501/index.html","link":"","permalink":"https://blog.williamyao.com/2013/12/25/2013122501/index.html","excerpt":"今天修复Linux Kernel 3.11.0.14-generic的时候不小心把grub2给干掉了！ 折腾了一个晚上，终于成功解决，综合一下google结果和本次经验，希望能帮到你。","text":"今天修复Linux Kernel 3.11.0.14-generic的时候不小心把grub2给干掉了！ 折腾了一个晚上，终于成功解决，综合一下google结果和本次经验，希望能帮到你。 首先，要有一个可以成功引导的ubuntu，当然LiveCD最方便; 其次，要有一个可用的互联网连接，我用的是UbuntuKylin 13.10，对我的电信上网卡有非常好的支持，顺便说一句，联合ubuntu社区打造出了ubuntu的中文化原生同步版本ubuntu麒麟（Kylin），工信部这次真的砸了不少钱！ 下面假定我们使用LiveCD方式引导，试用ubuntu，进入桌面，打开终端（命令行），然后： 123sudo add-apt-repository ppa:yannubuntu/boot-repairsudo apt-get updatesudo apt-get install -y boot-repair 上面三条控制台命令的意思是： 添加个人源 更新软件源 安装boot-repair，参数-y的意思是全选yes 然后，如果你用的无线上网卡，可以拔下来了，因为有些上网卡（比如华为）会带有1到2个磁盘分区，也会被ubuntu自动挂载，boot-repair启动后会扫描磁盘分区，我的上网卡上的两个分区怎么也扫描不完，看来dead loop了。 1sudo boot-repair 运行之后，会提示正在扫描分区，此过程可能会等个几十秒，然后就弹出了软件界面。 可以选择推荐修复模式，也可以选择高级选项，在推荐的基础上可以勾选一些额外的修复功能。 一切都开始于右下角的“应用”按钮，一切也都结束于此。 着重想说的是，网上那些个修复grub的文章，虽然看完会学会不少东西，但毕竟比较折腾，而且对于不是很熟悉linux/grub的朋友，成功率比较低，而这个boot-repair不光光是功能贴心，其设计也非常贴心，看出了软件作者的用心良苦，因为我用的ubuntukylin，系统语言从底层就是zh-CN，打开boot-repair后界面居然也全是中文，国际化做的非常不错（当然不排除作者应该也是中国人），更让人称赞的是，我的这个系统是装在移动硬盘上的，这种安装方式让我可以随时随地用任何不是特别古怪（主要指硬件）的电脑登入我自己的系统，而boot-repair在刚开始扫描的时候就询问我sdb是否是移动硬盘，并且在修复完毕之后又一次提醒我，“别忘了重启之后修改一下BIOS的启动顺序，好从移动硬盘引导进入系统”！看到这样的话，你是不是也和我一样，拯救系统引导大功告成之余，心里也暖暖的？ 这个软件会扫描/识别每个分区里面的每个系统，并可以选择将grub重新安装在所有介质，或指定介质中，我的本机有硬盘，并不想干扰脆弱的Windows 7 Loader，所以选择了将grub直接重装在sdb中。如果你是多系统，则可以直接用推荐方式恢复就好，同时可以勾选“修复windows引导程序”选项，这样grub就不会覆盖windows自己的引导程序了。 最后，我想起一句话： 在Linux中，任何东西都是可以修复的。 某位大神","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://blog.williamyao.com/tags/ubuntu/"},{"name":"grub","slug":"grub","permalink":"https://blog.williamyao.com/tags/grub/"}]},{"title":"利用virtualenv搭建python开发部署环境","slug":"2013122401","date":"2013-12-24T02:32:46.000Z","updated":"2018-04-09T02:49:29.308Z","comments":true,"path":"2013/12/24/2013122401/index.html","link":"","permalink":"https://blog.williamyao.com/2013/12/24/2013122401/index.html","excerpt":"随着安装各种python package，我们的site-packages/dist-packages会越来越杂乱，而且有些包是临时测试用途的，基本用完之后就荒废了，更重要的是，有些程序的运行环境比较复杂，当和其他程序混在一起的时候，容易出现冲突或各种各样的错误，甚至进入死版本状态无法同时解决，这也是目前大多数python开发者都推荐使用virtualenv的最主要原因，比如readthedoc/django/django-cms等等混在一起的环境。 现在我们就从头开始，利用virtualenv搭建各种不同的python虚拟开发/运行环境，并从头开始部署django-cms","text":"随着安装各种python package，我们的site-packages/dist-packages会越来越杂乱，而且有些包是临时测试用途的，基本用完之后就荒废了，更重要的是，有些程序的运行环境比较复杂，当和其他程序混在一起的时候，容易出现冲突或各种各样的错误，甚至进入死版本状态无法同时解决，这也是目前大多数python开发者都推荐使用virtualenv的最主要原因，比如readthedoc/django/django-cms等等混在一起的环境。 现在我们就从头开始，利用virtualenv搭建各种不同的python虚拟开发/运行环境，并从头开始部署django-cms 安装部署virtualenv首先，这个工具叫virtualenv （看看文档赶紧回来，我们继续啦） 下面我们进行安装，这里假定使用环境为ubuntu 13.10，当然Windows平台的pip工作原理也是一样的，只是virtualenv的运行机制会有所变化，需要了解的朋友自行google一下吧。 sudo pip install virtualenv或者sudo apt-get install python-virtualenv 推荐前一种，利用python的pip进行安装管理，这样不至于在我们的ubuntu软件丛里面增加更多的东西，如果你的pip罢工，就用第二种方式吧。 这里需要注意，安装virtualenv是有几个依赖包的，上述两种安装方式会自动安装依赖包。 等待安装结束，我们就可以使用virtualenv来配置虚拟环境了。 首先，virtualenv的大致工作原理是，在命令行当前位置创建一个包含虚拟环境各种信息的文件夹，同时在文件夹中bin/创建控制虚拟环境的脚本，当我们使用该虚拟环境（也就是这个目录中的东东）的时候，包括各种envvar`site-packages`会统统只聚合在这个虚拟环境（目录）中，不会对原始python环境造成任何影响。 接下来的操作中，我们假定会把各种虚拟环境都统一放在~/virtualenv/里面，并且搭建django-cms的专用虚拟环境。 1234cd ~mkdir virtualenvcd virtualenvvirtualenv env-django-cms 上面的最后一条命令就是创建了以env-django-cms为名称的虚拟环境（其实就是个目录）。 12cd ~/virtualenv/env-django-cmssource bin/activate 上面的命令是使用source命令执行~/virtualenv/env-django-cms/bin/active脚本，这个脚本会激活当前虚拟环境，在bin/目录中还有其他脚本，以默认命令创建虚拟环境时会默认安装pip`easy_install`等python脚本，方便使用。 当激活该虚拟环境之后，我们的shell提示符前就多了(env-django-cms)这个信息，表示当前已经进入了虚拟环境，使用的是env-django-cms. 对于不同的虚拟环境，可以使用source命令到不同的文件夹中进行切换，而删除虚拟环境比较简单，退出控制台（其实就是退出当前虚拟环境），重新打开控制台，干掉对应的虚拟环境目录就OK了。 其实virtualenv命令并不是我们本文的终点，接下来的virtualenvwrapper才是日常真正使用的virtualenv帮助程序。 virtualenvwrapper封装了虚拟环境的各种操作，不需要再使用类似source这样的命令。 1sudo pip install virtualenvwrapper 同样会自动安装几个依赖包。 安装完毕之后，编辑~/.bashrc，在文件末尾新行中添加下面一行内容： 1source /usr/local/bin/virtualenvwrapper.sh 这里说明一下，ubuntu是.bashrc，fedora/redhat/mandriva等发行版的rc文件不一定是这个。 设置好之后，exit退出控制台，重新打开控制台，以应用上面的设置，这样我们的virtualenvwrapper就可以正常工作了。 下面是几个常用命令（不需要再使用virtuelenv/source等命令了）： 功能 命令 创建虚拟环境 mkvirtualenv env-django-cms 退出当前虚拟环境 deactivate 进入或切换虚拟环境 workon env-django-cms 删除虚拟环境 rmvirtualenv env-django-cms 需要说明的几点是： virtualenvwrapper创建的虚拟环境默认会放在~/.virtualenvs目录中，并且上述操作虚拟环境的命令也与路径无关，不管你当前目录在哪里，virtualenvwrapper都会去~/.virtualenvs目录中查找相应目录。 当workon启用虚拟环境之后，使用easy_install/pip等命令时要小心，比如pip2/pip3这些在虚拟环境目录中的bin/中没有的脚本，还是会默认调用python原来的脚本，而在虚拟环境中，pip2对应的是pip-2.7（或者你的版本号），我喜欢指定版本号调用命令，所以开始的时候也犯过pip2/pip3将包安装到了python原始site-packages并提示权限不够安装终止的问题。而在bin/目录中的pip/easy_install等脚本，则是可以在任何地方直接使用的，它们的优先级高于全站脚本，不会调用python site-wide script 在虚拟环境中使用pip安装时，最好手动指定一下缓存目录，这样所有虚拟环境都会通用这个目录，不用一遍遍的下载相同的包进行安装了，比如： 1pip-2.7 install --download-cache=~/.pip2_cache psycopg2 自此，virtualenv及其帮助程序顺利搞定，接下来我们开始部署django-cms 当年就写到这里……官方文档很详细，就不重复了 William Yao2018年04月09日","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"python","slug":"python","permalink":"https://blog.williamyao.com/tags/python/"},{"name":"django","slug":"django","permalink":"https://blog.williamyao.com/tags/django/"},{"name":"virtualenv","slug":"virtualenv","permalink":"https://blog.williamyao.com/tags/virtualenv/"}]},{"title":"Ubuntu 13.10-django 1.5.1-apache 2.4.6-mod_wsgi安装部署问题详解","slug":"2013121801","date":"2013-12-18T01:57:34.000Z","updated":"2018-04-09T02:52:14.704Z","comments":true,"path":"2013/12/18/2013121801/index.html","link":"","permalink":"https://blog.williamyao.com/2013/12/18/2013121801/index.html","excerpt":"这么多年过去了，当年文章中所描述的一些问题还有小部分仍然存在，不过自从django有了骚浪贱的gunicorn加WhiteNoise组合，这些问题都不叫事儿了。时代的发展速度真的很快…… William Yao2018年04月09日 最近忙着把项目从Windows+XAMPP移植到Ubuntu，经历和解决了若干问题，由于大多数问题多数时间我们都会碰到，于是整理了这篇文章，希望能帮到遇到此类问题的朋友。","text":"这么多年过去了，当年文章中所描述的一些问题还有小部分仍然存在，不过自从django有了骚浪贱的gunicorn加WhiteNoise组合，这些问题都不叫事儿了。时代的发展速度真的很快…… William Yao2018年04月09日 最近忙着把项目从Windows+XAMPP移植到Ubuntu，经历和解决了若干问题，由于大多数问题多数时间我们都会碰到，于是整理了这篇文章，希望能帮到遇到此类问题的朋友。 安装PostgreSQL这里需要注意的是，用apt-get安装之后，需要做一系列设置： 设定postgres用户密码1sudo -u postgres psql PostgreSQL会默认在系统中创建一个postgres用户作为数据库管理员，上面命令就是用postgres用户身份执行psql 进入之后，输入ALTER USER postgres WITH PASSWORD &#39;postgres&#39;;为数据库postgres用户设定密码，结束后输入\\q退出psql 然后用下面命令清除系统中postgres用户的默认随机密码并重新指定密码 12sudo passwd -d postgressudo -u postgres passwd 这里容易弄混的地方是，数据库和系统中都各存在一个postgres用户，这两个用户不是一回事。 修改 PostgreSQL 默认配置编辑/etc/postgresql/9.1/main/postgresql.conf，这是配置的主文件，如果你的数据库和应用在不同的服务器，那么要设定数据库服务器对外可以被访问： 将listen_addresses = &#39;localhost&#39;修改为listen_addresses = &#39;*&#39; 编辑/etc/postgresql/9.1/main/pg_hba.conf，这个文件用来定义可以访问的用户网络地址段，一般做如下修改： 将第一行local all postgres peer修改为local all postgres trust，不然你无法用postgres登录 然后将host all all 127.0.0.1/32 md5修改为host all all 127.0.0.1/32 trust 创建工作用户work1psql -U postgres -h 127.0.0.1 1create user \"work\" with password \"123456\" nocreatedb; 注意这里用的都是双引号，以区分大小写。 以后就可以为这个用户创建数据库进行工作了： 1create database \"testdb\" with owner=\"work\"; 安装pgadmin31sudo apt-get install pgadmin3 使用psql恢复从前pg_dump备份的数据库先用pagadmin创建一个新的数据库，所有者选择刚才创建的用户work，模板使用template0，然后用下面命令进行恢复： 1psql -h localhost -U work -d restored &lt; db.backup 这里要注意，日后django设定中的user必须是这里-U参数指定的用来恢复数据的用户（也就是之前的work），同时该用户也必须是数据库的所有者，不然django运行起来会没有权限访问数据表。这里用postgres用户也行，不过日后需要手动修改所有数据表的所有者，比较麻烦。 apache及mod_wsgi相关设定同样，使用apt-get安装apache和mod_wsgi后同样需要做一系列设置： 配置apache主设置文件在ubuntu中，apache 2.4.6的配置文件结构有所变化，并不以httpd.conf来进行设置，其全局设置保存在/etc/apache2/apache2.conf中，此文件按照说明进行修改即可。 需要注意一点，根目录的权限需要进行设置： 123Options Indexes FollowSymLinksAllowOverride NoneRequire all denied 修改为 123Options FollowSymLinksAllowOverride NoneRequire all granted 使根目录具有访问权限，否则之后django将无法被访问，即使单独定义了VirtualHost的DocumentRoot权限也不行。 紧接着，把下面关于/srv/目录的注释去掉，启用/srv/目录配置，在正式部署的时候django project会放到这个目录中。 修改envvars因为默认编码设置的问题，很有可能在apache/django的文件上传功能被执行时，无法转换non-ascii编码的文件名，导致上传失败，所以要在/etc/apache2/envvars中进行如下修改，将 12345## The locale used by some modules like mod_davexport LANG=C## Uncomment the following line to use the system default locale instead:#. /etc/default/localeexport LANG 中的LANG定义注释掉，添加新的定义，上面几行修改为下面的样子 1234567## The locale used by some modules like mod_dav#export LANG=C## Uncomment the following line to use the system default locale instead:#. /etc/default/locale#export LANGexport LANG='zh_CN.UTF-8'export LC_ALL='zh_CN.UTF-8' 或者在控制台中使用echo $LANG查看当前语言编码，并将返回的值原样替换上面的zh_CN.UTF-8，只要保证结尾的编码方式（这里是UTF-8）与你的django/pyhon设定的编码三者相同即可，对于中文用户，推荐上面的设定，你就不要改了。在envvars文件中还能看到如下两行： 12export APACHE_RUN_USER=www-dataexport APACHE_RUN_GROUP=www-data 这里定义的是apache默认运行的用户及组，记下来后面还要用到。 修改虚拟机设定在ubuntu的apache版本中，不同的虚拟机被单独定义在不同的conf文件中，并由apache2.conf统一聚合，在/etc/apache2目录中，sites-available中存放着每个虚拟机的实际设定文件，sites-enabled中保存sites-available中部分conf的link，这就是说，真正需要修改的是sites-available目录中的文件。 进入sites-available目录，默认可以看到000-default.conf，这是安装时生成的默认配置文件，里面的初始信息非常简单，如果你的默认虚拟机也需要使用来挂载其他应用的话，可以在这个文件当中进行设置，这里我们不动。 还是在sites-available目录中，这次我们新建一个承载django运行wsgi，并服务静态文件的虚拟机： 1touch django.conf 用文本编辑器（nano比较方便）编辑这个文件： 以我的项目为例，django.conf全文是这样的： 123456789101112131415161718192021222324ServerAdmin monoyo@gmail.comServerName drmsDocumentroot /srv/drms/# mod_wsgi settingsWSGIDaemonProcess drms user=www-data group=www-data threads=25 python-path=/srv/drms:/usr/local/lib/python2.7/site-packages:/usr/local/lib/python2.7/dist-packagesWSGIProcessGroup drmsWSGIScriptAlias /drms /srv/drms/drms/wsgi.py# Static file alias so static files can be referenced by /static/Alias /drms_static/ /var/www/drms_static/# Static files permissions# Used for serving static files.Order deny,allowAllow from all# Project wsgi permissions# Used for serving django pages.Order deny,allowAllow from all 将上面所有/srv/drms/替换为你的django项目的project目录（就是含有manage.py的目录），将/srv/drms/drms/替换为你的默认app目录（含有wsgi.py的目录）。注意/drms和/drms/drms的区别，前一个指project，后一个指app. 注意WSGIDaemonProcess这一行的定义至关重要，在/etc/apache2/envvars中定义的用户和组（www-data）就需要用在这里，这一行的意思是，使用daemon方式执行wsgi，因为wsgi定义在virtualhost中，必须使用daemon方式，其次运行wsgi的用户名/组为www-data。经常有人遇到django wsgi不运行、目录无法访问、文件上传没权限等问题都是因为这里。 注意WSGIScriptAlias定义的内容，这是用户的访问路径，比如在这里我的定义的意思，就是告诉apache，用户会通过http://www.example.com/drms这种路径（域名无关）来访问WSGI，所以，如果你同时定义了/var/www或者相同主机中的其他对外公开的访问路径，必须保证其他地方没有目录使用相同的访问路径，意思就是说如果/var/www是根目录，里面恰好也有个drms，那么访问http://www.example.com/drms就冲突了，则这里的WSGI就不会被运行，只会静态访问/var/www/drms/ 注意别名/drms_static/和目录/var/www/drms_static/的定义，这一部分就是设置使用一个VirtualHost同时承载WSGI和静态文件，虽然django官方推荐使用不同的服务器承载静态文件，比如lighttpd/nginx，不过对于小项目来说，一个apache就足够了。 将你的django项目的静态文件cp到这个目录里面吧，同时留意一下这里的设置，在随后的django配置章节中，我会分享一个小技巧，利用DEBUG开关切换开发时的static目录与部署后的static目录。 其他的行应该不用解释，大致都能看懂吧，按照你的路径修改。 修改完毕django.conf后，使用apache提供的快捷程序a2ensite直接将django.conf链接到sites-enabled目录中： 1sudo a2ensite django.conf 如果提示找不到a2ensite命令，就find一下： 1sudo find / -name a2ensite 这个命令的作用，其实就是帮你把sites-available/django.conf链接到sites-enabled/django.conf 顺便检查一下sites-enabled/里面有没有000-default.conf，如果有就表示000-default.conf这个虚拟主机也启用了。 普遍一提，撤销某个虚拟机挂载非常简单，只需要删除sites-enabled/里面对应的conf，然后sudo service apache2 reload就搞定。 在文件系统中修改相应目录的权限有几个目录的权限需要修改，虽然在VirtualHost中定义了部分目录的权限，但那只是定义了apache为访问者设定的权限，和文件系统权限是两回事。 1chmod 755 -R /var/www/drms_static/ 上面设定了静态文件目录以及内容的权限为755（就是普通权限），避免无法读取的情况出现。 12chgrp -R www-data /var/www/drms_static/uploads/chmod -R g+w /var/www/drms_static/uploads/ 上面两行是将uploads及内容的所有者组循环修改为www-data，并加上写权限，因为我的django设定中将uploads指定为ckeditor和FileUpload上传文件的地方，没有上面两句，会遇到OS Permission Denied这类问题。同时chgrp命令中的www-data、apache WSGI的执行用户组（django.conf）、apache envvars里面的用户组这三个地方要保持一致。 需要说明一下，不管是开发时还是部署时，我们都使用apache提供静态文件访问服务，不使用开发服务器的静态文件管理功能，这样可以最大限度的避免django项目设定内容的混乱，可以更方便的从开发模式进入部署模式。 到这里，PostgreSQL/Apache/mod_wsgi/django相关的操作就进行完毕了，紧接着我们开始修改django的设置文件以匹配上面全新的开发、运行环境。 django相关设定留心的朋友应该能在前两节的设定中看出来，我的django project目录在/home/william/Projects/python/2.7/drms/，因为是从windows平台迁移过来，并且启用WSGI，所以要对settings.py进行一些修改，同时也有一些设定的小技巧与大家分享。 例如我的项目，编辑/home/william/Projects/python2.7/drms/drms/settings.py，将DATABASES[&#39;default&#39;][&#39;ENGINE&#39;]设置为django.db.backends.postgresql_psycopg2，注意DATABASES[&#39;default&#39;][&#39;HOST&#39;]的设定与windows平台可以不同了，这里填写localhost或ip地址或域名，则通过TCP方式与PostgreSQL建立连接，在Linux中，这里还可以留空，则通过unix sockets建立连接。当然，如果数据库在不同的服务器上，还是TCP方式方便一些。 如果你的本机只有一个ip，可以使用下面的设定自动匹配地址： 12345LOCAL_IP = socket.gethostbyname(socket.gethostname())if DEBUG:LOCAL_URL = 'http://' + LOCAL_IP + ':8000/'else:LOCAL_URL = 'http://' + LOCAL_IP + '/drms/' 这里利用了DEBUG开关，切换是runserver还是apache wsgi. 如果发现静态文件无法访问，说明你的/etc/hosts对ip映射做了修改，或者系统有两个以上ip地址。 那么只有手动指定网址了。对于本机开发，可以将LOCAL_IP直接设定为localhost，在ubuntu中，/etc/hosts会定义一个127.0.1.1这样一个本地环回，用gethostbyname()可能会读取到这个地址，如果apache中没有指定访问这个ip，则有可能读取不出静态文件。 注意开发模式时候的:8000，这里假定我们采用默认运行方式，就是直接manage.py runserver不给定端口号，那么默认运行的就是8000端口。 接下来的两行指定静态文件路径： 12STATIC_ROOT = '/var/www/drms_static/'STATIC_URL = 'http://' + LOCAL_IP + '/drms_static/' 就像上面提到的，不管开发还是部署，我们都用apache对静态文件提供访问服务。 以上就是需要注意的地方，其他settings超出了本文范围，就不逐一介绍了。 其他注意事项对于开发模式与部署模式之间的切换需要注意一点，开发模式的目录在/home/william/Projects/python/2.7/drms，而部署的时候，我们需要把drms project目录拷贝到/srv/中，不推荐用链接将drms ln到/srv/，不管apache是否启用FollowSymLink选项，本身django+wsgi的组合牵扯的东西就太多，光文件访问权限的嵌套问题就不容易解决。","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"apache","slug":"apache","permalink":"https://blog.williamyao.com/tags/apache/"},{"name":"django","slug":"django","permalink":"https://blog.williamyao.com/tags/django/"},{"name":"ubuntu","slug":"ubuntu","permalink":"https://blog.williamyao.com/tags/ubuntu/"},{"name":"wsgi","slug":"wsgi","permalink":"https://blog.williamyao.com/tags/wsgi/"}]},{"title":"在Ubuntu上安装Calibre","slug":"2013121701","date":"2013-12-17T01:53:34.000Z","updated":"2018-04-09T01:57:08.362Z","comments":true,"path":"2013/12/17/2013121701/index.html","link":"","permalink":"https://blog.williamyao.com/2013/12/17/2013121701/index.html","excerpt":"虽然Ubuntu软件源里面有Calibre，但是版本跟实际Current Release相差甚远，并不实际，还是用Calibre官网上的方法进行安装和升级吧。 安装和升级都只需要把下面一行复制到控制台里回车就行。","text":"虽然Ubuntu软件源里面有Calibre，但是版本跟实际Current Release相差甚远，并不实际，还是用Calibre官网上的方法进行安装和升级吧。 安装和升级都只需要把下面一行复制到控制台里回车就行。 1sudo -v &amp;&amp; wget -nv -O- https://download.calibre-ebook.com/linux-installer.py | sudo python -c \"import sys; main=lambda:sys.stderr.write('Download failed\\n'); exec(sys.stdin.read()); main()\" 开始会问你希望将Calibre安装在什么位置，一般是默认/opt/，就是直接回车。 然后就开始下载安装了。 删除软件的话，直接干掉/opt/Calibre就OK，官方说法是，可以删掉99%的文件，估计剩下的也就是个配置文件了。","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://blog.williamyao.com/tags/ubuntu/"},{"name":"calibre","slug":"calibre","permalink":"https://blog.williamyao.com/tags/calibre/"}]},{"title":"终于搞定purcell-emacs.d","slug":"2013121602","date":"2013-12-16T01:46:07.000Z","updated":"2018-04-09T14:11:24.944Z","comments":true,"path":"2013/12/16/2013121602/index.html","link":"","permalink":"https://blog.williamyao.com/2013/12/16/2013121602/index.html","excerpt":"","text":"一开始还想用自己在github上存的emacs设置，后来看了一下网上评论，都说purcell的大家都在用，于是干脆用人家的吧。 经过试用，感觉还不错，功能很全，主要通用于各种语言编程。 purcell/emacs.d 作者把安装说明也写的很详细，而且不用修改init.el，可以创建lisp/init-local.el添加自己的喜好设定。 唯一的问题，对于国内用户来说，第一次运行后自动安装编译加载那些需要的package过程太过漫长，连接melpa.milkbox.net:80简直就是一场噩梦，用无线上网卡我更新了整整一晚上。 不过还好，最终结果还是蛮不错的。","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"emacs","slug":"emacs","permalink":"https://blog.williamyao.com/tags/emacs/"}]},{"title":"解决ubuntu右上角日期时间消失的问题","slug":"2013121601","date":"2013-12-16T01:44:10.000Z","updated":"2018-04-09T01:45:05.645Z","comments":true,"path":"2013/12/16/2013121601/index.html","link":"","permalink":"https://blog.williamyao.com/2013/12/16/2013121601/index.html","excerpt":"","text":"刚刚解决了dpkg的问题，又突然发现日期时间消失了，google了一下，用下面两条命令： 12sudo apt-get autoremovesudo apt-get install gnome-panel 然后注销或重启。","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://blog.williamyao.com/tags/ubuntu/"},{"name":"gnome","slug":"gnome","permalink":"https://blog.williamyao.com/tags/gnome/"}]},{"title":"解决ubuntu中dpkg操作中断后带来的问题","slug":"2013121501","date":"2013-12-15T01:42:21.000Z","updated":"2018-04-09T01:43:46.126Z","comments":true,"path":"2013/12/15/2013121501/index.html","link":"","permalink":"https://blog.williamyao.com/2013/12/15/2013121501/index.html","excerpt":"如果由于某些原因导致apt-get或者dpkg操作中断，有可能造成每次安装或更新都会提示如下信息： 12提示错误E: dpkg 的操作被中断了,您必须手动执行 'sudo dpkg --configure -a' 以修复这个问题。","text":"如果由于某些原因导致apt-get或者dpkg操作中断，有可能造成每次安装或更新都会提示如下信息： 12提示错误E: dpkg 的操作被中断了,您必须手动执行 'sudo dpkg --configure -a' 以修复这个问题。 就拿Adobe Flashplayer Plugin为例，国内用户一般更新这个东西都会遇到问题，就是怎么也连不上服务器，apt-get或dpkg就一直卡在那里不动。 针对这个问题，综合网上各种解决汇总了一下，按顺序执行基本可以解决所有上述问题： 123456sudo rm /var/lib/dpkg/updates/*sudo rm /var/cache/apt/archives/locksudo rm /var/lib/dpkg/locksudo dpkg -r flashplugin-installersudo dpkg --purge flashplugin-installersudo apt-get update 一般遇到这类问题都是因为Flash，所以还是推荐直接从官网下载安装。","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://blog.williamyao.com/tags/ubuntu/"},{"name":"dpkg","slug":"dpkg","permalink":"https://blog.williamyao.com/tags/dpkg/"}]},{"title":"复活","slug":"2012122301","date":"2012-12-23T01:41:26.000Z","updated":"2018-04-09T01:41:50.558Z","comments":true,"path":"2012/12/23/2012122301/index.html","link":"","permalink":"https://blog.williamyao.com/2012/12/23/2012122301/index.html","excerpt":"","text":"更新PayPal信息，服务器复活。 暂时不想更新东西。","categories":[{"name":"Whispers","slug":"Whispers","permalink":"https://blog.williamyao.com/categories/Whispers/"}],"tags":[{"name":"life","slug":"life","permalink":"https://blog.williamyao.com/tags/life/"}]},{"title":"收拾旧河山，活出味道","slug":"2012081201","date":"2012-08-12T01:40:22.000Z","updated":"2018-04-09T01:40:54.227Z","comments":true,"path":"2012/08/12/2012081201/index.html","link":"","permalink":"https://blog.williamyao.com/2012/08/12/2012081201/index.html","excerpt":"","text":"一万年没有更新博客了。 该好好收拾一下了，不能总微博空间的，有点乱。 一个人静静，挺好的。","categories":[{"name":"Whispers","slug":"Whispers","permalink":"https://blog.williamyao.com/categories/Whispers/"}],"tags":[{"name":"life","slug":"life","permalink":"https://blog.williamyao.com/tags/life/"}]},{"title":"升级到Fedora 17","slug":"2012062001","date":"2012-06-20T01:12:19.000Z","updated":"2018-04-09T01:33:46.055Z","comments":true,"path":"2012/06/20/2012062001/index.html","link":"","permalink":"https://blog.williamyao.com/2012/06/20/2012062001/index.html","excerpt":"我的客户端升级到了Fedora 17，感觉还是不错的，特别是这台古董电脑，用LXDE速度勉强可以，OpenBox看不出效果，一切皆因这台电脑倒霉的S3 UniChrome Pro显示芯片！ 在这里收集一下与F17有关的有用的东西。","text":"我的客户端升级到了Fedora 17，感觉还是不错的，特别是这台古董电脑，用LXDE速度勉强可以，OpenBox看不出效果，一切皆因这台电脑倒霉的S3 UniChrome Pro显示芯片！ 在这里收集一下与F17有关的有用的东西。 为yum添加网易源 访问mirrors.163.com看帮助安装 激活RPM Fusion，为yum添加回来那些被Fedora Project排除在外的软件包源 这个相当有用，比如VLC播放器，就被Fedora Project给Pass了，RPM Fusion源里面就有，还有MPlayer等等好东东。 使用Firefox访问rpmfusion参照说明直接用Firefox安装，很方便。","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://blog.williamyao.com/tags/linux/"},{"name":"fedora","slug":"fedora","permalink":"https://blog.williamyao.com/tags/fedora/"}]},{"title":"2012年北京市交管局对摩托车和摩托车驾驶证的一些问题答复","slug":"2012060901","date":"2012-06-09T00:35:47.000Z","updated":"2018-04-09T01:07:51.349Z","comments":true,"path":"2012/06/09/2012060901/index.html","link":"","permalink":"https://blog.williamyao.com/2012/06/09/2012060901/index.html","excerpt":"这是2012年的规定，现在已经有了很多变化，留做归档日后备查。 William Yao2018年04月09日","text":"这是2012年的规定，现在已经有了很多变化，留做归档日后备查。 William Yao2018年04月09日 摩托车是否需要受尾号限行措施的限制？摩托车需受“工作日高峰时段区域限行”措施的限制。 京A和B外省市摩托车号牌的摩托车，想知道哪些路段限行？本市关于摩托车的禁限规定具体如下： 长安街（新兴桥至国贸桥），7时至20时，禁止摩托车通行； 二、三、四、五环主路，全天禁止摩托车通行； 四环路（不含辅路）以内道路，禁止京B号牌摩托车和外省市摩托车行驶。 关于其他路段对摩托车的禁限措施，请以交通标志为准。 摩托车报废年限基本就是8-10年，延缓报废3年，具体使用年限由省、自治区、直辖市人民政府有关部门在以上使用年限内，结合本地实际情况确定； 摩托车多长时间检验一次？摩托车4年以内每2年检验1次；达到和超过4年的，每年检验1次。 申请摩托车驾驶证驾驶证年龄有限制吗？根据公安部《机动车驾驶证申领和使用规定》，申请、轻便摩托车准驾车型的，年龄在18周岁以上、70周岁以下；申请、普通三轮摩托车、普通二轮摩托车的，年龄在18周岁以上、60周岁以下； 申领完汽车驾驶证后多久能增驾摩托车驾驶证？申请增加摩托车准驾车型的，已取得汽车驾驶证一年以上，并在申请前一个记分周期内没有满分记录即可。扣12分的必须满一年后增驾，驾驶证有违章的必须先处理完违章才能办理增驾 摩托车过户京B号牌摩托车不能过户到身份证明记载的住所地址为城六区的（东城、西城、朝阳、海淀、丰台、石景山），只能过户到身份证明记载的住所地址在远郊区县的。《城区的可以用公户或者借远郊区县的个人户》 摩托车过户到花乡旧机动车交易市场办理，地址是；南四环西路123号，办理过户不懂或者嫌麻烦没有关系，市场有黄马甲代办人员，代办费50元 本市可以检验摩托车的检测场都有哪些？全市可进行“普通摩托车”上线检验的检测场有：1、京朝分所：盛华机动车检测场、通州机动车检测场；2、京海分所：北京市学院路机动车检测场；3、京南分 所：北京市良乡机动车检测场、北京富多鑫天德机动检测有限公司；4、京北分所：北京北方机动车检测场；5、京顺分所：京顺检测场、空港方兴检测场、怀柔检 测场、平谷检测场、平谷凯超检测场、密云检测场、北京望京北机动车检测场。 准驾车型为D的驾驶证，可以驾驶哪些车型准驾车型为D的驾驶证可以驾驶发动机排量大于50ml或者最大设计车速大于50km/h的三轮摩托车及E、F对应的准驾车型。驾车前，请您先与机动车行驶证上的核定车型相对应，一致则可以驾驶，否则不能驾驶 驾驶摩托车不戴头盔如何处罚？据《北京市实施〈中华人民共和国道路交通安全法〉办法》第89条第2项之规定，驾驶摩托车未按规定佩戴安全头盔的，处以50元罚款，记2分。 我想变更车身颜色，应该办理哪些手续？机动车所有人或者代理人应当在车身颜色变更后十日内按下列规定提交资料到我市任意车辆管理所分所办理变更登记并交验车辆。但是需要注意不能变成特种车的样子，比如救护车、警车、工程抢险车等。 机动车所有人的身份证明（本市居民的身份证明，是《居民身份证》或者《临时居民身份证》；外省市在本市暂住人员的身份证明，是《居民身份证》或者《临时居民身份证》，以及公安机关核发的居住、暂住证明）原件和正反面复印件（A4）； 机动车登记证书原件； 机动车行驶证原件。其中机动车所有人身份证明记载的住所地址在远郊区县的京B号牌摩托车、三轮汽车、低速货车和轮式自行机械任选远郊车管站办理。 外国人在京申请摩托车驾驶证《老外估计学习摩托证件的不是很多就不多介绍》未取得过机动车驾驶证的境外人员，符合下列条件的可申请机动车驾驶证，在东方时尚驾校、丰顺驾校盛华驾校、老山驾校（只限摩托车）报名 境外人员（外国人、中国香港、澳门、台湾地区居民和中国华侨）在车辆管理所涉外管理科办理。 名下有一辆未报废的摩托车，对新车上牌有影响吗？若您名下有未报废的摩托车，则不能办理新车上牌手续。","categories":[{"name":"Whispers","slug":"Whispers","permalink":"https://blog.williamyao.com/categories/Whispers/"}],"tags":[{"name":"life","slug":"life","permalink":"https://blog.williamyao.com/tags/life/"},{"name":"motor","slug":"motor","permalink":"https://blog.williamyao.com/tags/motor/"}]},{"title":"踏上漫长的CCNP之路","slug":"2012052501","date":"2012-05-25T00:33:50.000Z","updated":"2018-04-09T00:35:05.043Z","comments":true,"path":"2012/05/25/2012052501/index.html","link":"","permalink":"https://blog.williamyao.com/2012/05/25/2012052501/index.html","excerpt":"","text":"不久前买了一套6本的CCNP官方教程中文版，又从网上Down了一套6本英文PDF版，打算入门CCNP，结果才看了两天，就发现，当年的基础知识有不少印象都模糊了，只好又趁着周末去买了三本CCNA的，打算先预热一下基础知识，然后再上CCNP，毕竟跨专业很多年了，重新捡起来也不是那么顺手。 总觉得目前的工作环境里有大把的时间可以利用起来，快三十的男人了，再不把时间充分利用在学习硬东西上，恐怕将来要吃亏。 因为每天都在写日记，博客真的荒废了很久了，希望能尽快把新加坡这个新服务器完全弄起来，内容没有不怕，服务总得全功能，不然也对不起咱的资金投入……","categories":[{"name":"Whispers","slug":"Whispers","permalink":"https://blog.williamyao.com/categories/Whispers/"}],"tags":[{"name":"ccnp","slug":"ccnp","permalink":"https://blog.williamyao.com/tags/ccnp/"}]},{"title":"服务器迁移成功","slug":"2012051901","date":"2012-05-19T00:31:49.000Z","updated":"2018-04-09T00:33:27.169Z","comments":true,"path":"2012/05/19/2012051901/index.html","link":"","permalink":"https://blog.williamyao.com/2012/05/19/2012051901/index.html","excerpt":"","text":"今天把服务器从美国迁移到了新加坡，访问速度有了明显提升，而且从CentOS 5 32-bit服务器升级到了CentOS 6 64-bit，处理速度也有了明显进步，加上WordPress的memcached服务原生支持，现在的博客应该可以承载足够数量的访问压力了。 高兴，庆贺一下。 顺便准备上线Django 1.4的项目。 WebFaction的主机，SSH管道直接维护，方便的很！只要有点Linux基础，可以为所欲为！","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"wordpress","slug":"wordpress","permalink":"https://blog.williamyao.com/tags/wordpress/"},{"name":"centos","slug":"centos","permalink":"https://blog.williamyao.com/tags/centos/"}]},{"title":"Papers 2过期了，尝试用iTunes管理PDF","slug":"2011082802","date":"2011-08-28T00:29:38.000Z","updated":"2018-04-09T00:31:03.713Z","comments":true,"path":"2011/08/28/2011082802/index.html","link":"","permalink":"https://blog.williamyao.com/2011/08/28/2011082802/index.html","excerpt":"今天犯贱，升级了本来是K过的Papers 2，结果就提示试用期已过。","text":"今天犯贱，升级了本来是K过的Papers 2，结果就提示试用期已过。 原来所有PDF都让我丢进了Papers，没办法，只能想别的办法管理我数量本就比较庞大的PDF文档库。 还好，因为多半时间都是在ios平台上阅读，这样用iTunes管理PDF，对我来说也就足够了。 于是开始尝试向iTunes里面添加PDF。 说起来，虽然功能够用，而且也就是单纯的分类管理，并且不带标签功能，但一个“类型”已经足够了，就是觉得“书籍”分类视图里面的Author对应详细信息里面的Artist，感觉很怪。 不管怎么说，Papers对于我等非专业搞论文的人们来说，还是有点大材小用，而且最重要的，79美金的正版售价，我靠，我宁愿用回K过的版本，然后剩下600块钱，干什么不行！","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"pdf","slug":"pdf","permalink":"https://blog.williamyao.com/tags/pdf/"},{"name":"papers","slug":"papers","permalink":"https://blog.williamyao.com/tags/papers/"},{"name":"itunes","slug":"itunes","permalink":"https://blog.williamyao.com/tags/itunes/"}]},{"title":"Mac下转换bin/cue到ISO","slug":"2011082801","date":"2011-08-28T00:27:11.000Z","updated":"2018-04-09T00:31:12.888Z","comments":true,"path":"2011/08/28/2011082801/index.html","link":"","permalink":"https://blog.williamyao.com/2011/08/28/2011082801/index.html","excerpt":"今天发现了一个好玩的小工具，将bin/cue转换为ISO，要知道bin/cue在Mac平台上可是不被原生支持的。 还是老样子，这个叫做bchunk的可爱小工具还是Unix/Linux系列工具，老办法，用MacPorts安装。","text":"今天发现了一个好玩的小工具，将bin/cue转换为ISO，要知道bin/cue在Mac平台上可是不被原生支持的。 还是老样子，这个叫做bchunk的可爱小工具还是Unix/Linux系列工具，老办法，用MacPorts安装。 首先打开Terminal（终端），然后： 12341. 升级你的port库sudo port selfupdate2. 安装bchunksudo port install bchunk OK，如果不提示什么错误的话，port已经帮你完成了所有事情，现在可以使用bchunk进行转换工作了： 1bchunk myfile.bin myfile.cue myoutputfile.iso 就这么简单。","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"mac","slug":"mac","permalink":"https://blog.williamyao.com/tags/mac/"},{"name":"cue","slug":"cue","permalink":"https://blog.williamyao.com/tags/cue/"},{"name":"iso","slug":"iso","permalink":"https://blog.williamyao.com/tags/iso/"},{"name":"convert","slug":"convert","permalink":"https://blog.williamyao.com/tags/convert/"}]},{"title":"MacPorts Changed","slug":"2011052501","date":"2011-05-25T00:24:07.000Z","updated":"2018-04-09T00:26:14.757Z","comments":true,"path":"2011/05/25/2011052501/index.html","link":"","permalink":"https://blog.williamyao.com/2011/05/25/2011052501/index.html","excerpt":"","text":"When I was dealing with Pymacs, I found python_select was gone, here’s the issue track message from MacPorts: python_select (and other standalone *_select scripts) is gone. Use sudo port select python python26 etc.","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"python","slug":"python","permalink":"https://blog.williamyao.com/tags/python/"},{"name":"macports","slug":"macports","permalink":"https://blog.williamyao.com/tags/macports/"}]},{"title":"金庸群侠传","slug":"2011030602","date":"2011-03-06T09:21:56.000Z","updated":"2018-04-04T09:22:46.180Z","comments":true,"path":"2011/03/06/2011030602/index.html","link":"","permalink":"https://blog.williamyao.com/2011/03/06/2011030602/index.html","excerpt":"","text":"这几天在拼命的玩儿金庸群侠传，就是十几年前那个让无数人感动的武侠大梦！ 因为有高手移植到了IOS平台上，所以玩儿起来更方便了。 真是觉得从那个简单又复杂的DOS年代过来的人特别容易怀旧。","categories":[{"name":"Whispers","slug":"Whispers","permalink":"https://blog.williamyao.com/categories/Whispers/"}],"tags":[{"name":"life","slug":"life","permalink":"https://blog.williamyao.com/tags/life/"},{"name":"ios","slug":"ios","permalink":"https://blog.williamyao.com/tags/ios/"}]},{"title":"更新一下博客","slug":"2011030601","date":"2011-03-06T09:19:57.000Z","updated":"2018-04-04T09:21:28.589Z","comments":true,"path":"2011/03/06/2011030601/index.html","link":"","permalink":"https://blog.williamyao.com/2011/03/06/2011030601/index.html","excerpt":"","text":"今天WordPress提示有新版本升级，赶紧升级，然后想选个主题。在选主题的过程中发现了BuddyPress这个可以把博客变成社区的插件，尝试了一下，觉得原来挺简单的博客，一下子变得复杂了。搜索了一下插件库，发现关于BuddyPress的相关插件还真不少，可以这样我觉得WordPress的路就走歪了，毕竟维基有mediawiki，论坛有phpBB，现在这世界第一大开源博客系统WordPress，让一个小小的BuddyPress插件给搞的人不像人鬼不像鬼。总之个人不喜欢。 今天换了一个博客风格，虽然看起来有点乱，不过总是需要尝试一下新事物的，毕竟好久没更新文章了，就先从“界面”开始吧。","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"wordpress","slug":"wordpress","permalink":"https://blog.williamyao.com/tags/wordpress/"},{"name":"php","slug":"php","permalink":"https://blog.williamyao.com/tags/php/"}]},{"title":"用优盘安装Ubuntu 10.10","slug":"2010110701","date":"2010-11-07T09:04:27.000Z","updated":"2018-04-04T09:12:52.515Z","comments":true,"path":"2010/11/07/2010110701/index.html","link":"","permalink":"https://blog.williamyao.com/2010/11/07/2010110701/index.html","excerpt":"这两天一直在折腾，给办公室的台式机装系统。因为从一个“莫名其妙”的地方下了个Ubuntu 10.10 DVD版的，所以那个for Windows的USB Universal Installer.exe用不了。为什么说折腾呢，这两天用手头上的工具折腾了好几遍，把优盘格了又格，用UltraISO(Windows)写入光盘镜像，USB-ZIP/ZIP+/HDD/HDD+四个模式都试过了，就是不能正常引导，不光Ubuntu这样，连之前一直保留的Fedora 13镜像都无法正常安装，郁闷之极中还是耐着性子看了官方网站上使用优盘安装的教程，之前一直不愿意看主要是因为嫌太啰嗦，这下可好，耽误功夫不说，到头来还得看人家的官方文档。没办法，先转载一下，再次表示对Ubuntu的尊敬。","text":"这两天一直在折腾，给办公室的台式机装系统。因为从一个“莫名其妙”的地方下了个Ubuntu 10.10 DVD版的，所以那个for Windows的USB Universal Installer.exe用不了。为什么说折腾呢，这两天用手头上的工具折腾了好几遍，把优盘格了又格，用UltraISO(Windows)写入光盘镜像，USB-ZIP/ZIP+/HDD/HDD+四个模式都试过了，就是不能正常引导，不光Ubuntu这样，连之前一直保留的Fedora 13镜像都无法正常安装，郁闷之极中还是耐着性子看了官方网站上使用优盘安装的教程，之前一直不愿意看主要是因为嫌太啰嗦，这下可好，耽误功夫不说，到头来还得看人家的官方文档。没办法，先转载一下，再次表示对Ubuntu的尊敬。 这次直接用笔记本操作，因为是Mac，就直接贴上Mac制作Ubuntu USB Stick的教程吧。 We would encourage Mac users to download Ubuntu Desktop Edition by burning a CD for the time being. But if you would prefer to use a USB, please follow the instructions below. Note: this procedure requires an .img file that you will be required to create from the .iso file you download. TIP: Drag and Drop a file from Finder to Terminal to ‘paste’ the full path without typing and risking type errors. Download the desired file Open the Terminal (in /Applications/Utilities/ or query Terminal in Spotlight) Convert the .iso file to .img using the convert option of hdiutil hdiutil convert -format UDRW -o ~/path/to/target.img ~/path/to/ubuntu.iso Note: OS X tends to put the .dmg ending on the output file automatically. Run diskutil list to get the current list of devices Insert your flash media Run diskutil list again and determine the device node assigned to your flash media (e.g. /dev/disk2) Run diskutil unmountDisk /dev/diskN (replace N with the disk number from the last command; in the previous example, N would be 2) Execute sudo dd if=/path/to/downloaded.img of=/dev/rdiskN bs=1m(replace /path/to/downloaded.img with the path where the image file is located; for example, ./ubuntu.img or ./ubuntu.dmg). Using /dev/rdisk instead of /dev/disk may be faster. If you see the error dd: Invalid number &#39;1m&#39;, you are using GNU dd. Use the same command but replace bs=1m with bs=1M. If you see the error dd: /dev/diskN: Resource busy, make sure the disk is not in use. Start the ‘Disk Utility.app’ and unmount (don’t eject) the drive. Run diskutil eject/dev/diskN and remove your flash media when the command completes","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://blog.williamyao.com/tags/linux/"},{"name":"ubuntu","slug":"ubuntu","permalink":"https://blog.williamyao.com/tags/ubuntu/"},{"name":"usb","slug":"usb","permalink":"https://blog.williamyao.com/tags/usb/"},{"name":"diskutil","slug":"diskutil","permalink":"https://blog.williamyao.com/tags/diskutil/"}]},{"title":"方便而又强大：本地Git操作完全指南","slug":"2010072102","date":"2010-07-21T08:40:49.000Z","updated":"2018-04-04T08:49:34.353Z","comments":true,"path":"2010/07/21/2010072102/index.html","link":"","permalink":"https://blog.williamyao.com/2010/07/21/2010072102/index.html","excerpt":"正在构思这篇新的文章，介绍如何在抛开服务器、帐户、SSH、读写权限等等干扰，在本地相对安全的实现一个干净清洁的 Git 使用环境。 先简单记录一下实际过程，有时间再进行细节的补充。","text":"正在构思这篇新的文章，介绍如何在抛开服务器、帐户、SSH、读写权限等等干扰，在本地相对安全的实现一个干净清洁的 Git 使用环境。 先简单记录一下实际过程，有时间再进行细节的补充。 安装 Git具体步骤请参考我的另外一篇文章：《从 Emacs 到 GitHub》 生成本地一个纯净的Git仓库因为本文介绍的Git使用环境是抛开了一切分布式服务器环境，单纯本地使用，为了尽可能避免仓库损坏带来不可挽回的损失，也为了达到相对安全的使用环境，我在实例环境中是这样进行描述的： Git的共享仓库，都放在使用TrueCrypt加密后的虚拟分区中： 1/Volumes/&quot;TrueCrypt Volume&quot;/Git 而TrueCrypt的虚拟磁盘镜像文件存储在移动硬盘上。 当然，如果没有加密需要，可以将共享仓库直接放在移动硬盘中，比如： 1/mnt/projects/Git 实例中，当前项目为Diary，存放在下边位置： 1~/Projects/Diary Diary项目中仅有一个文件：README 介绍了本文实例中的规则之后，我们开始生成纯净Git仓库的具体步骤： 首先进入Diary项目目录，将该目录初始化为Git仓库，并将该项目目录中所有文件加入Git监控（其实就README一个文件），然后进行第一次提交操作： 1234cd ~/Projects/Diarygit initgit add *git commit -m \"The first commit of Project: Diary\" 这样，Diary项目已经是一个带有Git版本控制的目录了，并且该仓库已经进行了第一次成功的提交。 接下来，利用这个已经变成带有Git版本控制功能的Diary项目目录，生成一个纯净的不带任何项目文件，只有.git目录的Git仓库： 12cd ~/Projectsgit clone --bare Diary Diary.git 然后，将该纯净仓库复制到我们的加密虚拟磁盘中： 12mkdir /Volumes/\"TrueCrypt Volumes\"/Gitcp ~/Projects/Diary.git /Volumes/\"TrueCrypt Volume\"/Git/ 这样，我们Diary项目的原始纯净仓库，就已经被安全的保护在了TrueCrypt虚拟磁盘中的Git目录中了。 接下来，也是最后一步，删掉原来的Diary项目，重新从纯净仓库中clone出新的副本： 123cd ~/Projectsrm -f -r Diarygit clone file:///Volumes/\"TrueCrypt Volume\"/Git/Diary.git 大功告成，目前的项目状态就是： 当前工作副本是~/Projects/Diary，原始仓库是/Volumes/&quot;TrueCrypt Volume&quot;/Git/，当你愉快的工作了一个星期，进行了若干次commit提交操作，到了周末需要备份项目的时候（虽然一个星期备份一次是很不好的习惯，最好一天一次），只需要挂载上TrueCrypt分区，然后： 123cd ~/Projects/Diarygit commit -m \"Last commit and then push\"git push 你一周的辛苦工作，就已经被推送（push）到TrueCrypt分区中位于Git/Diary.git的原始仓库中去了。 当然，上边删除Diary原始目录并重新clone，仅仅是为了方便快捷，和作为说明来用，另外一个可能会因为Diary中文件被更改而被Git拒绝推送的操作是： 123456cd ~/Projects/Diarygit remote add origin file:///Volumes/\"TrueCrypt Volume\"/Git/Diary.gitgit commit -m \"Last commit and then push\"git push origin master或者git push","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"mac","slug":"mac","permalink":"https://blog.williamyao.com/tags/mac/"},{"name":"emacs","slug":"emacs","permalink":"https://blog.williamyao.com/tags/emacs/"},{"name":"git","slug":"git","permalink":"https://blog.williamyao.com/tags/git/"}]},{"title":"从Emacs到Github","slug":"2010072101","date":"2010-07-21T08:00:34.000Z","updated":"2018-04-04T08:43:06.977Z","comments":true,"path":"2010/07/21/2010072101/index.html","link":"","permalink":"https://blog.williamyao.com/2010/07/21/2010072101/index.html","excerpt":"本文详细说明如何在Mac OS X中利用emacs通过git分布式版本控制系统利用GitHub.com的免费服务操作你的开源项目。","text":"本文详细说明如何在Mac OS X中利用emacs通过git分布式版本控制系统利用GitHub.com的免费服务操作你的开源项目。 环境要求 system: Mac OS X 10.6.4 emacs: GNU Emacs 23.2.1 (x86_64-apple-darwin, NS apple-appkit-1038.29) git: git-core 1.7.1.1_1+bash_completion+doc+gitweb+svn 如果没有上面要求的内容，不要紧，我们从头开始。 环境搭建系统是Mac OS X平台，其他系统可以参考相应文档，不过除了各个软件的平台版本不同以外，其他应该都一样。 好的，让我们开始吧。 安装这个阶段，我会带领大家准备好一切所需要的东西。 系统打补丁 当然，这一步不是必须的，虽然第一步就是可选操作，而且对于我们后续的操作几乎没有影响，不过让系统保持最新版本，对于我们这种Coder类型的偏执狂们来说，应该会让心情好一些吧。 具体操作，苹果系统：点左上角的“苹果”，然后Software Update… 准备好GNU Emacs 对于苹果平台的Emacs来说，其实如果安装的时候就选择了Emacs，那么自带的版本是GNU Emacs 22.1.1 (mac-apple-darwin)，这显然与最新版本相去甚远，继续保持我们版本最新的偏执原则。 这里就选择GNU那帮偏执狂们的官方版本吧： GNU Emacs 我们Mac平台有几种版本，个人认为下面这个官方版本的最纯净Mac编译版本是最好的，版本更新也几乎与GNU官方同步，而且任何方面都忠实于GNU官方相应版本。什么叫偏执狂精神，这应该是很好的体现吧。网站地址如下： GNU Emacs for Mac 当然，还有很多其他版本的Mac平台Emacs，比如Aqua Emacs、Cocoa Emacs等等，当然可以直接编译官方原始版本，随你喜欢的安装吧。 未完，待续。 参考Global setup123Download and install Gitgit config --global user.name \"William Yao\"git config --global user.email monoyo@gmail.com Next steps12345678mkdir Me-and-My-Wifecd Me-and-My-Wifegit inittouch READMEgit add READMEgit commit -m 'first commit'git remote add origin git@github.com:ayama/Me-and-My-Wife.gitgit push origin master Existing Git Repo?123cd existing_git_repogit remote add origin git@github.com:ayama/Me-and-My-Wife.gitgit push origin master","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"emacs","slug":"emacs","permalink":"https://blog.williamyao.com/tags/emacs/"},{"name":"macports","slug":"macports","permalink":"https://blog.williamyao.com/tags/macports/"},{"name":"git","slug":"git","permalink":"https://blog.williamyao.com/tags/git/"},{"name":"github","slug":"github","permalink":"https://blog.williamyao.com/tags/github/"}]},{"title":"nginx-python-django研究","slug":"2010071802","date":"2010-07-18T07:54:15.000Z","updated":"2018-04-04T07:59:58.127Z","comments":true,"path":"2010/07/18/2010071802/index.html","link":"","permalink":"https://blog.williamyao.com/2010/07/18/2010071802/index.html","excerpt":"今天偶然间看到一篇描写nginx的文章，才知道这个从前只是见过这个名字，从来没有想到是可以跟apache一决高下的神物！国内外使用nginx的大牌网站比比皆是，看来这人啊，真得活到老学到老，荒废个小半年，这软件行业就把我扔到九霄云外去了。赶紧趁着这个机会恶补一下吧，正好最近陷入emacs的泥潭不可自拔，就借着emacs python和github折腾一下nginx，搞个小项目吧。","text":"今天偶然间看到一篇描写nginx的文章，才知道这个从前只是见过这个名字，从来没有想到是可以跟apache一决高下的神物！国内外使用nginx的大牌网站比比皆是，看来这人啊，真得活到老学到老，荒废个小半年，这软件行业就把我扔到九霄云外去了。赶紧趁着这个机会恶补一下吧，正好最近陷入emacs的泥潭不可自拔，就借着emacs python和github折腾一下nginx，搞个小项目吧。 在Mac OS X 10.6.4里面安装nginx还是很简单的，只要你有MacPorts： 1sudo port install nginx 如果没有MacPorts，建议还是去下一个，不然手动./configure:make:make install之前那堆dependencies就把人的好心情全都折腾没了。 安装之后，port 会提示这样一条信息： 12345678############################################################ A startup item has been generated that will aid in# starting nginx with launchd. It is disabled# by default. Execute the following command to start it,# and to cause it to launch at startup:## sudo port load nginx########################################################### 意思是如果想要自动启动nginx服务，就运行上面最后一句，我不想自动启动服务，就不去设置了。 这里插上一句，对于使用MacPorts安装的，可以运行服务的进程，其相应的开启脚本都可以用下面的命令加入到LaunchDaemons中来自动运行： 1sudo launchctl load -w /Library/LaunchDaemons/SERVICE_NAME.plist 先备注一下，用MacPorts安装的python31（其他类似），其site-package在这里： 1/opt/local/Library/Frameworks/Python.framework/Versions/3.1/lib/python3.1/site-packages/ 同样，用下面的python语句也可以获得site-packages的路径： 12import sysprint sys.path 附上两篇文章： 在Centos 5.2中搭建nginx python django等等服务 设置支持django的nginx配置文件","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"mac","slug":"mac","permalink":"https://blog.williamyao.com/tags/mac/"},{"name":"python","slug":"python","permalink":"https://blog.williamyao.com/tags/python/"},{"name":"apache","slug":"apache","permalink":"https://blog.williamyao.com/tags/apache/"},{"name":"macports","slug":"macports","permalink":"https://blog.williamyao.com/tags/macports/"},{"name":"nginx","slug":"nginx","permalink":"https://blog.williamyao.com/tags/nginx/"},{"name":"server","slug":"server","permalink":"https://blog.williamyao.com/tags/server/"},{"name":"django","slug":"django","permalink":"https://blog.williamyao.com/tags/django/"},{"name":"web","slug":"web","permalink":"https://blog.williamyao.com/tags/web/"}]},{"title":"简单漂亮的云存储：CloudApp","slug":"2010071801","date":"2010-07-18T07:46:16.000Z","updated":"2018-04-04T07:51:52.824Z","comments":true,"path":"2010/07/18/2010071801/index.html","link":"","permalink":"https://blog.williamyao.com/2010/07/18/2010071801/index.html","excerpt":"","text":"今天无意中发现了一个很不错的文件共享网站，虽然只是for Mac的，但云存储体验和有趣的Mac应用程序结合，还是蛮新鲜的，而且网站自动使用cl.ly来缩短URL的长度，最让人高兴的是，在支持Aperture/iPhoto/VLC等等一系列软件的插件支持的前提下，好像我还没看到存储空间的限制。难道真是无限量存储，还真让人兴奋。 废话不多说，赶紧奉上网址，希望各位Mac Fan用的开心。 GetCloudApp.com 对了，我的帐号是monoyo@gmail.com，有兴趣的朋友可以浏览一下我共享的东西哦。 在安装之后，Mac上方小图标区域就会多出一个云彩图标，在成功配置和登陆之后，Cloud.app就已经在运行了。想共享文件的时候，只需要把文件丢到那朵云彩上面，软件就会开始工作，自动将文件上传到CloudApp中你的帐户里面。 最值得称赞的应该是被称作RainDrop的CloudApp插件，这些个小插件，可以完成诸如在Aperture中直接把照片丢到小云彩进行上传的神奇功能。 在等什么，下载Aperture等等小插件，解压、双击执行！然后，开始享受吧！","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"app","slug":"app","permalink":"https://blog.williamyao.com/tags/app/"},{"name":"cloud","slug":"cloud","permalink":"https://blog.williamyao.com/tags/cloud/"},{"name":"storage","slug":"storage","permalink":"https://blog.williamyao.com/tags/storage/"}]},{"title":"用Emacs维护WordPress","slug":"2010071001","date":"2010-07-10T07:40:35.000Z","updated":"2018-04-04T07:42:57.654Z","comments":true,"path":"2010/07/10/2010071001/index.html","link":"","permalink":"https://blog.williamyao.com/2010/07/10/2010071001/index.html","excerpt":"","text":"第一次用Emacs的weblogger/xml-rpc组合写博客，感觉很神奇。 研究了一下午的Emacs应用，渐渐的进入了这个神秘的世界，开始觉得口水直流，当然还有晕头转向。 期盼着老婆赶紧来北京找我吧，顺便也盼望一下未来的工作之余可以有更多的时间研究东西。 突然发现，emacs的Line Wrap设定，会影响到博客发布时候正文的断行边界，比如在默认情况下，emacs断行的位置，发布到博客上之后，就是一个硬回车！ 还得研究一下怎么解决这个问题！","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"emacs","slug":"emacs","permalink":"https://blog.williamyao.com/tags/emacs/"},{"name":"wordpress","slug":"wordpress","permalink":"https://blog.williamyao.com/tags/wordpress/"}]},{"title":"领你进入Emacs的神奇世界","slug":"2010070901","date":"2010-07-09T02:50:44.000Z","updated":"2018-04-04T07:43:54.551Z","comments":true,"path":"2010/07/09/2010070901/index.html","link":"","permalink":"https://blog.williamyao.com/2010/07/09/2010070901/index.html","excerpt":"本文结合具体环境，详细讲解 GNU Emacs 23.1 中配置 python-mode 的过程。","text":"本文结合具体环境，详细讲解 GNU Emacs 23.1 中配置 python-mode 的过程。 应用环境 操作系统：Mac OS X 10.6.4 Emacs 版本：GNU Emacs 23.1 for Mac OS X 配置 ~/.emacs 启动文件123456789101112131415161718192021222324;; Set load-path(add-to-list 'load-path (expand-file-name &amp;amp;quot;~/Projects/elisp/load-path&amp;amp;quot;));; Set auto-install(require 'auto-install)(setq auto-install-directory &amp;amp;quot;~/Projects/elisp/auto-install/&amp;amp;quot;);; Set python-mode(setq auto-mode-alist (cons '(&amp;amp;quot;\\\\.py$&amp;amp;quot; . python-mode) auto-mode-alist))(setq interpreter-mode-alist (cons '(&amp;amp;quot;python&amp;amp;quot; . python-mode) interpreter-mode-alist))(autoload 'python-mode &amp;amp;quot;python-mode&amp;amp;quot; &amp;amp;quot;Python editing mode.&amp;amp;quot; t);; Set Chinese Support(global-font-lock-mode t)(setq font-lock-maximum-decoration t)(set-language-environment 'Chinese-GB)(set-keyboard-coding-system 'euc-cn)(set-clipboard-coding-system 'euc-cn)(set-terminal-coding-system 'euc-cn)(set-buffer-file-coding-system 'euc-cn)(set-selection-coding-system 'euc-cn)(modify-coding-system-alist 'process &amp;amp;quot;*&amp;amp;quot; 'euc-cn)(setq default-process-coding-system '(euc-cn . euc-cn))(setq-default pathname-coding-system 'euc-cn) 新建目录~/Projects/elisp/load-path 下载 auto-install.el 和 python-mode.el 到 load-path 目录中： 12wget http://www.emacswiki.org/emacs/download/auto-install.elwget http://launchpadlibrarian.net/21781107/python-mode.el Mac OS X 不带 wget，可以使用 MacPorts 自动安装： 1sudo port install wget 启动 emacs，体验全新的 python-mode 吧！","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"mac","slug":"mac","permalink":"https://blog.williamyao.com/tags/mac/"},{"name":"emacs","slug":"emacs","permalink":"https://blog.williamyao.com/tags/emacs/"},{"name":"python","slug":"python","permalink":"https://blog.williamyao.com/tags/python/"}]},{"title":"再次折腾到两点","slug":"2010070701","date":"2010-07-07T02:48:40.000Z","updated":"2018-04-03T02:49:49.627Z","comments":true,"path":"2010/07/07/2010070701/index.html","link":"","permalink":"https://blog.williamyao.com/2010/07/07/2010070701/index.html","excerpt":"","text":"今天生日，先祝贺一下自己！老婆送的生日礼物是Zippo，看来这戒烟的问题，老婆贯彻的也不是很彻底，还需自己努力！ 明天就算是完成了这次的事情，准备九号离开西安。 在走之前，弄了一下博客和网站，论坛彻底变成简体中文界面，博客则把链接翻译了一下，为了让更多的朋友在我的博客和论坛里觉得舒服。 把域名全都绑定到了这里，然后又检查了一下几个域名和 Google Mail / Google App 的绑定，一切正常。 不行了，得睡觉了，又骗老婆说睡觉，然后起来弄到现在……看来明天要挨打了……","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"life","slug":"life","permalink":"https://blog.williamyao.com/tags/life/"}]},{"title":"凌晨两点","slug":"2010070501","date":"2010-07-05T02:46:54.000Z","updated":"2018-04-03T02:47:59.929Z","comments":true,"path":"2010/07/05/2010070501/index.html","link":"","permalink":"https://blog.williamyao.com/2010/07/05/2010070501/index.html","excerpt":"","text":"更新了一下手机系统，让我的G3跑的更快更稳定。 更新了一下博客系统，重新寻找一下写作的激情和动力。 马上就要更新生活方式，重新回到工作状态了，真希望未来孤单的日子早点儿结束。 我爱的人，和爱我的人。","categories":[{"name":"Whispers","slug":"Whispers","permalink":"https://blog.williamyao.com/categories/Whispers/"}],"tags":[{"name":"android","slug":"android","permalink":"https://blog.williamyao.com/tags/android/"}]},{"title":"用WorldPress for Android更新博客","slug":"2010052101","date":"2010-05-21T02:45:09.000Z","updated":"2018-04-03T02:46:06.798Z","comments":true,"path":"2010/05/21/2010052101/index.html","link":"","permalink":"https://blog.williamyao.com/2010/05/21/2010052101/index.html","excerpt":"","text":"最近一直在刷系统，折腾得我的G3都快挂了。转了一圈，刷了好几个版本的系统，因为G3的处理速度实在比G6, G7慢太多，最后还是换回了当时用的最长时间的1.6，还不算太卡，就先这样吧，传说中性能提升达四倍以上的2.2系统出来也没几天了，G3最后的疯狂啦。 用谷歌输入法的全尺寸键盘太不习惯，先到这里吧。","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"android","slug":"android","permalink":"https://blog.williamyao.com/tags/android/"}]},{"title":"西安，雨夜","slug":"2010033101","date":"2010-03-31T02:42:34.000Z","updated":"2018-04-03T02:44:12.067Z","comments":true,"path":"2010/03/31/2010033101/index.html","link":"","permalink":"https://blog.williamyao.com/2010/03/31/2010033101/index.html","excerpt":"","text":"喜欢天黑吗？喜欢下雨吗？ 平静，天黑就是你的快乐，清凉，下雨就是你的乐章。 黑夜又如何？冷雨又怎样？ 一样的，依然是那光与声，不同的，是不是交织幸福的线条？ 喜欢星星吗？喜欢涟漪吗？ 深邃，星星就是你的童梦，清澈，涟漪就是你的心绪。 纷乱又如何？起伏又怎样？ 一样的，仍旧是那静与动，不同的，是不是共鸣快乐的节奏？ 想起跟朋友聊过的旧与新，追寻与逝去，珍藏与遗忘，朋友说，喜欢的东西不用刻意的去寻找，无意中出现的才最值得收藏和珍惜，于是我调侃的问道，你怎么确定，你喜欢的东西的出现，是偶然的，还是必然要在你生命轨迹中留下深深一道痕迹的呢？朋友的回答倒是言简意赅，该是你的终究会来，不该你的找也没用。我笑朋友宿命论，朋友笑我心太累。 生命太过复杂，单纯容易受伤，我想说，笑着抖掉裤腿上泥水的人，不是头脑简单的满不在乎，而是心中装得下任何东西的深邃与沉着，可这世间，终有几人能在泥泞的路上依然保持微笑呢？ 朋友的想法比较危险，有点梦幻，也许你在用真心去寻找、去发掘、去珍惜的时候，是最容易受到伤害的。也许收藏和珍惜并不是像书中说的那么严肃、那么正式、那么坚持不屑和不可动摇，珍贵的并不是事物本身，而是它能带给你快乐的时间，有些东西让你笑过，就不再有意义，而有些东西，如果失去了，会让你哭泣。 在不被伤害的时候用真心找到快乐，也许才是真正的幸福吧。发现的眼睛，在过去一段时间之后，还是那同一双眼睛吗？真的只有放在别人家的柜子里，才能看到原来那闪光的东西，也曾经属于自己吗？遇到的、捡到的、不期而至的，也许能够让你快乐，而你真的愿意用真心去试探吗？ 朋友，不要受伤，用尽全力保护自己，也保护你爱的人和爱你的人，也许会刺痛人心的，并不只有寂寞的微笑。 幸福，浩瀚的银河都在衬托你的微笑，快乐，漫天的飞雨都在装点你的世界。 广袤又如何？磅礴又怎样？ 一样的，仍旧是那天和地，不同的，是不是天地之间的你我？","categories":[{"name":"Whispers","slug":"Whispers","permalink":"https://blog.williamyao.com/categories/Whispers/"}],"tags":[{"name":"life","slug":"life","permalink":"https://blog.williamyao.com/tags/life/"}]},{"title":"我的北欧情节","slug":"2010032001","date":"2010-03-20T02:38:01.000Z","updated":"2018-04-03T02:40:18.779Z","comments":true,"path":"2010/03/20/2010032001/index.html","link":"","permalink":"https://blog.williamyao.com/2010/03/20/2010032001/index.html","excerpt":"今天上午上课，教员谈到了北欧，突然就勾起了我的北欧情节，一直梦寐以求，这辈子一定要去的地方：挪威！","text":"今天上午上课，教员谈到了北欧，突然就勾起了我的北欧情节，一直梦寐以求，这辈子一定要去的地方：挪威！ 人的思想有的时候会像洪水泛滥一样一发不可收拾，教员一个“北欧”，我就维基百科了整整一上午，在研究挪威的方方面面，自己陶醉在对北欧风景、人文、神话等等的各种色彩之中不能自拔。 突然冒出个想法，认识挪威，要从她的语言开始，于是决定先去搞本儿标准挪威语/新挪威语教材看看，也许我性格中“知难而退”的“优秀品质”能让我这股子热劲儿赶快过去。 突然想到，也许我当初的北欧情节，应该是来源于小时候看过的一本书（应该是我完整看完的第一本书吧）：《骑鹅旅行记》，里边描绘的田园风光和自然景色，占据了我儿时幻想的很大一部分空间。 晚上跟班里几个人商量过了，明天去兵马俑，得早睡觉了。 从兵马俑回来，就去买书去！","categories":[{"name":"Whispers","slug":"Whispers","permalink":"https://blog.williamyao.com/categories/Whispers/"}],"tags":[{"name":"europe","slug":"europe","permalink":"https://blog.williamyao.com/tags/europe/"},{"name":"norway","slug":"norway","permalink":"https://blog.williamyao.com/tags/norway/"}]},{"title":"重新整理Flickr上的照片","slug":"2009080401","date":"2009-08-04T02:17:07.000Z","updated":"2018-04-03T03:02:39.489Z","comments":true,"path":"2009/08/04/2009080401/index.html","link":"","permalink":"https://blog.williamyao.com/2009/08/04/2009080401/index.html","excerpt":"今天算了一下，把Flickr照片库的照片清空的次数是五次！为什么要这么劳烦呢？因为原来上传的照片都是没有经过整理的，有什么就统统上去了，只是给Set或者单张照片设定权限，让不通的人看到，这么做虽然简单快速，但结果就是只把Flickr这个强大的社区当成了网络相册，简单的存储照片。今天用一天的时间把Flickr的高级功能又详细的研究了一下，包括Group/Organizer/Discuss/Post Blog等等统统搞明白了。","text":"今天算了一下，把Flickr照片库的照片清空的次数是五次！为什么要这么劳烦呢？因为原来上传的照片都是没有经过整理的，有什么就统统上去了，只是给Set或者单张照片设定权限，让不通的人看到，这么做虽然简单快速，但结果就是只把Flickr这个强大的社区当成了网络相册，简单的存储照片。今天用一天的时间把Flickr的高级功能又详细的研究了一下，包括Group/Organizer/Discuss/Post Blog等等统统搞明白了。 目前Flickr帐户的状态是，所有Aperture里边Star Landscape和Star Portrait中可以公开的照片统统上去Flickr，设定Public权限，并且把这些照片Sent到了我最喜欢的那几个Group里边，与大家分享。所有Star Still Life分类的照片也都按照Star Landscape相同方式上传整理并发送到相应Group里边。个人人像照片在Aperture里边是Star Portrait组，在Flickr中是Private Portrait，设定权限为Friend and Family。其他生活照片，比如说老婆前一阵子要的她在国内拍的那些照片，都在Aperture的相应Project中新建名字为Flickr Uploaded的Album，从中筛选适合上传的照片，把其他照片统统剔除，因为在Aperture的Album中可以使用Album Select设定，将Stack中的照片选择一张最佳的设定为Album Select，这样在Export的时候，其他没有被Album选中，却因为Stack的关系出现了在Album中的照片就不会同其他照片一起被输出。对应每一个Project的Flickr Uploaded Album启动Flickr Exporter，按照日期新建Set上传到Flickr，设定权限为Family，并将该Set加入到Life is a Story Collection中，这样具有Family身份的用户可以直接在Flickr的Collection中看到所有生活照片的Set。 这些东西为什么原来不弄呢？首先，原来没时间也没觉得应该整理一下我那一万五千多张照片的Aperture Library，最近几天得了闲，开始埋头整理照片。其次，找到了好几个好用的工具配合Aperture。记得第一次上Flickr是直接从Aperture拖照片到Flickr Uploader中，一开始也没觉得怎么样，后来明白拖过去的原来只是Aperture的Preview，图片质量那个惨啊，根本不存在Flickr上Mediam和Large以上级别访问的可能性。接着换用了另一种方式，先从Aperture中Export Versions到Mac中，再把导出的文件拖到Uploader进行分类和上传。不用说，用过Aperture的人都知道，Export Versions操作所需要的时间基本上是给用户喝掉一壶茶的时间。渐渐的使用这种方法上照片开始觉得厌烦，所以曾有一段时间都没管Flickr的事儿。最近用Aperture熟练了许多，先用Edit with Photoshop生成新Version，再用Photoshop结合onOne Photo Tools滤镜处理照片，完成后直接保存/关闭并返回Aperture等待Version Preview刷新，最后直接用Aperture的插件Flickr Exporter与Flickr Web API交互，把照片弄上去。这一个流程用了一段时间，感觉是最快也是最方便的流程。对于我这拥有一万五千多张照片的人来说，工具再强大，也只能是提供一个让思路保持清晰的办法，真正干活的还是人。 上面的内容怪专业的，因为要说明照片从Aperture到Flickr的整个流程，所以只好用Aperture里边自带的英文术语，不然要是把Stack说成堆栈，估计读者还得有个翻译过程才能找到对应的内容。 Flickr的社区功能做的真的不错，不管从照片管理，还是分享渠道来说，Flickr的设计师和程序员都是一流的。开放的Web API、全部无刷新的Ajax应用、完善的用户身份管理，以及起到决定作用的使用Web API和网站服务器进行交互的那些各式各样的Flickr应用程序，真不愧是世界第一的照片共享基地。 还是不替Flickr做广告了，认真生活，才对得起认真对待我们的人。","categories":[{"name":"Dreams","slug":"Dreams","permalink":"https://blog.williamyao.com/categories/Dreams/"}],"tags":[{"name":"flickr","slug":"flickr","permalink":"https://blog.williamyao.com/tags/flickr/"},{"name":"aperture","slug":"aperture","permalink":"https://blog.williamyao.com/tags/aperture/"},{"name":"photoshop","slug":"photoshop","permalink":"https://blog.williamyao.com/tags/photoshop/"},{"name":"portrait","slug":"portrait","permalink":"https://blog.williamyao.com/tags/portrait/"},{"name":"landscape","slug":"landscape","permalink":"https://blog.williamyao.com/tags/landscape/"}]},{"title":"花钱如流水，现代人的写照","slug":"2009080301","date":"2009-08-02T16:29:48.000Z","updated":"2018-04-03T02:05:39.314Z","comments":true,"path":"2009/08/03/2009080301/index.html","link":"","permalink":"https://blog.williamyao.com/2009/08/03/2009080301/index.html","excerpt":"","text":"第一次使用MacJournal写日记，也是第一次使用LiveJournal写博客，不知道感觉如何。 就经常写东西的人来说，不知道到底Evernote和LiveJournal哪一种更适合我呢？ 不过这个繁体中文版的MacJournal实在是太恶心了，一些莫名其妙的词语，还不如直接用英文版的呢，可是不知道怎么让MacJournal从英文环境启动，还得再Google一下。","categories":[{"name":"IronWare","slug":"IronWare","permalink":"https://blog.williamyao.com/categories/IronWare/"}],"tags":[{"name":"mac","slug":"mac","permalink":"https://blog.williamyao.com/tags/mac/"},{"name":"journal","slug":"journal","permalink":"https://blog.williamyao.com/tags/journal/"},{"name":"evernote","slug":"evernote","permalink":"https://blog.williamyao.com/tags/evernote/"}]}]}